#!/bin/bash
#+
#:  \file       performance/performance.sh.in
#:  \brief      \$Id$
#:  
#:  (C) 2009 - NHI - #1 - Project - Group
#:  
#:  \version    \$Rev$
#:  \author     EMail: aotto1968 at users.berlios.de
#:  \attention  this software has GPL permissions to copy
#:              please contact AUTHORS for additional information
#:

set -u

#set -xv

typeset -i PORT=7777

VG=""
HT="no"
#NUM=" --num 10 "
NUM=" "

if (( $# > 0 )) ; then 
  case "$1" in
    -vg)  VG="valgrind --trace-children=yes" ; shift;;
    -x)	  set -x; shift;;
    -v)	  set -v; shift;;
    --help-tests) HT=yes; shift;;
  esac
fi

## setup the TOTAL - LINK perf
FSL=" %-20s | %-8s %-8s %-8s %-8s %-8s %-8s %-8s %-8s\n"
FIL=" %-20s | %8s %8s %8s %8s %9s %8s %8s %8s\n"
exec 3>'@abs_top_srcdir@/performance/docs/total_link.perf'
DATE=$(date +"%Y-%m-%d %H:%M:%S")
printf "$FSL" "   Tests from:    " "  send  " "  send  " "  send  " "  send  " " parent  " " parent " " child  " " child  " 1>&3
printf "$FSL" "$DATE"              "  END   " "CALLBACK" "  WAIT  " " PERSIS " " create  " " delete " " create " " delete " 1>&3
printf "$FSL" -------------------   --------   --------   --------   --------   ---------   --------   --------   --------  1>&3

## setup the TOTAL - BRAIN perf
FSB=" %-20s | %-8s %-8s\n"
FIB=" %-20s | %8s %8s\n"
exec 4>'@abs_top_srcdir@/performance/docs/total_brain.perf'
DATE=$(date +"%Y-%m-%d %H:%M:%S")
printf "$FSB" "   Tests from:    " "        " "        " 1>&4
printf "$FSB" "$DATE"              "  PUT   " "  GET   " 1>&4
printf "$FSB" -------------------   --------   --------  1>&4

kill_parent=1
sig_spec=-9

function Die
{
  echor "ERROR: $*"
  exit 1
}

function do_kill # <pid>...
{
    kill "$sig_spec" "$@"
}

function kill_children # pid
{
    local target=$1
    local pid=
    local ppid=
    local i
    # Returns alternating ids: first is pid, second is parent
    IFS="
"
    for line in $(ps -o pid,ppid | tail +2); do
	unset IFS
	set $line
	pid=$1
	ppid=$2
	(( ppid == target && pid != $$ )) && {
	    kill_children $pid
	    do_kill $pid
	}
    done
}

function error
{
  echo "ERROR: $@"
  exit 1
}

c=C
cc=C++
csharp=C#
java=Java
perl=Perl
python=Python
ruby=Ruby
tcl=Tcl
vb=VB.NET
php=PHP
go=Go

TotalLink() {
  L=$1;
  T=$2;
  F=${L}_${T}
  local -a vals
  IFS="
"
  IDX=0
  if test -f '@abs_top_srcdir@/performance/docs/$F.perf' ; then
    for V in $(awk -F ": " '/statistics/ {sub(/^  */, "", $3); print $3}' '@abs_top_srcdir@/performance/docs/$F.perf') ; do
      vals[$IDX]=$V
      let IDX++
    done
    printf "$FIL" "   ${!L}" ${vals[*]} 1>&3
  else 
    printf "$FIL" "   ${!L}" na. na. na. na. na. na. na. 1>&3
  fi
}

TotalBrain() {
  L=$1;
  T=$2;
  F=${L}_${T}
  local -a vals
  IFS="
"
  IDX=0
  if test -f '@abs_top_srcdir@/performance/docs/$F.perf' ; then
    FLAG=NO
    for LINE in $(<'@abs_top_srcdir@/performance/docs/$F.perf') ; do
      unset IFS
      [[ $LINE == *statistics* && $FLAG == "NO" ]] && {
	set - ${LINE:68}
	N="$1 $2"
	V1=$5
	FLAG=YES
	continue
      }
      [[ $LINE == *statistics* && $FLAG == "YES" ]] && {
	set - ${LINE:68}
	[[ $N != "$1 $2" ]] && error FORMAT
	V2=$5
	FLAG=NO
	printf "$FIL" "   $N" $V1 $V2 1>&4
	continue
      }
    done

  fi
}

ALL="c_pipe
c_tcp_fork
c_tcp_thread
c_tcp_spawn
c_uds_fork
c_uds_thread
c_uds_spawn
cc_pipe
cc_tcp_fork
cc_tcp_thread
cc_tcp_spawn
cc_uds_fork
cc_uds_thread
cc_uds_spawn
tcl_pipe
tcl_tcp_fork
tcl_tcp_thread
tcl_tcp_spawn
tcl_uds_fork
tcl_uds_thread
tcl_uds_spawn
java_pipe
java_tcp_thread
java_tcp_spawn
java_uds_thread
java_uds_spawn
python_pipe
python_tcp_fork
python_tcp_spawn
python_uds_fork
python_uds_spawn
ruby_pipe
ruby_tcp_fork
ruby_tcp_spawn
ruby_uds_fork
ruby_uds_spawn
csharp_pipe
csharp_tcp_thread
csharp_tcp_spawn
csharp_uds_thread
csharp_uds_spawn
perl_pipe
perl_tcp_fork
perl_tcp_thread
perl_tcp_spawn
perl_uds_fork
perl_uds_thread
perl_uds_spawn
go_pipe
go_tcp_fork
go_tcp_thread
go_tcp_spawn
go_uds_fork
go_uds_thread
go_uds_spawn
php_pipe
php_tcp_fork
php_tcp_spawn
php_uds_fork
php_uds_spawn
brain_pipe
brain_tcp_fork
brain_tcp_thread
brain_tcp_spawn
brain_uds_fork
brain_uds_thread
brain_uds_spawn"

#vb_pipe
#vb_tcp_thread
#vb_tcp_spawn
#vb_uds_thread
#vb_uds_spawn

[[ $HT == "yes" ]] && {
  echo $ALL
  exit 0
}

#apply the commandline filter
R=""
for A in $ALL; do
  for C in "$@" ; do
    [[ "$A" == *$C* ]] || continue 2
  done
  R+=" $A"
done

## do the tests
#for SRV in c tcl java python ; do
for SRV in $R; do

  echo $SRV

  outfile="@abs_top_srcdir@/performance/docs/${SRV}.perf"

  case $SRV in
    *thread* | *java* | *csharp* | *vb* | *go* )	
      DIR="thread"
      LINK_DIR="thread/@PACKAGE@-@PACKAGE_VERSION@/theLink"
      BRAIN_DIR="thread/@PACKAGE@-@PACKAGE_VERSION@/theBrain"
    ;;
    total)	
      DIR=""
      LINK_DIR=""
      BRAIN_DIR=""
    ;;
    *)	
      DIR="nothread"
      LINK_DIR="nothread/@PACKAGE@-@PACKAGE_VERSION@/theLink"
      BRAIN_DIR="nothread/@PACKAGE@-@PACKAGE_VERSION@/theBrain"
    ;;
  esac

  case $SRV in
    *brain*)	
      EXEC=''
      SERVER="$BRAIN_DIR/abrain/abrain"
      CLIENT="$BRAIN_DIR/tests/client"
    ;;
    *python*)	
      EXEC='PYTHON'
      SERVER="$LINK_DIR/example/python/server.py"	    
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *ruby*)	
      EXEC='RUBY'
      SERVER="$LINK_DIR/example/ruby/server.rb"
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *csharp*)	
      EXEC='MONO'
      SERVER="$LINK_DIR/example/csharp/server.exe"	    
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *vb*)	
      EXEC='MONO'
      SERVER="$LINK_DIR/example/vb/vbserver.exe"	    
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    total)	
      EXEC=''	    
      SERVER=""	    
      CLIENT=""
    ;;
    *java*)	
      EXEC='JAVA'
      SERVER="example.Server" 
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *perl*)	
      EXEC='PERL'
      SERVER="$LINK_DIR/example/perl/server.pl" 
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *php*)	
      EXEC='PHP'
      SERVER="$LINK_DIR/example/php/server.php" 
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *tcl*)	
      EXEC='TCLSH'
      SERVER="$LINK_DIR/example/tcl/server.tcl" 
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *go*)	
      EXEC=''
      SERVER="$LINK_DIR/example/go/server" 
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *cc*)	
      EXEC=''
      SERVER="$LINK_DIR/example/cc/server" 
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *c*)	
      EXEC=''
      SERVER="$LINK_DIR/example/c/server"
      CLIENT="$LINK_DIR/example/c/client"
    ;;
    *)
      echo "ERROR invalid server '$SRV'" 1>&1
      exit 1
    ;;
  esac

  case $SRV in
    *pipe*)
      CL="$VG$CLIENT${NUM}--all @ $EXEC${EXEC:+ }$SERVER"
      echo "> ${CL}" | tee "$outfile"
      @SHELL@ $LINK_DIR/tests/exec.env $CL 2>&1 | tee -a "$outfile"
      continue
    ;;
    *uds*)
      COM_ARGS="--uds --file ./socket.uds"
      COM_RM="./socket.uds"
    ;;
    *tcp*)
      COM_ARGS="--tcp --host localhost --port $PORT"
      COM_RM=""
      let PORT=PORT+1
    ;;
  esac

  case $SRV in
    *thread*)	START=thread;;
    *spawn*)	START=spawn;;
    *fork*)	START=fork;;
  esac

  SV="$VG${VG:+ }$EXEC${EXEC:+ }$SERVER $COM_ARGS --$START"
  CL="$VG${VG:+ }$CLIENT${NUM}--all $COM_ARGS"
  echo "> $SV" | tee "$outfile"
  echo "> $CL" | tee -a "$outfile"
  @SHELL@ $LINK_DIR/tests/exec.env $SV 1>/dev/null 2>&1 &
  PID=$! 
  sleep 2
  $CL 2>&1 | tee -a "$outfile"
  kill_children $PID

done

# calculate the total
for TST in pipe tcp_fork tcp_thread tcp_spawn uds_fork uds_thread uds_spawn; do
  echo -e "\n $TST:" 1>&3
  for LNG in c cc csharp java go perl python ruby tcl php; do
    TotalLink ${LNG} ${TST}
  done
  echo -e "\n $TST:" 1>&4
  for LNG in brain; do
    TotalBrain ${LNG} ${TST}
  done
done

test -f socket.uds && rm socket.uds
exit 0
