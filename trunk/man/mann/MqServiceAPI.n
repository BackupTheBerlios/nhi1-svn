.TH "MqServiceAPI" n "4 Jan 2010" "Version 4.1" "ccmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MqServiceAPI \- create and manage services  

.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMQ_CST\fP \fBMqServiceGetToken\fP (struct \fBMqS\fP const *const ctx)"
.br
.R "get the \fBTOKEN IDENTIFIER\fP from an \fIincomming-service-call\fP "
.ti -1c
.RI "\fBMQ_BOL\fP \fBMqServiceCheckToken\fP (struct \fBMqS\fP const *const ctx, char const *const token)"
.br
.R "in an \fIincomming-service-call\fP compare the \fBTOKEN IDENTIFIER\fP with \fItoken\fP on equity "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqServiceCreate\fP (struct \fBMqS\fP *const ctx, \fBMQ_CST\fP const token, \fBMqTokenF\fP const callback, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP datafreeF)"
.br
.R "create a link between a \fBTOKEN IDENTIFIER\fP and a \fBSERVICE CALLBACK\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqServiceProxy\fP (struct \fBMqS\fP *const ctx, \fBMQ_CST\fP const token, \fBMQ_SIZE\fP const id)"
.br
.R "create a service to link a \fImaster-context\fP with a \fIslave-context\fP. "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqServiceDelete\fP (struct \fBMqS\fP const *const ctx, \fBMQ_CST\fP const token)"
.br
.R "delete a service. "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqProcessEvent\fP (struct \fBMqS\fP *const ctx, \fBMQ_TIME_T\fP timeout, enum \fBMqWaitOnEventE\fP const wait)"
.br
.R "enter the \fIevent-loop\fP and wait for an incoming \fIservice-request\fP. "
.in -1c
.SH "Detailed Description"
.PP 
create and manage services 

To provide a \fIservice\fP is the main purpose of a server and the main-purpose of a \fIclient/server\fP connection is to call a service and to process the results. A service have to be defined on a server during \fIlink-setup\fP (\fBIServerSetup\fP) with the \fBServiceCreate\fP function. The cleanup is done implicit on \fIlink-delete\fP or explicit with the \fBServiceDelete\fP function. 
.SH "Function Documentation"
.PP 
.SS "enum \fBMqErrorE\fP MqProcessEvent (struct \fBMqS\fP *const  ctx, \fBMQ_TIME_T\fP timeout, enum \fBMqWaitOnEventE\fP const  wait)"
.PP
enter the \fIevent-loop\fP and wait for an incoming \fIservice-request\fP. 
.PP
To specify the the \fItime-interval\fP three modes are supported:
.IP "\(bu" 2
\fB\fBMQ_WAIT_NO\fP\fP, don't wait for an event do just the check and comeback
.IP "\(bu" 2
\fB\fBMQ_WAIT_ONCE\fP\fP, use \fItimeout\fP seconds to wait for exact \fIone\fP event or raise an \fItimeout\fP error if no event was found
.IP "\(bu" 2
\fB\fBMQ_WAIT_FOREVER\fP\fP, wait forever and only come back on \fIerror\fP or on \fIexit\fP 
.PP
This function is usually used on a server to enter the \fIevent-loop\fP and wait for incoming service requests or after the \fBSendEND_AND_CALLBACK\fP function to wait for the \fIservice-result\fP.
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBctx = new MqC()\fP 
.br
\fItimeout\fP seconds until a \fItimeout-error\fP is raised (default: \fBcommand-line: --timeout\fP value), only used if \fIwait\fP = \fBMQ_WAIT_ONCE\fP 
.br
\fIwait\fP chose the \fItime-interval\fP to wait for a new event (default: \fBMQ_WAIT_NO\fP) 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP

.SS "\fBMQ_BOL\fP MqServiceCheckToken (struct \fBMqS\fP const *const  ctx, char const *const  token)"
.PP
in an \fIincomming-service-call\fP compare the \fBTOKEN IDENTIFIER\fP with \fItoken\fP on equity 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBctx = new MqC()\fP 
.br
\fItoken\fP the \fBTOKEN IDENTIFIER\fP to identify the service 
.RE
.PP
\fBReturns:\fP
.RS 4
a boolean value, \fIMQ_YES\fP or \fIMQ_NO\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqServiceCreate (struct \fBMqS\fP *const  ctx, \fBMQ_CST\fP const  token, \fBMqTokenF\fP const  callback, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP datafreeF)"
.PP
create a link between a \fBTOKEN IDENTIFIER\fP and a \fBSERVICE CALLBACK\fP 
.PP
The \fItoken\fP have to be unique but the \fIcallback\fP not, this is called an \fIalias\fP. Use \fBtoken = ctx.ServiceGetToken()\fP to get the current token in an \fIincomming-service-call\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBctx = new MqC()\fP 
.br
\fItoken\fP the \fBTOKEN IDENTIFIER\fP to identify the service 
.br
\fIcallback\fP the function to process the incoming \fIservice-request\fP 
.br
\fIdata\fP a user defined additional \fIdata-argument\fP for the \fIcallback\fP function (C-API only) 
.br
\fIdatafreeF\fP the function to free the \fIdata-argument\fP after use (C-API only) 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqServiceDelete (struct \fBMqS\fP const *const  ctx, \fBMQ_CST\fP const  token)"
.PP
delete a service. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBctx = new MqC()\fP 
.br
\fItoken\fP the \fBTOKEN IDENTIFIER\fP to identify the service 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP

.SS "\fBMQ_CST\fP MqServiceGetToken (struct \fBMqS\fP const *const  ctx)"
.PP
get the \fBTOKEN IDENTIFIER\fP from an \fIincomming-service-call\fP 
.PP
This function is needed on the server to process a \fIservice-request\fP defined as \fI+ALL\fP or as an \fIalias\fP to extract the \fIcurrent\fP \fBTOKEN IDENTIFIER\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBctx = new MqC()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBTOKEN IDENTIFIER\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqServiceProxy (struct \fBMqS\fP *const  ctx, \fBMQ_CST\fP const  token, \fBMQ_SIZE\fP const  id)"
.PP
create a service to link a \fImaster-context\fP with a \fIslave-context\fP. 
.PP
This function is used to create a \fIproxy-service\fP to forward the \fIbody-data\fP from the \fIread-data-package\fP of the \fImaster\fP to the \fIsend-data-package\fP of the slave. The data is \fInot\fP changed. This function support the \fIreverse-operation\fP also. If the \fIctx\fP is a \fImaster-context\fP than the data is send to \fIslave\fP identified by \fIid\fP. If the \fIctx\fP is a \fIslave-context\fP than the data is send to the \fImaster\fP of the \fIslave\fP. Use \fIid=0\fP to send that data to the \fIfilter-context\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBctx = new MqC()\fP 
.br
\fItoken\fP the \fBTOKEN IDENTIFIER\fP to identify the service 
.br
\fIid\fP the slave identifier, only used if \fIctx\fP is a \fImaster-context\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ccmsgque from the source code.
