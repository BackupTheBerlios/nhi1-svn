.TH "Mq_Slave_C_API" n "8 Mar 2010" "Version 4.5" "vbmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_Slave_C_API \- create and manage a slave context  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMQ_SLAVE_MAX\fP   1024"
.br
.R "the maximum number of slave objects per master "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveWorker\fP (struct \fBMqS\fP *const ctx, \fBMQ_SIZE\fP const id, struct \fBMqBufferLS\fP **args)"
.br
.R "create a \fImaster/slave\fP link using the image of the \fIctx\fP object self. "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveCreate\fP (struct \fBMqS\fP *const ctx, \fBMQ_SIZE\fP const id, struct \fBMqS\fP *const slave)"
.br
.R "create a \fImaster/slave\fP link between the master-context object and the slave-context object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveDelete\fP (struct \fBMqS\fP *const ctx, \fBMQ_SIZE\fP const id)"
.br
.R "Delete a \fIslave\fP object from a \fImaster/slave\fP link identified by \fIid\fP. "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqSlaveGet\fP (struct \fBMqS\fP const *const ctx, \fBMQ_SIZE\fP const id)"
.br
.R "get the \fIslave-context\fP from a \fImaster-context\fP "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqSlaveGetMaster\fP (struct \fBMqS\fP const *const ctx)"
.br
.R "get the \fImaster-context\fP from the \fIslave-context\fP "
.ti -1c
.RI "static struct \fBMqS\fP * \fBMqSlaveGetMasterI\fP (struct \fBMqS\fP const *const ctx)"
.br
.ti -1c
.RI "int \fBMqSlaveIs\fP (struct \fBMqS\fP const *const ctx)"
.br
.R "is the \fIcontext\fP a \fIslave-context\fP ? "
.ti -1c
.RI "static int \fBMqSlaveIsI\fP (struct \fBMqS\fP const *const ctx)"
.br
.in -1c
.SH "Detailed Description"
.PP 
create and manage a slave context 

The \fImaster-slave-link\fP is used to create a mesh of nodes defined by different \fIparent-context\fP. \fBThe master control the slave.\fP
.PP
The \fImaster-slave-link\fP is used to perform the following tasks:
.IP "\(bu" 2
report error messages from the \fIslave-context\fP to the \fImaster-context\fP 
.IP "\(bu" 2
to create a \fIslave-child-context\fP if a \fImaster-child-context\fP is created
.IP "\(bu" 2
to delete a \fIslave-context\fP if a \fImaster-context\fP is deleted
.PP
In difference to the \fIclient-server-link\fP the \fImaster-slave-link\fP connect two independent \fIparent-context\fP in the same process or thread (e.g. node). This leads to the restriction that only the \fImaster-context\fP can be a \fIserver-context\fP because only one \fIserver-context\fP per node is possible. 
.PP
.nf

       node-0   |           node-1/2        |   node-3/4/5
   ===================================================================
   
   | <- client/server link -> | <- client/server link -> |
   
                | <-- master/slave link --> |
   
                              |- client1-0 -|- server3 ...
                |-  server1  -|             
                |             |- client1-1 -|- server4 ...
     client0-0 -|                           
                |-  server2  -|- client1-2 -|- server5 ...  
.fi
.PP
.PP
\fBDefinition of a 'master-context'\fP
.br
.IP "\(bu" 2
the \fImaster-context\fP is a \fBparent-context\fP without a \fBchild-context\fP available.
.IP "\(bu" 2
the \fImaster-context\fP is a \fBclient-context\fP or a \fBserver-context\fP.
.IP "\(bu" 2
the \fImaster-context\fP is responsible to create or delete the \fBchild-context\fP of the \fIslave\fP.
.IP "\(bu" 2
the \fImaster-context\fP is responsible to delete the \fBparent-context\fP of the \fIslave\fP.
.IP "\(bu" 2
the \fIlink\fP between the \fImaster-context\fP and the \fIslave-context\fP is done using \fBSlaveWorker\fP
.PP
\fBDefinition of a 'slave-context'\fP
.br
.IP "\(bu" 2
the \fIslave-context\fP is a \fBparent-context\fP without a \fBchild-context\fP available.
.IP "\(bu" 2
the \fIslave-context\fP is a \fBclient-context\fP.
.IP "\(bu" 2
the \fIslave-context\fP lifetime is controlled by the \fImaster-context\fP.
.IP "\(bu" 2
the \fIslave-context\fP report all error-messages to the \fImaster-context\fP.
.IP "\(bu" 2
a special form of a \fIslave-context\fP is a \fIworker-context\fP 
.PP
\fBDefinition of a 'worker-context'\fP
.br
.IP "\(bu" 2
the \fIworker-context\fP is a \fIslave-context\fP using the image of the \fImaster-context\fP self.
.IP "\(bu" 2
the \fImaster-context\fP have to be a \fBserver-context\fP.
.IP "\(bu" 2
the \fIworker-context\fP is created using \fBSlaveWorker\fP
.IP "\(bu" 2
the \fIworker-context\fP is identified by a \fIunique\fP integer starting with \fC0\fP.
.PP

.SH "Define Documentation"
.PP 
.SS "#define MQ_SLAVE_MAX   1024"
.PP
the maximum number of slave objects per master 
.PP
\fBAttention:\fP
.RS 4
this number can be changed but \fBlibmsgque\fP have to be recompiled after 
.RE
.PP

.PP
Definition at line 3903 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "enum \fBMqErrorE\fP MqSlaveCreate (struct \fBMqS\fP *const  ctx, \fBMQ_SIZE\fP const  id, struct \fBMqS\fP *const  slave)"
.PP
create a \fImaster/slave\fP link between the master-context object and the slave-context object 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIslave\fP the \fIslave\fP context object as CLIENT-PARENT without a CHILD 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP
\fBAttention:\fP
.RS 4
The \fIslave-context\fP is owned by the \fImaster-context\fP. This mean that no other external references should be used and the \fIslave-context\fP will be deleted if the \fImaster-context\fP is be deleted. 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSlaveDelete (struct \fBMqS\fP *const  ctx, \fBMQ_SIZE\fP const  id)"
.PP
Delete a \fIslave\fP object from a \fImaster/slave\fP link identified by \fIid\fP. 
.PP
By default the \fIslave-context\fP object will be deleted if the \fImaster-context\fP is deleted. Use this function to delete the \fIparent-slave-context\fP explicit and brake the \fImaster/slave\fP link. If \fIid\fP is invalid nothing will happen. It is an \fIerror\fP to delete a \fIchild-slave-context\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP
\fBAttention:\fP
.RS 4
it is still possible to delete a \fIchild-slave-context\fP using \fBLinkDelete\fP but this will break the internal master/slave order. 
.RE
.PP

.SS "struct \fBMqS\fP* MqSlaveGet (struct \fBMqS\fP const *const  ctx, \fBMQ_SIZE\fP const  id)\fC [read]\fP"
.PP
get the \fIslave-context\fP from a \fImaster-context\fP 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fIslave-context\fP or \fCNULL\fP if \fIid\fP is not valid or \fIcontext\fP is not a \fImaster-context\fP. 
.RE
.PP

.SS "struct \fBMqS\fP* MqSlaveGetMaster (struct \fBMqS\fP const *const  ctx)\fC [read]\fP"
.PP
get the \fImaster-context\fP from the \fIslave-context\fP 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fImaster-context\fP or \fINothing\fP if the \fIcontext\fP is no \fIslave-context\fP 
.RE
.PP

.SS "static struct \fBMqS\fP* MqSlaveGetMasterI (struct \fBMqS\fP const *const  ctx)\fC [static, read]\fP"
.PP
get the \fImaster-context\fP from the \fIslave-context\fP 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fImaster-context\fP or \fINothing\fP if the \fIcontext\fP is no \fIslave-context\fP 
.RE
.PP
 
.PP
Definition at line 3971 of file msgque.h.
.SS "int MqSlaveIs (struct \fBMqS\fP const *const  ctx)"
.PP
is the \fIcontext\fP a \fIslave-context\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a boolean value, \fItrue\fP or \fIfalse\fP 
.RE
.PP

.SS "static int MqSlaveIsI (struct \fBMqS\fP const *const  ctx)\fC [static]\fP"
.PP
is the \fIcontext\fP a \fIslave-context\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a boolean value, \fItrue\fP or \fIfalse\fP 
.RE
.PP
 
.PP
Definition at line 3985 of file msgque.h.
.SS "enum \fBMqErrorE\fP MqSlaveWorker (struct \fBMqS\fP *const  ctx, \fBMQ_SIZE\fP const  id, struct \fBMqBufferLS\fP ** args)"
.PP
create a \fImaster/slave\fP link using the image of the \fIctx\fP object self. 
.PP
The slave-context is started as an independent process or thread based on the \fBstartAs\fP argument. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIargs\fP command-line arguments passed to the \fIworker-client\fP or the \fIworker-server\fP. all arguments prior the first \fB@\fP token are added to the \fIworker-client\fP and the other arguments to the \fIworker-server\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for vbmsgque from the source code.
