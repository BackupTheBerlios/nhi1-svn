.TH "MqConfigAPI" n "7 Jan 2010" "Version 4.1" "vbmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MqConfigAPI \- configuration of the \fBMqS\fP object  

.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMqFactoryCreateS\fP"
.br
.R "function pointer to \fIcreate\fP an object "
.ti -1c
.RI "struct \fBMqFactoryDeleteS\fP"
.br
.R "function pointer to \fIdelete\fP an object "
.ti -1c
.RI "struct \fBMqFactoryS\fP"
.br
.R "used for factory function pointer management "
.ti -1c
.RI "struct \fBMqCallbackS\fP"
.br
.R "used for callback function pointer management "
.ti -1c
.RI "struct \fBMqLinkSetupS\fP"
.br
.R "used to Create/Delete of object "
.ti -1c
.RI "struct \fBMqIoUdsConfigS\fP"
.br
.R "configuration data which belong to \fIMqIoS\fP uds setup "
.ti -1c
.RI "struct \fBMqIoTcpConfigS\fP"
.br
.R "configuration data which belong to \fIMqIoS\fP tcp setup "
.ti -1c
.RI "struct \fBMqIoPipeConfigS\fP"
.br
.R "configuration data which belong to \fIMqIoS\fP pipe setup "
.ti -1c
.RI "struct \fBMqIoConfigS\fP"
.br
.R "configuration data which belong to \fIMqIoS\fP "
.ti -1c
.RI "struct \fBMqConfigS\fP"
.br
.R "end-user configuration data, also available as command-line options "
.ti -1c
.RI "struct \fBMqSetupS\fP"
.br
.R "application-programmer configuration data "
.ti -1c
.RI "struct \fBMqLinkS\fP"
.br
.R "object responsible to manage client/server link data "
.ti -1c
.RI "struct \fBMqErrorS\fP"
.br
.R "error-object data type "
.ti -1c
.RI "struct \fBMqS\fP"
.br
.R "Prototype for a context object. "
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMqFactoryS_NULL\fP   { {NULL, NULL, NULL, NULL}, {NULL, NULL, NULL, NULL} }"
.br
.R "initialize a \fBMqFactoryS\fP object to \fCNULL\fP "
.ti -1c
.RI "#define \fBMQ_PRIVATE_CONFIG_CONST\fP   const"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef pid_t(* \fBMqForkF\fP )(void)"
.br
.R "prototype for the \fCfork\fP sys-call "
.ti -1c
.RI "typedef pid_t(* \fBMqVForkF\fP )(void)"
.br
.R "prototype for the \fCvfork\fP sys-call "
.ti -1c
.RI "typedef void(* \fBMqDeleteF\fP )(struct \fBMqS\fP *const context)"
.br
.R "the prototype for a ContextDelete function "
.ti -1c
.RI "typedef void(* \fBMqTokenDataFreeF\fP )(struct \fBMqS\fP const *const context, \fBMQ_PTR\fP *dataP)"
.br
.R "prototype for a free additional token data function "
.ti -1c
.RI "typedef void(* \fBMqHelpF\fP )(\fBMQ_CST\fP)"
.br
.R "application specific help function type "
.ti -1c
.RI "typedef void(* \fBMqFactoryDeleteF\fP )(struct \fBMqS\fP *context, \fBMQ_BOL\fP doFactoryCleanup, \fBMQ_PTR\fP data)"
.br
.R "prototype for a Object-Delete factory function "
.ti -1c
.RI "typedef void(* \fBMqExitF\fP )(int num)"
.br
.R "prototype for exit a process or thread "
.ti -1c
.RI "typedef void(* \fBMqSetupF\fP )(struct \fBMqS\fP *const )"
.br
.R "used to setup (initialize) a new thread/fork/process created by \fBlibmsgque\fP using the \fCSysServer\fP? style commands "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMqFactoryE\fP { \fBMQ_FACTORY_NEW_INIT\fP =  0, \fBMQ_FACTORY_NEW_CHILD\fP =  1, \fBMQ_FACTORY_NEW_SLAVE\fP =  2, \fBMQ_FACTORY_NEW_FORK\fP =  3, \fBMQ_FACTORY_NEW_THREAD\fP =  4, \fBMQ_FACTORY_NEW_FILTER\fP =  5 }"
.br
.R "the \fIfactory\fP is called to create an object for ... "
.ti -1c
.RI "enum \fBMqStatusIsE\fP { \fBMQ_STATUS_IS_INITIAL\fP =  0, \fBMQ_STATUS_IS_DUP\fP =  1<<0, \fBMQ_STATUS_IS_THREAD\fP =  1<<1, \fBMQ_STATUS_IS_FORK\fP =  1<<2, \fBMQ_STATUS_IS_SPAWN\fP =  1<<3 }"
.br
.R "Information about how the \fIcontext\fP was created. "
.ti -1c
.RI "enum \fBMqStartE\fP { \fBMQ_START_DEFAULT\fP =  0, \fBMQ_START_FORK\fP =  1, \fBMQ_START_THREAD\fP =  2, \fBMQ_START_SPAWN\fP =  3 }"
.br
.R "User preferences on HOWTO start a new entity. "
.ti -1c
.RI "enum \fBMqIoComE\fP { \fBMQ_IO_UDS\fP, \fBMQ_IO_TCP\fP, \fBMQ_IO_PIPE\fP }"
.br
.R "what kind of socket interface to use? "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMqContextInit\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP size, struct \fBMqS\fP const *const tmpl)"
.br
.R "initialize the \fBMqS\fP object related data but do \fInot\fP create the object self "
.ti -1c
.RI "void \fBMqContextFree\fP (struct \fBMqS\fP *const context)"
.br
.R "free the \fBMqS\fP object related data but do \fInot\fP free the object self "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqContextCreate\fP (\fBMQ_SIZE\fP size, struct \fBMqS\fP const *const tmpl)"
.br
.R "create the \fBMqS\fP object "
.ti -1c
.RI "void \fBMqContextDelete\fP (struct \fBMqS\fP **contextP)"
.br
.R "delete the entire \fBMqS\fP object "
.ti -1c
.RI "void \fBMqConfigReset\fP (struct \fBMqS\fP *const context)"
.br
.R "clean the \fBMqS::config\fP data "
.ti -1c
.RI "void \fBMqConfigDup\fP (struct \fBMqS\fP *const to, struct \fBMqS\fP const *const from)"
.br
.R "copy the \fBMqS::config\fP data "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSetupDup\fP (struct \fBMqS\fP *const to, struct \fBMqS\fP const *const from)"
.br
.R "copy the \fBMqS::setup\fP data "
.ti -1c
.RI "void \fBMqConfigSetName\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP data)"
.br
.R "set the \fBMqConfigS::name\fP value and cleanup old value "
.ti -1c
.RI "void \fBMqConfigSetIdent\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP data)"
.br
.R "set the \fBMqSetupS::ident\fP value and cleanup old value "
.ti -1c
.RI "void \fBMqConfigSetSrvName\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP data)"
.br
.R "set the \fBMqConfigS::srvname\fP value and cleanup old value "
.ti -1c
.RI "void \fBMqConfigSetBuffersize\fP (struct \fBMqS\fP *const context, \fBMQ_INT\fP data)"
.br
.R "set the \fBMqIoConfigS::buffersize\fP value "
.ti -1c
.RI "void \fBMqConfigSetDebug\fP (struct \fBMqS\fP *const context, \fBMQ_INT\fP data)"
.br
.R "set the \fBMqConfigS::debug\fP value "
.ti -1c
.RI "void \fBMqConfigSetTimeout\fP (struct \fBMqS\fP *const context, \fBMQ_TIME_T\fP data)"
.br
.R "set the \fBMqIoConfigS::timeout\fP value "
.ti -1c
.RI "void \fBMqConfigSetIsSilent\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP data)"
.br
.R "set the \fBMqConfigS::isSilent\fP value "
.ti -1c
.RI "void \fBMqConfigSetIsServer\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP data)"
.br
.R "set the \fBMqSetupS::isServer\fP value "
.ti -1c
.RI "void \fBMqConfigSetIsString\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP data)"
.br
.R "set the \fBMqConfigS::isString\fP value "
.ti -1c
.RI "void \fBMqConfigSetIgnoreExit\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP data)"
.br
.R "set the \fBMqSetupS::ignoreExit\fP value "
.ti -1c
.RI "void \fBMqConfigSetParent\fP (struct \fBMqS\fP *const context, struct \fBMqS\fP *const parent)"
.br
.R "set the \fBMqConfigS::parent\fP value "
.ti -1c
.RI "void \fBMqConfigSetMaster\fP (struct \fBMqS\fP *const context, struct \fBMqS\fP *const master, int master_id)"
.br
.R "set the \fBMqConfigS::master\fP and \fBMqConfigS::master_id\fP value "
.ti -1c
.RI "void \fBMqConfigSetFactory\fP (struct \fBMqS\fP *const context, \fBMqFactoryCreateF\fP fCreate, \fBMQ_PTR\fP CreateData, \fBMqTokenDataFreeF\fP fCreateFree, \fBMqTokenDataCopyF\fP fCreateCopy, \fBMqFactoryDeleteF\fP fDelete, \fBMQ_PTR\fP DeleteData, \fBMqTokenDataFreeF\fP fDeleteFree, \fBMqTokenDataCopyF\fP fDeleteCopy)"
.br
.R "setup the \fIfactory\fP pattern "
.ti -1c
.RI "void \fBMqConfigSetDefaultFactory\fP (struct \fBMqS\fP *const context)"
.br
.R "setup the default \fIfactory\fP pattern "
.ti -1c
.RI "void \fBMqConfigSetIgnoreFork\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP data)"
.br
.R "set the \fBMqConfigS::ignoreFork\fP value "
.ti -1c
.RI "void \fBMqConfigSetIgnoreThread\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP data)"
.br
.R "set the \fBMqConfigS::ignoreThread\fP value "
.ti -1c
.RI "void \fBMqConfigSetStartAs\fP (struct \fBMqS\fP *const context, enum \fBMqStartE\fP data)"
.br
.R "set the \fBMqConfigS::startAs\fP value "
.ti -1c
.RI "void \fBMqConfigSetSetup\fP (struct \fBMqS\fP *const context, \fBMqCreateF\fP fChildCreate, \fBMqDeleteF\fP fChildDelete, \fBMqCreateF\fP fParentCreate, \fBMqDeleteF\fP fParentDelete, \fBMqExitF\fP fProcessExit, \fBMqExitF\fP fThreadExit)"
.br
.R "set various attributes from \fBMqConfigS\fP struct "
.ti -1c
.RI "void \fBMqConfigSetEvent\fP (struct \fBMqS\fP *const context, \fBMqTokenF\fP fFunc, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.br
.R "set the \fBMqSetupS::Event\fP "
.ti -1c
.RI "void \fBMqConfigSetServerSetup\fP (struct \fBMqS\fP *const context, \fBMqTokenF\fP fFunc, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.br
.R "set the \fBMqSetupS::ServerSetup\fP "
.ti -1c
.RI "void \fBMqConfigSetServerCleanup\fP (struct \fBMqS\fP *const context, \fBMqTokenF\fP fTok, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.br
.R "set the \fBMqSetupS::ServerCleanup\fP "
.ti -1c
.RI "void \fBMqConfigSetBgError\fP (struct \fBMqS\fP *const context, \fBMqTokenF\fP fTok, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.br
.R "set the \fBMqSetupS::BgError\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqConfigSetIoUds\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP file)"
.br
.R "set the \fBMqIoUdsConfigS::file\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqConfigSetIoTcp\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP host, \fBMQ_CST\fP port, \fBMQ_CST\fP myhost, \fBMQ_CST\fP myport)"
.br
.R "set the \fBMqIoTcpConfigS\fP data "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqConfigSetIoPipe\fP (struct \fBMqS\fP *const context, \fBMQ_SOCK\fP socket)"
.br
.R "set the \fIpipe\fP configuration data "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqConfigSetDaemon\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP pidfile)"
.br
.R "start the server in daemon mode "
.ti -1c
.RI "int \fBMqConfigGetIsServer\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is a \fIserver\fP ? "
.ti -1c
.RI "int \fBMqConfigGetIsParent\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is a \fIparent\fP ? "
.ti -1c
.RI "int \fBMqConfigGetIsSlave\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is a \fIslave\fP ? "
.ti -1c
.RI "int \fBMqConfigGetIsString\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is a \fIstring\fP ? "
.ti -1c
.RI "int \fBMqConfigGetIsSilent\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is \fIsilent\fP ? "
.ti -1c
.RI "int \fBMqConfigGetIsConnected\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is \fIconnected\fP ? "
.ti -1c
.RI "int \fBMqConfigGetIsDupAndThread\fP (struct \fBMqS\fP const *const context)"
.br
.R "does the \fIcontext\fP object is \fIDuplicate\fP and \fIThread\fP ? "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetName\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fIname\fP of the \fIcontext\fP object "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetIdent\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fIident\fP of the \fIcontext\fP object "
.ti -1c
.RI "\fBMQ_BOL\fP \fBMqConfigCheckIdent\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP ident)"
.br
.R "check the \fIident\fP of the \fIcontext\fP object "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetSrvName\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fIsrvname\fP of the \fIcontext\fP object "
.ti -1c
.RI "\fBMQ_INT\fP \fBMqConfigGetBuffersize\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the minimum of the \fIread/send\fP \fIbuffersize\fP value of the \fIcontext\fP object "
.ti -1c
.RI "\fBMQ_INT\fP \fBMqConfigGetDebug\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fIdebug\fP value of the \fIcontext\fP object "
.ti -1c
.RI "\fBMQ_TIME_T\fP \fBMqConfigGetTimeout\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fItimeout\fP value of the \fIcontext\fP object "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqConfigGetParent\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fIparent\fP value of the \fIconfig\fP object "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqConfigGetMaster\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fImaster\fP value of the \fIconfig\fP object "
.ti -1c
.RI "\fBMQ_SIZE\fP \fBMqConfigGetCtxId\fP (struct \fBMqS\fP const *const context)"
.br
.R "return the context-identification "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetIoUdsFile\fP (struct \fBMqS\fP *const context)"
.br
.R "return the \fBMqIoUdsConfigS::file\fP value "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetIoTcpHost\fP (struct \fBMqS\fP *const context)"
.br
.R "get the \fBMqIoTcpConfigS::host\fP configuration data "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetIoTcpPort\fP (struct \fBMqS\fP *const context)"
.br
.R "get the \fBMqIoTcpConfigS::port\fP configuration data "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetIoTcpMyHost\fP (struct \fBMqS\fP *const context)"
.br
.R "get the \fBMqIoTcpConfigS::myhost\fP configuration data "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqConfigGetIoTcpMyPort\fP (struct \fBMqS\fP *const context)"
.br
.R "get the \fBMqIoTcpConfigS::myport\fP configuration data "
.ti -1c
.RI "\fBMQ_SOCK\fP \fBMqConfigGetIoPipeSocket\fP (struct \fBMqS\fP *const context)"
.br
.R "get the \fIpipe\fP configuration data "
.ti -1c
.RI "enum \fBMqStartE\fP \fBMqConfigGetStartAs\fP (struct \fBMqS\fP *const context)"
.br
.R "return the \fBMqConfigS::startAs\fP value "
.ti -1c
.RI "void \fBMqConfigSetSelf\fP (struct \fBMqS\fP *const context, void *self)"
.br
.R "set the \fBMqS::self\fP value "
.ti -1c
.RI "void * \fBMqConfigGetSelf\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the \fBMqS::self\fP value "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "enum \fBMqErrorE\fP(* \fBMqCreateF\fP )(struct \fBMqS\fP *, struct \fBMqBufferLS\fP **)"
.br
.R "the prototype for a ContextCreate function "
.ti -1c
.RI "enum \fBMqErrorE\fP(* \fBMqTokenF\fP )(struct \fBMqS\fP *const context, \fBMQ_PTR\fP const data)"
.br
.R "prototype for an object method function "
.ti -1c
.RI "enum \fBMqErrorE\fP(* \fBMqTokenDataCopyF\fP )(struct \fBMqS\fP *const context, \fBMQ_PTR\fP *dataP)"
.br
.R "prototype for a copy additional token data function "
.ti -1c
.RI "enum \fBMqErrorE\fP(* \fBMqFactoryCreateF\fP )(struct \fBMqS\fP *const tmpl, enum \fBMqFactoryE\fP create, \fBMQ_PTR\fP data, struct \fBMqS\fP **contextP)"
.br
.R "prototype for a Object-Creation factory function "
.ti -1c
.RI "struct \fBMqFactoryS\fP(* \fBMqFactorySelectorF\fP )(\fBMQ_CST\fP name)"
.br
.R "Return a \fImain\fP factory function found by \fIname\fP. "
.in -1c
.SH "Detailed Description"
.PP 
configuration of the \fBMqS\fP object 
.SH "Define Documentation"
.PP 
.SS "#define MQ_PRIVATE_CONFIG_CONST   const"
.PP
Definition at line 958 of file msgque.h.
.SS "#define MqFactoryS_NULL   { {NULL, NULL, NULL, NULL}, {NULL, NULL, NULL, NULL} }"
.PP
initialize a \fBMqFactoryS\fP object to \fCNULL\fP 
.PP
Definition at line 531 of file msgque.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef void( * \fBMqDeleteF\fP)(struct \fBMqS\fP *const context)"
.PP
the prototype for a ContextDelete function 
.PP
This function is the MqS::fDelete and MqS::fThreadDelete parameter and is used to:
.IP "1." 4
delete a \fIchild\fP context
.IP "2." 4
delete a \fIparent\fP context as the thread exit point
.PP

.PP
Definition at line 432 of file msgque.h.
.SS "typedef void( * \fBMqExitF\fP)(int num)"
.PP
prototype for exit a process or thread 
.PP
Definition at line 536 of file msgque.h.
.SS "typedef void( * \fBMqFactoryDeleteF\fP)(struct \fBMqS\fP *context, \fBMQ_BOL\fP doFactoryCleanup, \fBMQ_PTR\fP data)"
.PP
prototype for a Object-Delete factory function 
.PP
Definition at line 490 of file msgque.h.
.SS "typedef pid_t( * \fBMqForkF\fP)(void)"
.PP
prototype for the \fCfork\fP sys-call 
.PP
Definition at line 406 of file msgque.h.
.SS "typedef void( * \fBMqHelpF\fP)(\fBMQ_CST\fP)"
.PP
application specific help function type 
.PP
Definition at line 463 of file msgque.h.
.SS "typedef void( * \fBMqSetupF\fP)(struct \fBMqS\fP *const )"
.PP
used to setup (initialize) a new thread/fork/process created by \fBlibmsgque\fP using the \fCSysServer\fP? style commands 
.PP
Definition at line 542 of file msgque.h.
.SS "typedef void( * \fBMqTokenDataFreeF\fP)(struct \fBMqS\fP const *const context, \fBMQ_PTR\fP *dataP)"
.PP
prototype for a free additional token data function 
.PP
Definition at line 447 of file msgque.h.
.SS "typedef pid_t( * \fBMqVForkF\fP)(void)"
.PP
prototype for the \fCvfork\fP sys-call 
.PP
Definition at line 409 of file msgque.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMqFactoryE\fP"
.PP
the \fIfactory\fP is called to create an object for ... 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_FACTORY_NEW_INIT \fP\fP
.TP
\fB\fIMQ_FACTORY_NEW_CHILD \fP\fP
.TP
\fB\fIMQ_FACTORY_NEW_SLAVE \fP\fP
.TP
\fB\fIMQ_FACTORY_NEW_FORK \fP\fP
.TP
\fB\fIMQ_FACTORY_NEW_THREAD \fP\fP
.TP
\fB\fIMQ_FACTORY_NEW_FILTER \fP\fP

.PP
Definition at line 468 of file msgque.h.
.SS "enum \fBMqIoComE\fP"
.PP
what kind of socket interface to use? 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_IO_UDS \fP\fP
.TP
\fB\fIMQ_IO_TCP \fP\fP
.TP
\fB\fIMQ_IO_PIPE \fP\fP

.PP
Definition at line 576 of file msgque.h.
.SS "enum \fBMqStartE\fP"
.PP
User preferences on HOWTO start a new entity. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_START_DEFAULT \fP\fP
use application-context default entity creation 
.TP
\fB\fIMQ_START_FORK \fP\fP
create entity as \fIfork\fP 
.TP
\fB\fIMQ_START_THREAD \fP\fP
create entity as \fIthread\fP 
.TP
\fB\fIMQ_START_SPAWN \fP\fP
create entity as \fIspawn\fP process 
.PP
Definition at line 554 of file msgque.h.
.SS "enum \fBMqStatusIsE\fP"
.PP
Information about how the \fIcontext\fP was created. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_STATUS_IS_INITIAL \fP\fP
context is the \fIfirst\fP context 
.TP
\fB\fIMQ_STATUS_IS_DUP \fP\fP
context is created as a duplicate of an other context 
.TP
\fB\fIMQ_STATUS_IS_THREAD \fP\fP
context is created as a thread 
.TP
\fB\fIMQ_STATUS_IS_FORK \fP\fP
context is created as a fork 
.TP
\fB\fIMQ_STATUS_IS_SPAWN \fP\fP
context is created as a spawn 
.PP
Definition at line 545 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "\fBMQ_BOL\fP MqConfigCheckIdent (struct \fBMqS\fP *const  context, \fBMQ_CST\fP ident)"
.PP
check the \fIident\fP of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIident\fP the ident to check for 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBMQ_YES\fP or \fBMQ_NO\fP
.RE
.PP
The check is done with an \fC_IDN\fP request send to the link target. This function is only useful if the link is up and running. 
.SS "void MqConfigDup (struct \fBMqS\fP *const  to, struct \fBMqS\fP const *const  from)"
.PP
copy the \fBMqS::config\fP data 
.PP
.SS "\fBMQ_INT\fP MqConfigGetBuffersize (struct \fBMqS\fP const *const  context)"
.PP
get the minimum of the \fIread/send\fP \fIbuffersize\fP value of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.config.buffersize\fP(R/S) value 
.RE
.PP

.SS "\fBMQ_SIZE\fP MqConfigGetCtxId (struct \fBMqS\fP const *const  context)"
.PP
return the context-identification 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the context-identification number
.RE
.PP
The context-identification is a number and is used in the protocol to link a data-package to a context-pointer. This is necessary because the communication interface (\fCmsgque->io\fP) of a parent-context is used by the child-context too. 
.SS "\fBMQ_INT\fP MqConfigGetDebug (struct \fBMqS\fP const *const  context)"
.PP
get the \fIdebug\fP value of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.config.debug\fP value 
.RE
.PP

.SS "\fBMQ_CST\fP MqConfigGetIdent (struct \fBMqS\fP const *const  context)"
.PP
get the \fIident\fP of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.config.ident\fP value 
.RE
.PP
\fBAttention:\fP
.RS 4
the \fIstring\fP is owned by \fBlibmsgque\fP -> do not free !! 
.RE
.PP

.SS "\fBMQ_SOCK\fP MqConfigGetIoPipeSocket (struct \fBMqS\fP *const  context)"
.PP
get the \fIpipe\fP configuration data 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the pipe socket 
.RE
.PP

.SS "\fBMQ_CST\fP MqConfigGetIoTcpHost (struct \fBMqS\fP *const  context)"
.PP
get the \fBMqIoTcpConfigS::host\fP configuration data 
.PP
.SS "\fBMQ_CST\fP MqConfigGetIoTcpMyHost (struct \fBMqS\fP *const  context)"
.PP
get the \fBMqIoTcpConfigS::myhost\fP configuration data 
.PP
.SS "\fBMQ_CST\fP MqConfigGetIoTcpMyPort (struct \fBMqS\fP *const  context)"
.PP
get the \fBMqIoTcpConfigS::myport\fP configuration data 
.PP
.SS "\fBMQ_CST\fP MqConfigGetIoTcpPort (struct \fBMqS\fP *const  context)"
.PP
get the \fBMqIoTcpConfigS::port\fP configuration data 
.PP
.SS "\fBMQ_CST\fP MqConfigGetIoUdsFile (struct \fBMqS\fP *const  context)"
.PP
return the \fBMqIoUdsConfigS::file\fP value 
.PP
.SS "int MqConfigGetIsConnected (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is \fIconnected\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC(context->link != NULL)\fP value 
.RE
.PP

.SS "int MqConfigGetIsDupAndThread (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is \fIDuplicate\fP and \fIThread\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC((config->statusIs & MQ_STATUS_IS_DUP) && (config->statusIs & MQ_STATUS_IS_THREAD))\fP value 
.RE
.PP

.SS "int MqConfigGetIsParent (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is a \fIparent\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC(context->config.parent == NULL)\fP value 
.RE
.PP

.SS "int MqConfigGetIsServer (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is a \fIserver\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC(context->setup.isServer == MQ_YES)\fP value 
.RE
.PP

.SS "int MqConfigGetIsSilent (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is \fIsilent\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC(context->config.isSilent == MQ_YES)\fP value 
.RE
.PP

.SS "int MqConfigGetIsSlave (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is a \fIslave\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC(context->config.master != NULL)\fP value 
.RE
.PP

.SS "int MqConfigGetIsString (struct \fBMqS\fP const *const  context)"
.PP
does the \fIcontext\fP object is a \fIstring\fP ? 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fC(context->config.isString == MQ_YES)\fP value 
.RE
.PP

.SS "struct \fBMqS\fP* MqConfigGetMaster (struct \fBMqS\fP const *const  context)\fC [read]\fP"
.PP
get the \fImaster\fP value of the \fIconfig\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqConfigS::master\fP value 
.RE
.PP

.SS "\fBMQ_CST\fP MqConfigGetName (struct \fBMqS\fP const *const  context)"
.PP
get the \fIname\fP of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.config.name\fP value 
.RE
.PP
\fBAttention:\fP
.RS 4
the \fIstring\fP is owned by \fBlibmsgque\fP -> do not free !! 
.RE
.PP

.SS "struct \fBMqS\fP* MqConfigGetParent (struct \fBMqS\fP const *const  context)\fC [read]\fP"
.PP
get the \fIparent\fP value of the \fIconfig\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqConfigS::parent\fP value 
.RE
.PP

.SS "void* MqConfigGetSelf (struct \fBMqS\fP const *const  context)"
.PP
get the \fBMqS::self\fP value 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP

.SS "\fBMQ_CST\fP MqConfigGetSrvName (struct \fBMqS\fP const *const  context)"
.PP
get the \fIsrvname\fP of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.config.srvname\fP value 
.RE
.PP
\fBAttention:\fP
.RS 4
the \fIstring\fP is owned by \fBlibmsgque\fP -> do not free !! 
.RE
.PP

.SS "enum \fBMqStartE\fP MqConfigGetStartAs (struct \fBMqS\fP *const  context)"
.PP
return the \fBMqConfigS::startAs\fP value 
.PP
.SS "\fBMQ_TIME_T\fP MqConfigGetTimeout (struct \fBMqS\fP const *const  context)"
.PP
get the \fItimeout\fP value of the \fIcontext\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.config.timeout\fP value 
.RE
.PP

.SS "void MqConfigReset (struct \fBMqS\fP *const  context)"
.PP
clean the \fBMqS::config\fP data 
.PP
.SS "void MqConfigSetBgError (struct \fBMqS\fP *const  context, \fBMqTokenF\fP fTok, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.PP
set the \fBMqSetupS::BgError\fP 
.PP
.SS "void MqConfigSetBuffersize (struct \fBMqS\fP *const  context, \fBMQ_INT\fP data)"
.PP
set the \fBMqIoConfigS::buffersize\fP value 
.PP
.SS "enum \fBMqErrorE\fP MqConfigSetDaemon (struct \fBMqS\fP *const  context, \fBMQ_CST\fP pidfile)"
.PP
start the server in daemon mode 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIpidfile\fP write the PID of the daemon into this file 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP
.RE
.PP
A \fIdaemon\fP is a background process without any link to the starting process and the stdin/stdout/stderr closed. 
.SS "void MqConfigSetDebug (struct \fBMqS\fP *const  context, \fBMQ_INT\fP data)"
.PP
set the \fBMqConfigS::debug\fP value 
.PP
.SS "void MqConfigSetDefaultFactory (struct \fBMqS\fP *const  context)"
.PP
setup the default \fIfactory\fP pattern 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP
.RE
.PP
The \fIdefault\fP factory is just a wrapper for \fBMqContextCreate\fP with additional error management code. A simple application \fIwithout\fP an application specific \fIfactory\fP use this configuration. 
.SS "void MqConfigSetEvent (struct \fBMqS\fP *const  context, \fBMqTokenF\fP fFunc, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.PP
set the \fBMqSetupS::Event\fP 
.PP
.SS "void MqConfigSetFactory (struct \fBMqS\fP *const  context, \fBMqFactoryCreateF\fP fCreate, \fBMQ_PTR\fP CreateData, \fBMqTokenDataFreeF\fP fCreateFree, \fBMqTokenDataCopyF\fP fCreateCopy, \fBMqFactoryDeleteF\fP fDelete, \fBMQ_PTR\fP DeleteData, \fBMqTokenDataFreeF\fP fDeleteFree, \fBMqTokenDataCopyF\fP fDeleteCopy)"
.PP
setup the \fIfactory\fP pattern 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIfCreate\fP set the \fBMqSetupS::Factory\fP - \fBMqFactoryCreateS::fCall\fP value 
.br
\fICreateData\fP set the \fBMqSetupS::Factory\fP - \fBMqFactoryCreateS::data\fP value 
.br
\fIfCreateFree\fP free the \fICreateData\fP 
.br
\fIfCreateCopy\fP copy the \fICreateData\fP 
.br
\fIfDelete\fP set the \fBMqSetupS::Factory\fP - \fBMqFactoryDeleteS::fCall\fP value 
.br
\fIDeleteData\fP set the \fBMqSetupS::Factory\fP - \fBMqFactoryDeleteS::data\fP value 
.br
\fIfDeleteFree\fP delete the \fIDeleteData\fP 
.br
\fIfDeleteCopy\fP copy the \fIDeleteData\fP 
.RE
.PP

.SS "void MqConfigSetIdent (struct \fBMqS\fP *const  context, \fBMQ_CST\fP data)"
.PP
set the \fBMqSetupS::ident\fP value and cleanup old value 
.PP
.SS "void MqConfigSetIgnoreExit (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP data)"
.PP
set the \fBMqSetupS::ignoreExit\fP value 
.PP
.SS "void MqConfigSetIgnoreFork (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP data)"
.PP
set the \fBMqConfigS::ignoreFork\fP value 
.PP
.SS "void MqConfigSetIgnoreThread (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP data)"
.PP
set the \fBMqConfigS::ignoreThread\fP value 
.PP
.SS "enum \fBMqErrorE\fP MqConfigSetIoPipe (struct \fBMqS\fP *const  context, \fBMQ_SOCK\fP socket)"
.PP
set the \fIpipe\fP configuration data 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIsocket\fP the name of the known socket 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP
.RE
.PP
This is configuration option is only useful for a \fI\fP(x)inetd setup to use the stdin (socket=0) as send/recv communication socket 
.SS "enum \fBMqErrorE\fP MqConfigSetIoTcp (struct \fBMqS\fP *const  context, \fBMQ_CST\fP host, \fBMQ_CST\fP port, \fBMQ_CST\fP myhost, \fBMQ_CST\fP myport)"
.PP
set the \fBMqIoTcpConfigS\fP data 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIhost\fP client: the remote host name
.br
 server: the local interface name 
.br
\fIport\fP client: the remote port name
.br
 server: the local port name 
.br
\fImyhost\fP client: the local host name 
.br
\fImyport\fP client: the local port name 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
use a string value for a \fIport\fP to support named ports as well 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqConfigSetIoUds (struct \fBMqS\fP *const  context, \fBMQ_CST\fP file)"
.PP
set the \fBMqIoUdsConfigS::file\fP 
.PP
.SS "void MqConfigSetIsServer (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP data)"
.PP
set the \fBMqSetupS::isServer\fP value 
.PP
.SS "void MqConfigSetIsSilent (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP data)"
.PP
set the \fBMqConfigS::isSilent\fP value 
.PP
.SS "void MqConfigSetIsString (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP data)"
.PP
set the \fBMqConfigS::isString\fP value 
.PP
.SS "void MqConfigSetMaster (struct \fBMqS\fP *const  context, struct \fBMqS\fP *const  master, int master_id)"
.PP
set the \fBMqConfigS::master\fP and \fBMqConfigS::master_id\fP value 
.PP
.SS "void MqConfigSetName (struct \fBMqS\fP *const  context, \fBMQ_CST\fP data)"
.PP
set the \fBMqConfigS::name\fP value and cleanup old value 
.PP
.SS "void MqConfigSetParent (struct \fBMqS\fP *const  context, struct \fBMqS\fP *const  parent)"
.PP
set the \fBMqConfigS::parent\fP value 
.PP
.SS "void MqConfigSetSelf (struct \fBMqS\fP *const  context, void * self)"
.PP
set the \fBMqS::self\fP value 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIself\fP a pointer to the managed context usually \fIself\fP or \fIthis\fP 
.RE
.PP

.SS "void MqConfigSetServerCleanup (struct \fBMqS\fP *const  context, \fBMqTokenF\fP fTok, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.PP
set the \fBMqSetupS::ServerCleanup\fP 
.PP
.SS "void MqConfigSetServerSetup (struct \fBMqS\fP *const  context, \fBMqTokenF\fP fFunc, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP fFree, \fBMqTokenDataCopyF\fP fCopy)"
.PP
set the \fBMqSetupS::ServerSetup\fP 
.PP
.SS "void MqConfigSetSetup (struct \fBMqS\fP *const  context, \fBMqCreateF\fP fChildCreate, \fBMqDeleteF\fP fChildDelete, \fBMqCreateF\fP fParentCreate, \fBMqDeleteF\fP fParentDelete, \fBMqExitF\fP fProcessExit, \fBMqExitF\fP fThreadExit)"
.PP
set various attributes from \fBMqConfigS\fP struct 
.PP
.SS "void MqConfigSetSrvName (struct \fBMqS\fP *const  context, \fBMQ_CST\fP data)"
.PP
set the \fBMqConfigS::srvname\fP value and cleanup old value 
.PP
.SS "void MqConfigSetStartAs (struct \fBMqS\fP *const  context, enum \fBMqStartE\fP data)"
.PP
set the \fBMqConfigS::startAs\fP value 
.PP
.SS "void MqConfigSetTimeout (struct \fBMqS\fP *const  context, \fBMQ_TIME_T\fP data)"
.PP
set the \fBMqIoConfigS::timeout\fP value 
.PP
.SS "struct \fBMqS\fP* MqContextCreate (\fBMQ_SIZE\fP size, struct \fBMqS\fP const *const  tmpl)\fC [read]\fP"
.PP
create the \fBMqS\fP object 
.PP
.SS "void MqContextDelete (struct \fBMqS\fP ** contextP)"
.PP
delete the entire \fBMqS\fP object 
.PP
.SS "void MqContextFree (struct \fBMqS\fP *const  context)"
.PP
free the \fBMqS\fP object related data but do \fInot\fP free the object self 
.PP
.SS "void MqContextInit (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP size, struct \fBMqS\fP const *const  tmpl)"
.PP
initialize the \fBMqS\fP object related data but do \fInot\fP create the object self 
.PP
.SS "enum \fBMqErrorE\fP MqSetupDup (struct \fBMqS\fP *const  to, struct \fBMqS\fP const *const  from)"
.PP
copy the \fBMqS::setup\fP data 
.PP
.SH "Variable Documentation"
.PP 
.SS "enum \fBMqErrorE\fP( * \fBMqCreateF\fP)(struct \fBMqS\fP *,struct \fBMqBufferLS\fP **)"
.PP
the prototype for a ContextCreate function 
.PP
This function is the MqS::fCreate and MqS::fThreadCreate parameter and is used to :
.IP "1." 4
create a \fIchild\fP context
.IP "2." 4
create a \fIparent\fP context as the thread entry point
.PP

.SS "enum \fBMqErrorE\fP( * \fBMqFactoryCreateF\fP)(struct \fBMqS\fP *const tmpl, enum \fBMqFactoryE\fP create, \fBMQ_PTR\fP data, struct \fBMqS\fP **contextP)"
.PP
prototype for a Object-Creation factory function 
.PP
.SS "struct \fBMqFactoryS\fP( * \fBMqFactorySelectorF\fP)(\fBMQ_CST\fP name)"
.PP
Return a \fImain\fP factory function found by \fIname\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP the string name of the function to select
.RE
.PP
This function have to be defined in the target tool (example: \fCatool.c\fP) and have to return the \fImain\fP function of type \fBMqFactoryS\fP, The result is used as Entry-Point for \fIfork\fP and \fIthread\fP startup. 
.SS "enum \fBMqErrorE\fP( * \fBMqTokenDataCopyF\fP)(struct \fBMqS\fP *const context, \fBMQ_PTR\fP *dataP)"
.PP
prototype for a copy additional token data function 
.PP
.SS "enum \fBMqErrorE\fP( * \fBMqTokenF\fP)(struct \fBMqS\fP *const context, \fBMQ_PTR\fP const data)"
.PP
prototype for an object method function 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for vbmsgque from the source code.
