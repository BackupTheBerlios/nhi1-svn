.TH "MqMsgqueAPI" n "1 Jan 2010" "Version 4.1" "tclmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MqMsgqueAPI \- the \fI\fBMqS\fP API\fP is used as \fBlibmsgque\fP object.  

.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMqLinkS\fP"
.br
.I "object responsible to manage client/server link data "
.ti -1c
.RI "struct \fBMqErrorS\fP"
.br
.I "error-object data type "
.ti -1c
.RI "struct \fBMqS\fP"
.br
.I "Prototype for a context object. "
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMQ_NO\fP   0"
.br
.I "boolean NO "
.ti -1c
.RI "#define \fBMQ_YES\fP   1"
.br
.I "boolean YES "
.ti -1c
.RI "#define \fBMQ_MqS_SIGNATURE\fP   0x212CF91"
.br
.I "signature used in \fBMqS::signature\fP "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMqIoSelectE\fP { \fBMQ_SELECT_RECV\fP =  (1 << 0), \fBMQ_SELECT_SEND\fP =  (1 << 1) }"
.br
.I "'select' type for reading or writing "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "MQ_EXTERN struct \fBMqBufferLS\fP * \fBMqInitCreate\fP (void)"
.br
.I "setup and return the \fIinit\fP object "
.ti -1c
.RI "MQ_EXTERN void \fBMqInitSysAPI\fP (\fBMqForkF\fP forkF, \fBMqVForkF\fP vforkF)"
.br
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqLinkCreate\fP (struct \fBMqS\fP *const context, struct \fBMqBufferLS\fP **argsP)"
.br
.I "create a parent \fBlibmsgque\fP object link "
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqLinkCreateChild\fP (struct \fBMqS\fP *const context, struct \fBMqS\fP *const parent, struct \fBMqBufferLS\fP **argsP)"
.br
.I "create a child \fBlibmsgque\fP object link "
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqDefaultLinkCreate\fP (struct \fBMqS\fP *const context, struct \fBMqBufferLS\fP **argsP)"
.br
.I "wrapper for \fBMqLinkCreate\fP with \fIargv\fP error check "
.ti -1c
.RI "MQ_EXTERN void \fBMqLinkDelete\fP (struct \fBMqS\fP *const context)"
.br
.I "delete a \fBlibmsgque\fP object "
.ti -1c
.RI "MQ_EXTERN void \fBMqExit\fP (struct \fBMqS\fP *context)"
.br
.I "exit the current process or thread "
.ti -1c
.RI "MQ_EXTERN \fBMQ_STR\fP \fBMqHelp\fP (\fBMQ_CST\fP tool)"
.br
.I "write \fBlibmsgque\fP specific user-help to stderr "
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqCheckForLeftOverArguments\fP (struct \fBMqS\fP *const context, struct \fBMqBufferLS\fP **argvP)"
.br
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqServiceCreate\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const token, \fBMqTokenF\fP const proc, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP datafreeF)"
.br
.I "create a service handle "
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqServiceProxy\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const token, \fBMQ_SIZE\fP const id)"
.br
.I "use a proxy to proxy the incomming trafic to the outgoing trafic "
.ti -1c
.RI "MQ_EXTERN enum \fBMqErrorE\fP \fBMqServiceDelete\fP (struct \fBMqS\fP const *const context, \fBMQ_CST\fP const token)"
.br
.I "delete service handle "
.ti -1c
.RI "MQ_EXTERN \fBMQ_BOL\fP \fBMqCurrentTokenIs\fP (struct \fBMqS\fP const *const context, char const *const token)"
.br
.I "check the current token "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "MQ_EXTERN struct \fBMqBufferLS\fP * \fBMqInitBuf\fP"
.br
.I "the prefix arguments of the starting application "
.ti -1c
.RI "MQ_EXTERN \fBMqFactorySelectorF\fP \fBMqFactorySelector\fP"
.br
.I "name of a procedure to return \fImain\fP like entry-points "
.in -1c
.SH "Detailed Description"
.PP 
the \fI\fBMqS\fP API\fP is used as \fBlibmsgque\fP object. 

the \fI\fBMqS\fP\fP object is created just after the \fIMqContextS\fP object usually in the function \fCContextCreate\fP. every external \fIMqContextS\fP object has only one \fI\fBMqS\fP\fP object and every \fI\fBMqS\fP\fP object has only one \fIMqContextS\fP object. the \fI\fBMqS\fP\fP object will be created with the \fCMqLinkCreate\fP and will be deleted with the \fCMqLinkDelete\fP function. during creation of a \fI\fBMqS\fP\fP object additional objects will be created too: 
.SH "Define Documentation"
.PP 
.SS "#define MQ_MqS_SIGNATURE   0x212CF91"
.PP
signature used in \fBMqS::signature\fP 
.PP
Definition at line 965 of file msgque.h.
.SS "#define MQ_NO   0"
.PP
boolean NO 
.PP
Definition at line 326 of file msgque.h.
.SS "#define MQ_YES   1"
.PP
boolean YES 
.PP
Definition at line 330 of file msgque.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMqIoSelectE\fP"
.PP
'select' type for reading or writing 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_SELECT_RECV \fP\fP
'select' for reading 
.TP
\fB\fIMQ_SELECT_SEND \fP\fP
'select' for writing 
.PP
Definition at line 319 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "MQ_EXTERN enum \fBMqErrorE\fP MqCheckForLeftOverArguments (struct \fBMqS\fP *const  context, struct \fBMqBufferLS\fP ** argvP)"
.PP
check for left over arguments from parameter \fIargv\fP of \fBMqLinkCreate\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIargvP\fP a pointer to the argv, the memory will be freed and the value will be set to \fCNULL\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP
.RE
.PP
This code is not part of \fBMqLinkCreate\fP because sometimes it is necessary to check for left over arguments \fBafter\fP \fBMqLinkCreate\fP was called and after the calling function was able to process function specific arguments. By Default \fBMqLinkCreate\fP will delete \fBall\fP arguments belonging to \fBlibmsgque\fP from the \fIargv\fP object. If the calling function does \fBnot\fP expect additional arguments or arguments were added with spelling errors, a call to \fBMqCheckForLeftOverArguments\fP will detect this. 
.SS "MQ_EXTERN \fBMQ_BOL\fP MqCurrentTokenIs (struct \fBMqS\fP const *const  context, char const *const  token)"
.PP
check the current token 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the current context 
.br
\fItoken\fP the token to compare with 
.RE
.PP

.SS "MQ_EXTERN enum \fBMqErrorE\fP MqDefaultLinkCreate (struct \fBMqS\fP *const  context, struct \fBMqBufferLS\fP ** argsP)"
.PP
wrapper for \fBMqLinkCreate\fP with \fIargv\fP error check 
.PP
create a parent \fBlibmsgque\fP object link 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIargsP\fP command-line arguments will be freed and set to \fCNULL\fP on error 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "MQ_EXTERN void MqExit (struct \fBMqS\fP * context)"
.PP
exit the current process or thread 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
this function will never return
.RE
.PP
.IP "1." 4
Delete the context object using: \fBMqLinkDelete\fP
.IP "2." 4
If available call the context specific exit handler \fC--fParentExit\fP 
.IP "3." 4
final call \fCSysExit\fP to exit the process
.IP "4." 4
It is an Panic error if \fBMqExit\fP is called twice for the same object
.PP

.SS "MQ_EXTERN \fBMQ_STR\fP MqHelp (\fBMQ_CST\fP tool)"
.PP
write \fBlibmsgque\fP specific user-help to stderr 
.PP
\fBParameters:\fP
.RS 4
\fItool\fP the name of the tool (e.g. argv[0]) or NULL. 
.RE
.PP
\fBReturns:\fP
.RS 4
the help messages as string
.RE
.PP
If \fItool\fP != NULL, the function will display a header like: 
.PP
.nf
  tool [ARGUMENT]... syntax:
    aclient [OPTION]... @ tool [OPTION]... @...

.fi
.PP
 on the help page. 
.SS "MQ_EXTERN struct \fBMqBufferLS\fP* MqInitCreate (void)\fC [read]\fP"
.PP
setup and return the \fIinit\fP object 
.PP
\fBReturns:\fP
.RS 4
a pointer to the initialization buffer 
.RE
.PP
\fBAttention:\fP
.RS 4
.IP "\(bu" 2
every usage of this function will free the data of the previous \fIinit\fP object
.IP "\(bu" 2
the data have to fit to the underlying programming language
.PP
The data is used as prefix to setup the argument vector for \fIspawn\fP. The following example demonstrate the usage of \fBMqInitCreate\fP: 
.PP
.nf
struct MqBufferLS * initB = MqInitCreate();
MqBufferLAppendC(initB, 'myExec');
MqBufferLAppendC(initB, 'myExecArgument_1');
...

.fi
.PP
 
.RE
.PP

.SS "MQ_EXTERN void MqInitSysAPI (\fBMqForkF\fP forkF, \fBMqVForkF\fP vforkF)"
.PP
.SS "MQ_EXTERN enum \fBMqErrorE\fP MqLinkCreate (struct \fBMqS\fP *const  context, struct \fBMqBufferLS\fP ** argsP)"
.PP
create a parent \fBlibmsgque\fP object link 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIargsP\fP command-line arguments will be freed and set to \fCNULL\fP on error 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "MQ_EXTERN enum \fBMqErrorE\fP MqLinkCreateChild (struct \fBMqS\fP *const  context, struct \fBMqS\fP *const  parent, struct \fBMqBufferLS\fP ** argsP)"
.PP
create a child \fBlibmsgque\fP object link 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIparent\fP the parent object link 
.br
\fIargsP\fP command-line arguments will be freed and set to \fCNULL\fP on error 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "MQ_EXTERN void MqLinkDelete (struct \fBMqS\fP *const  context)"
.PP
delete a \fBlibmsgque\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP

.SS "MQ_EXTERN enum \fBMqErrorE\fP MqServiceCreate (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  token, \fBMqTokenF\fP const  proc, \fBMQ_PTR\fP data, \fBMqTokenDataFreeF\fP datafreeF)"
.PP
create a service handle 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fItoken\fP a 4 byte string used to identify the remote service 
.br
\fIproc\fP an external (non libmsgque) function to provide the service 
.br
\fIdata\fP an external (non libmsgque) pointer to a data structure linked to the \fBMqTokenF\fP function 
.br
\fIdatafreeF\fP function to free \fIdata\fP pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "MQ_EXTERN enum \fBMqErrorE\fP MqServiceDelete (struct \fBMqS\fP const *const  context, \fBMQ_CST\fP const  token)"
.PP
delete service handle 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fItoken\fP a 4 byte string used to identify the remote service 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "MQ_EXTERN enum \fBMqErrorE\fP MqServiceProxy (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  token, \fBMQ_SIZE\fP const  id)"
.PP
use a proxy to proxy the incomming trafic to the outgoing trafic 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fItoken\fP a 4 byte string used to identify the remote service 
.br
\fIid\fP the slave identifer, only used if \fIcontext\fP is a \fImaster\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP
.RE
.PP
If \fIcontext\fP is a \fImaster\fP context than the data is send to \fIslave\fP with \fIid\fP. If \fIcontext\fP is a \fIslave\fP context than the data is send to the \fImaster\fP of the \fIslave\fP. 
.SH "Variable Documentation"
.PP 
.SS "MQ_EXTERN \fBMqFactorySelectorF\fP \fBMqFactorySelector\fP"
.PP
name of a procedure to return \fImain\fP like entry-points 
.PP
Definition at line 999 of file msgque.h.
.SS "MQ_EXTERN struct \fBMqBufferLS\fP* \fBMqInitBuf\fP"
.PP
the prefix arguments of the starting application 
.PP
Definition at line 995 of file msgque.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for tclmsgque from the source code.
