.TH "Mq_Error_C_API" n "9 Nov 2010" "Version 4.7" "vbmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_Error_C_API \- create and manage error messages.  

.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBMqErrorS\fP"
.br
.R "error-object data type "
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMQ_ERROR_PANIC\fP   ((struct \fBMqS\fP*)NULL)"
.br
.R "panic on error "
.ti -1c
.RI "#define \fBMQ_ERROR_IGNORE\fP   ((struct \fBMqS\fP*)0x1)"
.br
.R "ignore error and do not generate any error-text (don't fill the error object) "
.ti -1c
.RI "#define \fBMQ_ERROR_PRINT\fP   ((struct \fBMqS\fP*)0x2)"
.br
.R "print error to stderr "
.ti -1c
.RI "#define \fBMQ_ERROR_IS_POINTER\fP(e)   (e>MQ_ERROR_PRINT)"
.br
.R "check if the error pointer is a \fIreal\fP pointer or just a flag "
.ti -1c
.RI "#define \fBMqPanicC\fP(context, prefix, errnum, string)   MqPanicV(context,prefix,errnum,'%s',string);"
.br
.R "do a \fBpanic\fP with \fIstring\fP as argument "
.ti -1c
.RI "#define \fBMqPanicSYS\fP(context)"
.br
.R "do a \fBpanic\fP with a \fBsystem\fP error message "
.ti -1c
.RI "#define \fBMqErrorV\fP(error, prefix, errnum, format,...)   MqErrorSGenV(error,prefix,MQ_ERROR,errnum,format, __VA_ARGS__)"
.br
.R "customized edition of \fBMqErrorSGenV\fP "
.ti -1c
.RI "#define \fBMqErrorSAppendC\fP(error, str)   MqErrorSAppendV(error,'%s',str);"
.br
.R "append a string to a \fBMqErrorS\fP "
.ti -1c
.RI "#define \fBMqErrorStack\fP(error)   MqErrorStackP(error, __func__, __FILE__)"
.br
.R "convenience wrapper for \fBMqErrorStackP\fP "
.ti -1c
.RI "#define \fBMqErrorSetEXIT\fP(ctx)   MqErrorSetEXITP(ctx,__func__)"
.br
.R "finish the current \fIcallback\fP, return to \fItoplevel\fP and \fBExit\fP the application "
.ti -1c
.RI "#define \fBMqErrorCheckI\fP(PROC)   (unlikely((PROC) >= MQ_ERROR))"
.br
.R "check on error "
.ti -1c
.RI "#define \fBMqErrorCheck\fP(PROC)   if (MqErrorCheckI(PROC)) goto error"
.br
.R "check \fIreturn-code\fP and \fIgoto error\fP on error "
.ti -1c
.RI "#define \fBMqErrorSwitch\fP(PROC)"
.br
.R "process error message "
.ti -1c
.RI "#define \fBMqErrorReturn\fP(PROC)"
.br
.R "process error message "
.ti -1c
.RI "#define \fBMqErrorCheck1\fP(PROC)   if (MqErrorCheckI(PROC)) goto error1"
.br
.R "check on error and goto label \fIerror1\fP "
.ti -1c
.RI "#define \fBMqErrorCheck2\fP(PROC, JUMP)   if (MqErrorCheckI(PROC)) goto JUMP"
.br
.R "check on error and goto label \fIJUMP\fP "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMqErrorE\fP { \fBMQ_OK\fP, \fBMQ_CONTINUE\fP, \fBMQ_ERROR\fP, \fBMQ_OK\fP =  0, \fBMQ_CONTINUE\fP =  1, \fBMQ_ERROR\fP =  2 }"
.br
.R "collection for the different error-codes "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMqPanicVL\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const prefix, \fBMQ_INT\fP const errnum, \fBMQ_CST\fP const fmt, va_list var_list)"
.br
.R "do a \fBpanic\fP with a vararg argument list "
.ti -1c
.RI "void \fBMqPanicV\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const prefix, \fBMQ_INT\fP const errnum, \fBMQ_CST\fP const fmt,...)"
.br
.R "do a \fBpanic\fP with vararg arguments "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorReset\fP (struct \fBMqS\fP *const context)"
.br
.R "clear the \fIerror\fP and reset the \fIcontext\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSGenVL\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const prefix, enum \fBMqErrorE\fP const errorcode, \fBMQ_INT\fP const errnum, \fBMQ_CST\fP const fmt, va_list var_list)"
.br
.R "set an error-code in \fBMqErrorS\fP with vararg list argument "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSGenV\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const prefix, enum \fBMqErrorE\fP const errorcode, \fBMQ_INT\fP const errnum, \fBMQ_CST\fP const fmt,...)"
.br
.R "set a error-code in \fBMqErrorS\fP with vararg string argument "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorC\fP (struct \fBMqS\fP *const ctx, \fBMQ_CST\fP const prefix, \fBMQ_INT\fP const errnum, \fBMQ_CST\fP const message)"
.br
.R "set the \fIcontext\fP to an \fIerror\fP but do \fBnot\fP raise an \fBERROR OBJECT\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSAppendV\fP (struct \fBMqS\fP const *const context, \fBMQ_CST\fP const fmt,...)"
.br
.R "append a vararg string to a \fBMqErrorS\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorStackP\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const func, \fBMQ_CST\fP const file)"
.br
.R "append a function and filename to the error-buffer "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorGetCode\fP (struct \fBMqS\fP const *const context)"
.br
.R "return the value of \fBMqErrorS\fP code member "
.ti -1c
.RI "static enum \fBMqErrorE\fP \fBMqErrorGetCodeI\fP (struct \fBMqS\fP const *const context)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSetCode\fP (struct \fBMqS\fP *const context, enum \fBMqErrorE\fP code)"
.br
.R "set the value of \fBMqErrorS\fP code member "
.ti -1c
.RI "\fBMQ_CST\fP \fBMqErrorGetText\fP (struct \fBMqS\fP const *const ctx)"
.br
.ti -1c
.RI "void \fBMqErrorPrint\fP (struct \fBMqS\fP *const context)"
.br
.R "print the \fIerror\fP from the \fIcontext\fP to stderr and clear the \fIerror\fP afterwards "
.ti -1c
.RI "\fBMQ_INT\fP \fBMqErrorGetNum\fP (struct \fBMqS\fP const *const ctx)"
.br
.ti -1c
.RI "static \fBMQ_INT\fP \fBMqErrorGetNumI\fP (struct \fBMqS\fP const *const ctx)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSet\fP (struct \fBMqS\fP *const context, \fBMQ_INT\fP num, enum \fBMqErrorE\fP code, \fBMQ_CST\fP const message, struct \fBMqS\fP *const errctx)"
.br
.R "set the value of the \fBMqErrorS\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSetCONTINUE\fP (struct \fBMqS\fP *const context)"
.br
.R "signal end of processing in an \fBIEvent\fP callback "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorSetEXITP\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const prefix)"
.br
.R "create the application exit flag "
.ti -1c
.RI "int \fBMqErrorIsEXIT\fP (struct \fBMqS\fP *const context)"
.br
.R "check for an \fIexit-error-object\fP, return \fItrue\fP or \fIfalse\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorDeleteEXIT\fP (struct \fBMqS\fP *const context)"
.br
.R "cleanup an \fIexit-error\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqErrorCopy\fP (struct \fBMqS\fP *const out, struct \fBMqS\fP *const in)"
.br
.R "copy a \fBMqErrorS\fP from \fIin\fP to \fIout\fP "
.in -1c
.SH "Detailed Description"
.PP 
create and manage error messages. 

the management is done with a \fBMqErrorS\fP object created by \fBMqContextCreate\fP. every \fBMqS\fP object is linked with only one \fBMqErrorS\fP object and every \fBMqErrorS\fP object is linked with only one \fBMqS\fP object. the \fBMqErrorS\fP object is used to collect all data needed to handle an error. 
.SH "Define Documentation"
.PP 
.SS "#define MQ_ERROR_IGNORE   ((struct \fBMqS\fP*)0x1)"
.PP
ignore error and do not generate any error-text (don't fill the error object) 
.PP
This item is used as special meaning for the \fCstruct\fP \fBMqErrorS\fP argument of error-functions 
.PP
Definition at line 2960 of file msgque.h.
.SS "#define MQ_ERROR_IS_POINTER(e)   (e>MQ_ERROR_PRINT)"
.PP
check if the error pointer is a \fIreal\fP pointer or just a flag 
.PP
Definition at line 2969 of file msgque.h.
.SS "#define MQ_ERROR_PANIC   ((struct \fBMqS\fP*)NULL)"
.PP
panic on error 
.PP
This item is used as special meaning for the \fCstruct\fP \fBMqErrorS\fP argument of error-functions 
.PP
Definition at line 2954 of file msgque.h.
.SS "#define MQ_ERROR_PRINT   ((struct \fBMqS\fP*)0x2)"
.PP
print error to stderr 
.PP
This item is used as special meaning for the \fCstruct\fP \fBMqErrorS\fP argument of error-functions 
.PP
Definition at line 2966 of file msgque.h.
.SS "#define MqErrorCheck(PROC)   if (MqErrorCheckI(PROC)) goto error"
.PP
check \fIreturn-code\fP and \fIgoto error\fP on error 
.PP
Definition at line 3233 of file msgque.h.
.SS "#define MqErrorCheck1(PROC)   if (MqErrorCheckI(PROC)) goto error1"
.PP
check on error and goto label \fIerror1\fP 
.PP
Definition at line 3244 of file msgque.h.
.SS "#define MqErrorCheck2(PROC, JUMP)   if (MqErrorCheckI(PROC)) goto JUMP"
.PP
check on error and goto label \fIJUMP\fP 
.PP
Definition at line 3246 of file msgque.h.
.SS "#define MqErrorCheckI(PROC)   (unlikely((PROC) >= MQ_ERROR))"
.PP
check on error 
.PP
\fBReturns:\fP
.RS 4
on \fBMQ_OK\fP and \fBMQ_CONTINUE\fP return \fB1\fP and an \fBMQ_ERROR\fP return \fB0\fP 
.RE
.PP

.PP
Definition at line 3231 of file msgque.h.
.SS "#define MqErrorReturn(PROC)"
.PP
\fBValue:\fP
.PP
.nf
switch (PROC) {\
case MQ_OK: return MQ_OK; case MQ_CONTINUE: return MQ_CONTINUE; case MQ_ERROR: return MqErrorStack (MQ_CONTEXT_S);\
}; return MQ_OK;
.fi
process error message 
.PP
Definition at line 3240 of file msgque.h.
.SS "#define MqErrorSAppendC(error, str)   MqErrorSAppendV(error,'%s',str);"
.PP
append a string to a \fBMqErrorS\fP 
.PP
Definition at line 3091 of file msgque.h.
.SS "#define MqErrorSetEXIT(ctx)   MqErrorSetEXITP(ctx,__func__)"
.PP
finish the current \fIcallback\fP, return to \fItoplevel\fP and \fBExit\fP the application 
.PP
To exit a application from a callback is a difficult task because the code is \fIin-duty\fP. To achive this goal a special \fIexit-error-object\fP is created and reportet to the \fItoplevel\fP. If a \fItransaction\fP is ongoing the \fBSendRETURN\fP is \fBnot\fP called and thus the transaction is not finished. The calling application is informed later by a \fIsocket-down\fP event. 
.PP
Definition at line 3192 of file msgque.h.
.SS "#define MqErrorStack(error)   MqErrorStackP(error, __func__, __FILE__)"
.PP
convenience wrapper for \fBMqErrorStackP\fP 
.PP
Definition at line 3106 of file msgque.h.
.SS "#define MqErrorSwitch(PROC)"
.PP
\fBValue:\fP
.PP
.nf
switch (PROC) {\
case MQ_OK: break; case MQ_ERROR: goto error; case MQ_CONTINUE: return MQ_CONTINUE;\
}
.fi
process error message 
.PP
Definition at line 3236 of file msgque.h.
.SS "#define MqErrorV(error, prefix, errnum, format,  ...)   MqErrorSGenV(error,prefix,MQ_ERROR,errnum,format, __VA_ARGS__)"
.PP
customized edition of \fBMqErrorSGenV\fP 
.PP
Definition at line 3071 of file msgque.h.
.SS "#define MqPanicC(context, prefix, errnum, string)   MqPanicV(context,prefix,errnum,'%s',string);"
.PP
do a \fBpanic\fP with \fIstring\fP as argument 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIerrnum\fP the error number 
.br
\fIstring\fP the string to be displayed 
.RE
.PP
\fBAttention:\fP
.RS 4
this function will never return 
.RE
.PP

.PP
Definition at line 3006 of file msgque.h.
.SS "#define MqPanicSYS(context)"
.PP
\fBValue:\fP
.PP
.nf
MqPanicV(context,__func__,-1,\
        'internal ERROR, please contact your local support');
.fi
do a \fBpanic\fP with a \fBsystem\fP error message 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
this function will never return 
.RE
.PP

.PP
Definition at line 3011 of file msgque.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMqErrorE\fP"
.PP
collection for the different error-codes 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_OK \fP\fP
.TP
\fB\fIMQ_CONTINUE \fP\fP
.TP
\fB\fIMQ_ERROR \fP\fP
.TP
\fB\fIMQ_OK \fP\fP
everything is OK, no error available (persistent) 
.TP
\fB\fIMQ_CONTINUE \fP\fP
continue with upper code 
.TP
\fB\fIMQ_ERROR \fP\fP
exit upper code with an error (persistent) 
.PP
Definition at line 328 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "enum \fBMqErrorE\fP MqErrorC (struct \fBMqS\fP *const  ctx, \fBMQ_CST\fP const  prefix, \fBMQ_INT\fP const  errnum, \fBMQ_CST\fP const  message)"
.PP
set the \fIcontext\fP to an \fIerror\fP but do \fBnot\fP raise an \fBERROR OBJECT\fP 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.br
\fIprefix\fP the error-location like the current function-call or operation 
.br
\fIerrnum\fP the error-number 
.br
\fImessage\fP the error-message 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorCopy (struct \fBMqS\fP *const  out, struct \fBMqS\fP *const  in)"
.PP
copy a \fBMqErrorS\fP from \fIin\fP to \fIout\fP 
.PP
\fBParameters:\fP
.RS 4
\fIout\fP the \fBMqS.error\fP object created by \fBMqLinkCreate\fP 
.br
\fIin\fP the \fBMqS.error\fP object created by \fBMqLinkCreate\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorDeleteEXIT (struct \fBMqS\fP *const  context)"
.PP
cleanup an \fIexit-error\fP 
.PP
.SS "enum \fBMqErrorE\fP MqErrorGetCode (struct \fBMqS\fP const *const  context)"
.PP
return the value of \fBMqErrorS\fP code member 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP

.SS "static enum \fBMqErrorE\fP MqErrorGetCodeI (struct \fBMqS\fP const *const  context)\fC [static]\fP"
.PP
return the value of \fBMqErrorS\fP code member 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
 
.PP
Definition at line 3122 of file msgque.h.
.SS "\fBMQ_INT\fP MqErrorGetNum (struct \fBMqS\fP const *const  ctx)"
.PP
\fBReturns:\fP
.RS 4
the \fIerror-number\fP from the \fIexception-object\fP. The number can be used as exit-code. 
.RE
.PP

.SS "static \fBMQ_INT\fP MqErrorGetNumI (struct \fBMqS\fP const *const  ctx)\fC [static]\fP"
.PP
\fBReturns:\fP
.RS 4
the \fIerror-number\fP from the \fIexception-object\fP. The number can be used as exit-code. 
.RE
.PP
 
.PP
Definition at line 3153 of file msgque.h.
.SS "\fBMQ_CST\fP MqErrorGetText (struct \fBMqS\fP const *const  ctx)"
.PP
\fBReturns:\fP
.RS 4
the \fIerror-message\fP from the \fIexception-object\fP 
.RE
.PP

.SS "int MqErrorIsEXIT (struct \fBMqS\fP *const  context)"
.PP
check for an \fIexit-error-object\fP, return \fItrue\fP or \fIfalse\fP 
.PP
A \fI\fIexit-error-object\fP is\fP set to signal a fatal error which require an \fIapplication-exit\fP. The \fIonly\fP source of this kind of error is a \fIlink-target-abnormal-exit\fP like a server/network crash or an \fBErrorSetEXIT\fP function call. The \fIlink-target-abnormal-exit\fP can only happen for functions doing a network-request like: \fBLinkCreate\fP, \fBLinkCreateChild\fP, \fBLinkConnect\fP, \fBSendEND\fP, \fBSendEND_AND_WAIT\fP or \fBProcessEvent\fP. The goal of this function is to act on an \fIexit-error-object\fP and is used to ignore this error using \fBErrorReset\fP and later do a reconnect using \fBLinkConnect\fP.
.br
 Read more using the code from \fB\fCtheLink/example/LNG/Filter4.LNG\fP\fP 
.SS "void MqErrorPrint (struct \fBMqS\fP *const  context)"
.PP
print the \fIerror\fP from the \fIcontext\fP to stderr and clear the \fIerror\fP afterwards 
.PP
.SS "enum \fBMqErrorE\fP MqErrorReset (struct \fBMqS\fP *const  context)"
.PP
clear the \fIerror\fP and reset the \fIcontext\fP 
.PP
.SS "enum \fBMqErrorE\fP MqErrorSAppendV (struct \fBMqS\fP const *const  context, \fBMQ_CST\fP const  fmt,  ...)"
.PP
append a vararg string to a \fBMqErrorS\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorSet (struct \fBMqS\fP *const  context, \fBMQ_INT\fP num, enum \fBMqErrorE\fP code, \fBMQ_CST\fP const  message, struct \fBMqS\fP *const  errctx)"
.PP
set the value of the \fBMqErrorS\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fInum\fP the error number to set 
.br
\fIcode\fP the error code to set 
.br
\fImessage\fP the error message to set 
.br
\fIerrctx\fP original source of the error 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorSetCode (struct \fBMqS\fP *const  context, enum \fBMqErrorE\fP code)"
.PP
set the value of \fBMqErrorS\fP code member 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIcode\fP the \fIcode\fP to set for \fIerror\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorSetCONTINUE (struct \fBMqS\fP *const  context)"
.PP
signal end of processing in an \fBIEvent\fP callback 
.PP
.SS "enum \fBMqErrorE\fP MqErrorSetEXITP (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  prefix)"
.PP
create the application exit flag 
.PP
.SS "enum \fBMqErrorE\fP MqErrorSGenV (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  prefix, enum \fBMqErrorE\fP const  errorcode, \fBMQ_INT\fP const  errnum, \fBMQ_CST\fP const  fmt,  ...)"
.PP
set a error-code in \fBMqErrorS\fP with vararg string argument 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIerrorcode\fP identify the code 
.br
\fIerrnum\fP the error number 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorSGenVL (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  prefix, enum \fBMqErrorE\fP const  errorcode, \fBMQ_INT\fP const  errnum, \fBMQ_CST\fP const  fmt, va_list var_list)"
.PP
set an error-code in \fBMqErrorS\fP with vararg list argument 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIerrorcode\fP identify the code 
.br
\fIerrnum\fP the error number 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.br
\fIvar_list\fP a variable argument list object 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqErrorStackP (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  func, \fBMQ_CST\fP const  file)"
.PP
append a function and filename to the error-buffer 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIfunc\fP the name of the function to display (e.g. __func__) 
.br
\fIfile\fP the name of the file to display (e.g. __FILE__) 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "void MqPanicV (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  prefix, \fBMQ_INT\fP const  errnum, \fBMQ_CST\fP const  fmt,  ...)"
.PP
do a \fBpanic\fP with vararg arguments 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIerrnum\fP the error number 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.RE
.PP
\fBAttention:\fP
.RS 4
this function will never return 
.RE
.PP

.SS "void MqPanicVL (struct \fBMqS\fP *const  context, \fBMQ_CST\fP const  prefix, \fBMQ_INT\fP const  errnum, \fBMQ_CST\fP const  fmt, va_list var_list)"
.PP
do a \fBpanic\fP with a vararg argument list 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIerrnum\fP the error number 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.br
\fIvar_list\fP a variable argument list object 
.RE
.PP
\fBAttention:\fP
.RS 4
this function will never return 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for vbmsgque from the source code.
