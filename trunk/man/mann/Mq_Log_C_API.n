.TH "Mq_Log_C_API" n "Mon Jan 10 2011" "Version 4.8" "csmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_Log_C_API \- 
.PP
log information to stderr with a common format.  

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMqSetDebugLevel\fP(context)   debugLevel = context->config.debug"
.br
.RI "\fIdefine a variable \fIdebugLevel\fP valid only in the current context \fP"
.ti -1c
.RI "#define \fBMqDLogC\fP(context, level, str)   if (unlikely(context != NULL && context->config.debug >= level)) MqLogC(context,__func__,level,str)"
.br
.RI "\fIlog a plain string \fP"
.ti -1c
.RI "#define \fBMqDLogCL\fP(context, level, str)   if (unlikely(debugLevel >= level)) MqLogC(context,__func__,level,str)"
.br
.RI "\fIlog a plain string using the \fIMqSetDebugLevel\fP definition \fP"
.ti -1c
.RI "#define \fBMqDLogV\fP(context, level, fmt,...)   if (unlikely(MQ_ERROR_IS_POINTER(context) && context->config.debug >= level)) MqLogV(context,__func__,level,fmt,__VA_ARGS__)"
.br
.RI "\fIlog a vararg string using formatting and checking for logging level \fP"
.ti -1c
.RI "#define \fBMqDLogVL\fP(context, level, fmt,...)   if (unlikely(debugLevel >= level)) MqLogV(context,__func__,level,fmt,__VA_ARGS__)"
.br
.RI "\fIlog a vararg string using formatting and checking for logging level using the \fIMqSetDebugLevel\fP definition \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMqLogC\fP (struct \fBMqS\fP const *const ctx, \fBMQ_CST\fP const prefix, \fBMQ_INT\fP level, \fBMQ_CST\fP const message)"
.br
.RI "\fIwrite a logging-message to stderr using the internal format \fP"
.ti -1c
.RI "void \fBMqLogV\fP (struct \fBMqS\fP const *const ctx, \fBMQ_CST\fP const prefix, \fBMQ_INT\fP level, \fBMQ_CST\fP const fmt,...)"
.br
.RI "\fIwrite a \fIprintf\fP style logging-message to stderr using the internal format \fP"
.ti -1c
.RI "void \fBMqLogVL\fP (struct \fBMqS\fP const *const ctx, \fBMQ_CST\fP const prefix, \fBMQ_INT\fP level, \fBMQ_CST\fP const fmt, va_list var_list)"
.br
.RI "\fIwrite a \fIvprintf\fP style logging-message to stderr using the internal format \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqLogErrorCode\fP (enum \fBMqErrorE\fP code)"
.br
.RI "\fIconvert a \fBMqErrorE\fP into a human readable string \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqLogTypeName\fP (const enum \fBMqTypeE\fP type)"
.br
.RI "\fIget the \fItype\fP member from an MqTypeE object in human readable form \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqLogServerOrClient\fP (struct \fBMqS\fP const *const context)"
.br
.RI "\fIconvert a MqContextS server member into a human readable string \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqLogParentOrChild\fP (struct \fBMqS\fP const *const context)"
.br
.RI "\fIconvert a MqContextS parent member into a human readable string \fP"
.in -1c
.SH "Detailed Description"
.PP 
log information to stderr with a common format. 
.SH "Define Documentation"
.PP 
.SS "#define MqDLogC(context, level, str)   if (unlikely(context != NULL && context->config.debug >= level)) MqLogC(context,__func__,level,str)"
.PP
log a plain string \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIlevel\fP from \fBdebug\fP 
.br
\fIstr\fP string to log 
.RE
.PP

.PP
Definition at line 4704 of file msgque.h.
.SS "#define MqDLogCL(context, level, str)   if (unlikely(debugLevel >= level)) MqLogC(context,__func__,level,str)"
.PP
log a plain string using the \fIMqSetDebugLevel\fP definition \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIlevel\fP from \fBdebug\fP 
.br
\fIstr\fP string to log 
.RE
.PP

.PP
Definition at line 4711 of file msgque.h.
.SS "#define MqDLogV(context, level, fmt, ...)   if (unlikely(MQ_ERROR_IS_POINTER(context) && context->config.debug >= level)) MqLogV(context,__func__,level,fmt,__VA_ARGS__)"
.PP
log a vararg string using formatting and checking for logging level \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIlevel\fP from \fBdebug\fP 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.br
\fI...\fP vararg string argument 
.RE
.PP
\fBAttention:\fP
.RS 4
the prefix string is the calling function name 
.RE
.PP

.PP
Definition at line 4720 of file msgque.h.
.SS "#define MqDLogVL(context, level, fmt, ...)   if (unlikely(debugLevel >= level)) MqLogV(context,__func__,level,fmt,__VA_ARGS__)"
.PP
log a vararg string using formatting and checking for logging level using the \fIMqSetDebugLevel\fP definition \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIlevel\fP from \fBdebug\fP 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.br
\fI...\fP vararg string argument 
.RE
.PP
\fBAttention:\fP
.RS 4
the prefix string is the calling function name 
.RE
.PP

.PP
Definition at line 4729 of file msgque.h.
.SS "#define MqSetDebugLevel(context)   debugLevel = context->config.debug"
.PP
define a variable \fIdebugLevel\fP valid only in the current context 
.PP
Definition at line 4698 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "void MqLogC (struct \fBMqS\fP const *constctx, \fBMQ_CST\fP constprefix, \fBMQ_INT\fPlevel, \fBMQ_CST\fP constmessage)"
.PP
write a logging-message to stderr using the internal format The logging is only done if '\fC\fBdebug\fP >= level\fP' and '\fC\fBisSilent\fP == \fIfalse\fP'\fP using the following format: 
.PP
.nf

C> (NAME:PID:THREADID) [YYYY-MM-DD:HH-MM-SS] [DEBUGLEVEL-CONTEXTID-REFCOUNT-CONTEXTPTR-prefix]: message

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIlevel\fP debug level: 0 <= level <= 9 
.br
\fImessage\fP string to log to stderr 
.RE
.PP

.SS "\fBMQ_CST\fP MqLogErrorCode (enum \fBMqErrorE\fPcode)"
.PP
convert a \fBMqErrorE\fP into a human readable string \fBParameters:\fP
.RS 4
\fIcode\fP a value from \fBMqErrorE\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the string 
.RE
.PP

.SS "\fBMQ_CST\fP MqLogParentOrChild (struct \fBMqS\fP const *constcontext)"
.PP
convert a MqContextS parent member into a human readable string \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the string \fIPARENT\fP or \fICHILD\fP 
.RE
.PP

.SS "\fBMQ_CST\fP MqLogServerOrClient (struct \fBMqS\fP const *constcontext)"
.PP
convert a MqContextS server member into a human readable string \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the string \fISERVER\fP or \fICLIENT\fP 
.RE
.PP

.SS "\fBMQ_CST\fP MqLogTypeName (const enum \fBMqTypeE\fPtype)"
.PP
get the \fItype\fP member from an MqTypeE object in human readable form \fBParameters:\fP
.RS 4
\fItype\fP the type of on object from MqTypeE used in various functions and structs like \fBMqBufferS.type\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the 3 character name of the \fBMqTypeE\fP without the \fC'MQ_'\fP prefix and the \fC'T'\fP postfix 
.RE
.PP

.SS "void MqLogV (struct \fBMqS\fP const *constctx, \fBMQ_CST\fP constprefix, \fBMQ_INT\fPlevel, \fBMQ_CST\fP constfmt, ...)"
.PP
write a \fIprintf\fP style logging-message to stderr using the internal format Use the format and the restrictions from \fBLogC\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIlevel\fP debug level: 0 <= level <= 9 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.RE
.PP

.SS "void MqLogVL (struct \fBMqS\fP const *constctx, \fBMQ_CST\fP constprefix, \fBMQ_INT\fPlevel, \fBMQ_CST\fP constfmt, va_listvar_list)"
.PP
write a \fIvprintf\fP style logging-message to stderr using the internal format Use the format and the restrictions from \fBLogC\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the context returned by \fBContextCreate\fP 
.br
\fIprefix\fP used to identify the calling function or the environment 
.br
\fIlevel\fP debug level: 0 <= level <= 9 
.br
\fIfmt\fP a \fBprintf\fP like format string 
.br
\fIvar_list\fP a variable argument list object 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for csmsgque from the source code.
