.TH "tclmsgque" n "1 Jan 2010" "Version 4.1" "tclmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tclmsgque \- The \fBTCL\fP Application-Server Project
.SH "SYNOPSIS"
.PP
\fBpackage require TclMsgque\fP
.SH "INDEX"
.PP
\fBOBJECT CREATION AND DELETION\fP
.br
 \fBOBJECT CONFIGURATION\fP
.br
 \fBLINK CREATION AND DELETION\fP
.br
 \fBADDING SERVICES\fP
.br
 \fBSEND DATA\fP
.br
 \fBREAD DATA\fP
.br
 \fBSLAVE OBJECT\fP
.br
 \fBBUFFER OBJECT\fP
.br
 \fBEXCEPTION OBJECT\fP
.br
 \fBCONTEXT LOCAL STORAGE\fP
.SH "INTRODUCTION"
.PP
The msgque project is an infrastructure to link software together to act like a single software. To link mean distributing work from one software to an other software an wait or not wait for an answer. The linking is done using unix or inet domain sockets and is based on packages send from one software to an other software and back. The msgque project is used to handle all the different aspects for setup and maintain the link and is responsible for:
.IP "\(bu" 2
starting and stopping the server application
.IP "\(bu" 2
starting and stopping the communication interface
.IP "\(bu" 2
sending and receiving package data
.IP "\(bu" 2
reading and writing data from or into a package
.IP "\(bu" 2
setup and maintain the event-handling for an asynchronous transfer
.IP "\(bu" 2
propagate the error messages from the server to the client
.PP
.SH "OBJECT CREATION AND DELETION"
.PP
.SS "MqS"
The \fIobject\fP is the user visible part of a tclmsgque application link.
.SS "set ctx [tclmsgque MqS]"
Create an object ready to be used with \fBLinkCreate\fP to setup an application link. Use the \fBisConnected\fP to check if a link is already available.
.SS "rename $ctx ''"
Delete the entire object including the application link using \fBLinkDelete\fP. The object can \fBnot\fP be reused.
.SH "OBJECT CONFIGURATION"
.PP
The configuration of an object is done using the functions starting with \fCMqConfig\fP... or by using command-line arguments.
.SS "static: tclmsgque Init ...args"
Initialize the process startup argument prefix. The startup-prefix have to be the name of the executable found in the \fCPATH\fP and additional arguments like a script name or required startup options. The startup-prefix is used for two different purpose:
.IP "\(bu" 2
To start a new entity using the \fBstartAs\fP '--spawn' command-line option
.IP "\(bu" 2
To replace the \fBLinkCreate\fP 'SELF' argument after the \fI'@'\fP command-line argument
.PP
The startup-prefix is initially set by tclmsgque during package loading.
.SS "command-line:  --buffersize"
\fBtype:\fP \fCint\fP, \fBget:\fP \fCConfigGetBuffersize\fP , \fBset:\fP \fCConfigSetBuffersize\fP
.PP
The send and receive buffersize in bytes (default: 4KB)
.SS "command-line:  --debug"
\fBtype:\fP \fCint\fP, \fBget:\fP \fCConfigGetDebug\fP , \fBset:\fP \fCConfigSetDebug\fP
.PP
Debug a message-queue application. Valid values are 0 <= \fINUM\fP <= 9 using 0 for 'no debugging' and 9 for 'maximum debugging'. (default: 0)
.SS "command-line:  --timeout"
\fBtype:\fP \fCint\fP, \fBget:\fP \fCConfigGetTimeout\fP , \fBset:\fP \fCConfigSetTimeout\fP
.PP
User defined timeout used for connection setup and data sending (default: 90 seconds)
.SS "command-line:  --name"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetName\fP , \fBset:\fP \fCConfigSetName\fP
.PP
Use \fISTRING\fP as basename of the new message-queue object. The name shows up in the debugging output and is used as prefix for the new created command. (default: the name of the executable)
.SS "command-line:  --srvname"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetSrvName\fP , \fBset:\fP \fCConfigSetSrvName\fP
.PP
Use \fISTRING\fP as a client specific prefix in the server debugging output. This is used to link debugging and error messages on the server to a specific client connection. (default: empty)
.SS "ident"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetIdent\fP , \fBset:\fP \fCConfigSetIdent\fP
.PP
Use string as an application specific identifier set by the programmer and checked with \fCConfigCheckIdent\fP against the \fIidentifier\fP of the link target. The goal is to change the behavior of the application depending on the result. (default: empty)
.SS "command-line: --silent"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsSilent\fP , \fBset:\fP \fCConfigSetIsSilent\fP
.PP
Write (\fIno\fP) or don't write (\fIyes\fP) any output to stdout or stderr. (default: write to stdout or stderr)
.SS "command-line: --string"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsString\fP , \fBset:\fP \fCConfigSetIsString\fP
.PP
Use (\fIyes\fP), as much as possible, strings in the data-package. Convert any native data-type, like integer or double, into a string (sending) and back to native (receiving). (default: use binary)
.SS "ignoreExit"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCNO\fP , \fBset:\fP \fCConfigSetIgnoreExit\fP
.PP
ignore the server EXIT 
.PP
By default the \fIserver\fP exit if the \fIclient\fP close the connection. If \fCignoreExit = \fBMQ_YES\fP\fP is set the \fIserver\fP will continue to work. Without \fIclient\fP connection only the internal event function (\fBMqSetupS::Event\fP, set with \fBMqConfigSetEvent\fP) is available to work on tasks. if \fIall\fP (parent and child) event function return with \fBMqErrorSetCONTINUE\fP (nothing to do) the last task-worker is gone and the process exit. 
.SS "command-line: --thread --spawn --fork"
\fBtype:\fP \fCinteger\fP, \fBget:\fP \fCConfigGetStartAs\fP , \fBset:\fP \fCConfigSetStartAs startAs\fP
.PP
Start a new server as \fIthread\fP or \fIspawn\fP a new process or \fIfork\fP a new process. This arguments are used with:
.IP "\(bu" 2
a server-context to start a new instance after a client connection request
.IP "\(bu" 2
on a server to create a worker with: \fBSlaveWorker\fP
.IP "\(bu" 2
on a client/server together with the \fB'SELF'\fP command-line argument: \fBLinkCreate\fP
.PP
\fBParameters:\fP
.RS 4
\fIstartAs\fP 0=default, 1=fork, 2=thread and 3=spawn
.RE
.PP
.SS "command-line:  --daemon"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetStartAs\fP , \fBset:\fP \fCConfigSetStartAs pidfile\fP
.PP
Close all default IO (e.g stdout, stdin, stderr) and fork the server into the background. (default: no daemon) 
.PP
\fBAttention:\fP
.RS 4
this option require the \fBfork\fP system-call and is \fBnot\fP compatible with threads. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpidfile\fP the name of the file to write the PID into
.RE
.PP
.SS "command-line: --tcp --host --port --myhost --myport"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetIoTcpHost/Port/MyHost/MyPort\fP , \fBset:\fP \fCConfigSetIoTcp host port myhost myport\fP
.PP
Configure a \fItcp\fP socket link. 
.PP
\fBParameters:\fP
.RS 4
\fIhost\fP client: name of the remote host (default: localhost)
.br
 server: name of the local interface (default: listen on \fIall\fP interfaces) 
.br
\fIport\fP client: name of the remote port
.br
 server: name of the local port 
.br
\fImyhost\fP client: name of the local interface 
.br
\fImyport\fP client: name of the local port 
.RE
.PP
\fBAttention:\fP
.RS 4
named ports are supported as well
.RE
.PP
.SS "command-line: --uds --file"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetIoUds\fP , \fBset:\fP \fCConfigSetIoUds pidfile\fP
.PP
Use a \fIuds\fP (http://en.wikipedia.org/wiki/Unix_domain_socket) socket link. The uds communication is usually 50% faster than a local tcp communication but only available on UNIX. 
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP the name of the \fIuds\fP file
.RE
.PP
.SS "command-line: --pipe --socket"
\fBtype:\fP \fCinteger\fP, \fBget:\fP \fCConfigGetIoPipe\fP , \fBset:\fP \fCConfigSetIoPipe socket\fP
.PP
Start a \fIpipe\fP server to listen on \fIsocket\fP. This is the \fBdefault\fP mode to start a server. The \fIsocket\fP option is special because it is used for internal purpose to submit the socket from the client to the server started as pipe by the client. 
.PP
\fBParameters:\fP
.RS 4
\fIsocket\fP the file-descriptor number. The only public usage for this option is to serve as interface for an existing tool like (x)inetd. The (x)inetd tool is a \fIUNIX\fP service to listen on a tcp/ip port and start for every connection the proper entry from the file \fI/etc/\fP(x)inetd.conf with the file-descriptor \fI0\fP as send/recv socket handle.
.RE
.PP
.SS "master"
\fBtype:\fP \fCCommand-Object\fP, \fBget:\fP \fCConfigGetMaster\fP , \fBset:\fP \fC\fBSLAVE OBJECT\fP\fP
.PP
return the \fImaster\fP if \fIctx\fP is a slave-context or \fINULL\fP if \fIctx\fP is not a slave-context. !Only a SLAVE has a master!
.SS "filter"
\fBtype:\fP \fCCommand-Object\fP, \fBget:\fP \fCConfigGetFilter\fP , \fBset:\fP \fCNO\fP
.PP
Get the \fIfilter\fP object from a filter pipeline using the following order: (on error return an \fBEXCEPTION OBJECT\fP)
.IP "1." 4
return the \fI\fBMqConfigS::master\fP\fP if non NULL
.IP "2." 4
return the \fI\fBMqSlaveGet\fP\fP with \fIid\fP if non NULL
.IP "3." 4
return a 'filter not available' error
.PP
.SS "ctxId"
\fBtype:\fP \fCint\fP, \fBget:\fP \fCConfigGetCtxId\fP , \fBset:\fP \fCNO\fP
.PP
return an identifier as integer and is \fIunique\fP per parent-context. The \fIparent-context\fP is always \fC0\fP and every new \fIchild-context\fP get a new identifier by adding 1.
.SS "token"
\fBtype:\fP \fCstring\fP, \fBget:\fP \fCConfigGetToken\fP , \fBset:\fP \fCNO\fP
.PP
return the current \fBTOKEN IDENTIFIER\fP and is only useful in a service callback. This command is needed on the server to implement a generic service (A \fBServiceCreate\fP with different \fBTOKEN IDENTIFIER\fP but with the same \fIservice\fP callback).
.SS "isConnected"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsConnected\fP , \fBset:\fP \fCNO\fP
.PP
Is the tclmsgque context connected ? A context is connected if the \fBLinkCreate\fP command was successful and a context is NOT connected if a) the object has just been created or b) the link was deleted with \fBLinkDelete\fP
.SS "isTransaction"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsTransaction\fP , \fBset:\fP \fCNO\fP
.PP
Return \fIyes\fP if a transaction is ongoing. This function is only usefull in a service, read more in \fBFILTER MODE\fP.
.SS "isServer"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsServer\fP , \fBset:\fP \fCConfigSetIsServer\fP
.PP
True if object is a \fIserver\fP object (default: \fIno\fP, be a client)
.SS "isParent"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsParent\fP , \fBset:\fP \fCNO\fP
.PP
True if object is a \fIparent\fP object (default: \fIyes\fP, be a parent)
.SS "isSlave"
\fBtype:\fP \fCboolean\fP, \fBget:\fP \fCConfigGetIsSlave\fP , \fBset:\fP \fCNO\fP
.PP
True if object is a \fIslave\fP object (default: \fIno\fP, not be a slave)
.SS "IServerSetup"
\fBtype:\fP \fCInterface\fP, \fBget:\fP \fCNO\fP , \fBset:\fP \fC$ctx ConfigSetServerSetup callback\fP
.PP
Interface to define a \fIserver\fP tclmsgque object. This Interface define the ServerSetup callback called at \fBLinkCreate\fP to define the services or to initialize context specific variables. This interface set the \fBisServer\fP configuration value to \fIyes\fP.
.SS "IServerCleanup"
\fBtype:\fP \fCInterface\fP, \fBget:\fP \fCNO\fP , \fBset:\fP \fC$ctx ConfigSetServerCleanup callback\fP
.PP
Interface to define a \fIserver\fP tclmsgque object. This Interface define the ServerCleanup callback called at \fBLinkDelete\fP to free context specific variables. This interface set the \fBisServer\fP configuration value to \fIyes\fP.
.SS "IFactory"
\fBtype:\fP \fCInterface\fP, \fBget:\fP \fCNO\fP , \fBset:\fP \fC$ctx ConfigSetFactory\fP
.PP
The factory pattern is used to create a new application object (read more at: \fBMqSetupS::Factory\fP) Without the \fIFactory\fP pattern only the initial startup context is available to serve incoming requests. In general every server need to provide a \fIFactory\fP pattern.
.SS "IBgError"
\fBtype:\fP \fCInterface\fP, \fBget:\fP \fCNO\fP , \fBset:\fP \fC$ctx ConfigSetBgError callback\fP
.PP
Define an asynchronous error handler. This handler is used for handle errors send with \fBSendERROR\fP. Use \fBErrorGetNum\fP and \fBErrorGetText\fP to access the error.
.SH "LINK CREATION AND DELETION"
.PP
To create and to destroy a link is the main purpose of the tclmsgque library. A link is a client/server connection used to perform various tasks.
.SS "$ctx LinkCreate ..."
Create a \fIparent-context\fP using the \fBOBJECT CONFIGURATION\fP. A parent-context is responsible to setup the client/server link:
.IP "\(bu" 2
the \fIclient-parent-context\fP create the \fIserver-parent-context\fP 
.IP "\(bu" 2
the \fIserver-parent-context\fP wait for a \fIclient-parent-context\fP connection request
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the object from \fBOBJECT CREATION AND DELETION\fP 
.br
\fIargs\fP command-line arguments including the \fB'@'\fP item for the \fI--pipe\fP setup 
.RE
.PP
\fBAttention:\fP
.RS 4
if the first argument after the \fB'@'\fP item is the string \fB'SELF'\fP an independent server of the current server is started. This is not a \fBSLAVE OBJECT\fP. The 'SELF' argument is replaced by an application default setting (if available) or by arguments set with \fBInit\fP.
.RE
.PP
.SS "$ctx LinkCreateChild $parent ..."
Create a \fIchild-context\fP from a tclmsgque \fIparent-context\fP and command-line arguments. A child is using the same process or thread as the parent but a different namespace. With a different namespace a child is able to act on different services on the shared server. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the object from \fBOBJECT CREATION AND DELETION\fP 
.br
\fIparent\fP the parent object 
.br
\fIargs\fP all command-line arguments including the \fB'@'\fP token
.RE
.PP
.SS "$ctx LinkDelete"
Close the client/server link and delete the underlying communication object. All depending objects will be deleted as well like depending \fIchild-context\fP and \fIslave-context\fP local and on the remote site of the link.
.SS "$ctx Exit"
Shutdown the entire communication and exit the current process or thread.
.SH "ADDING SERVICES"
.PP
To provide a \fIservice\fP is the main purpose of a server. The \fI$ctx\fP ServiceCreate token service method is usually added in the \fIServerSetup\fP method of the \fIIServerSetup\fP.
.PP
.PP
.nf
proc ServerSetup {ctx} {
  $ctx ServiceCreate 'SRV1' serviceF
}
.fi
.PP
.SS "TOKEN IDENTIFIER"
The \fItoken\fP identifier is a 4 byte string and identifies the service. The \fItoken\fP is set by the programmer to identify different services. tclmsgque is using some special \fItoken\fP for \fIinternal\fP or \fIcommon\fP usage:
.IP "\(bu" 2
\fB_\fP??? - all \fItoken\fP starting with a \fB'_'\fP are for \fBinternal\fP usage only
.IP "\(bu" 2
\fB+ALL\fP - used in \fBServiceCreate\fP and \fBServiceDelete\fP to listen on \fBall\fP token not handled by other \fItoken\fP more precise
.IP "\(bu" 2
\fB-ALL\fP - used in \fBServiceDelete\fP to delete \fBall\fP token
.IP "\(bu" 2
\fB+FTR\fP - used for \fBONE-DIRECTIONAL FILTER\fP
.IP "\(bu" 2
\fB+EOF\fP - used for \fBONE-DIRECTIONAL FILTER\fP
.PP
.SS "SERVICE CALLBACK"
A service is using a callback to act on an incoming service request. The callback is used on a \fIserver\fP using \fBServiceCreate\fP or on a \fIclient\fP using \fBSendEND_AND_CALLBACK\fP.
.PP
The callback is implemented as TCL procedure using \fIService {ctx}\fP
.SS "$ctx ServiceCreate token service"
Create a new service listen on \fBTOKEN IDENTIFIER\fP and start for every incoming request a \fIservice\fP. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx ServiceProxy token ?id=0?"
Create a new service listen on \fBTOKEN IDENTIFIER\fP and link the incoming package to the outgoing package of slave with \fIid\fP. Use \fIid=0\fP to link a filter.
.SS "$ctx ServiceDelete token"
Delete a new service listen on \fBTOKEN IDENTIFIER\fP . (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx ProcessEvent ?-timeout val? ?-wait (NO|ONCE|FOREVER)?"
Start the Event-Loop and check for the next event. In \fIclient\fP mode this command is usually used together with \fBSendEND_AND_CALLBACK\fP to process the results. (on error return an \fBEXCEPTION OBJECT\fP) 
.PP
\fBParameters:\fP
.RS 4
\fItimeout\fP don't wait more than TIMEOUT seconds to get an answer from the server. If no answer is available an error is raised. (default: \fBcommand-line: --timeout\fP) 
.br
\fIMqC.WAIT\fP use flag value to define the action (default: NO)
.IP "\(bu" 2
\fBNO\fP, don't wait for an event do just the check
.IP "\(bu" 2
\fBONCE\fP, use \fItimeout\fP seconds to wait for exact \fIone\fP event
.IP "\(bu" 2
\fBFOREVER\fP, wait forever and only come back on \fIerror\fP or on \fIexit\fP 
.PP
.RE
.PP
.SH "SEND DATA"
.PP
The \fISend\fP style methods are used to build and send data using the tclmsgque send data package. The data is typed using the \fBTYPE IDENTIFIER\fP and the methods can wait or not for an answer. During waiting the the application is still able to work on events like other tclmsgque client/server links.
.PP
.PP
.nf
$ctx SendSTART
$ctx SendI $num
$ctx SendL_START
 $ctx SendD $balance
 $ctx SendC 'name of the owner'
 $ctx SendB $signature
$ctx SendL_END
$ctx SendEND_AND_WAIT 'SRV1'
.fi
.PP
.SS "$ctx SendSTART"
Initialize a tclmsgque send data package. This method is required.
.SS "$ctx SendEND token"
Send the package using \fBTOKEN IDENTIFIER\fP without expecting an answer (FireAndForget). (on error return an \fBEXCEPTION OBJECT\fP) 
.PP
\fBAttention:\fP
.RS 4
if an \fBerror\fP is raised on the server during service-processing the error is send back as \fBasynchronous event\fP and can be raised sometime in the future. To be sure to get the error immediately use \fBSendEND_AND_WAIT\fP. (on error return an \fBEXCEPTION OBJECT\fP)
.RE
.PP
.SS "$ctx SendEND_AND_WAIT token ?timeout=MQ_TIMEOUT_USER?"
Send the package using \fBTOKEN IDENTIFIER\fP and wait \fItimeout\fP seconds for an answer. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx SendEND_AND_CALLBACK token callback"
Send the package using \fBTOKEN IDENTIFIER\fP and \fBdon't\fP wait for an answer. The answer will be handled by the \fBSERVICE CALLBACK\fP. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx SendRETURN"
Finish a service-handler and return the data if required:
.IP "\(bu" 2
if a transaction is ongoing this function return the answer.
.IP "\(bu" 2
if the answer is an empty package no previous \fBMqSendSTART\fP is required.
.IP "\(bu" 2
if no transaction is ongoing this function does just return the error code.
.PP
(on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx SendERROR"
Send an asynchronous error to the link target. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx Send[TYPE] value"
Add an item using \fBTYPE IDENTIFIER\fP to the tclmsgque send data package. (example: \fISendY\fP)
.SS "$ctx SendN ByteArray"
Add a tclmsgque body \fIitem\fP to the package. A \fIitem\fP is a binary array with a defined \fIlength\fP and including the \fIsize\fP, \fIdata-type\fP and the \fInative\fP data object as information. The \fIitem\fP is usually read with \fBReadN\fP and can be used to save the item into an external storage.
.SS "$ctx SendBDY ByteArray"
Create the entire package \fIbody\fP from a binary array. A package \fIbody\fP include information about the number of items and the native data items. The \fIbody\fP package is usually read with \fBReadBDY\fP and is used to \fItunnel\fP the entire package data. (example: \fIagurad\fP tool)
.SS "$ctx SendL_START"
Start to send an embedded list item.
.SS "$ctx SendL_END"
Finish to send an embedded list item.
.SH "READ DATA"
.PP
Read data from an incoming tclmsgque read data package:
.IP "1." 4
on a server to serve an incoming service-call from the client
.IP "2." 4
on a client to process the return-data from a previous service-call
.PP
Reading data is a passive task in opposite to sending data which is an active task. Passive mean that the read is triggered by an incoming data-package and not by the software-workflow.
.PP
.PP
.nf
set num [$ctx ReadI]
$ctx ReadL_START
 set balance [$ctx ReadD]
 set owner [$ctx ReadC]
 set signature [$ctx ReadB]
$ctx ReadL_END
.fi
.PP
.SS "$ctx Read[TYPE]"
return an item using the \fBTYPE IDENTIFIER\fP from the tclmsgque read data package. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx ReadN"
Read a tclmsgque body \fIitem\fP from the package. A \fIitem\fP as is a binary array with a defined \fIlength\fP and including the \fIsize\fP, \fIdata-type\fP and the \fInative\fP data object as information. The \fIitem\fP is usually send with \fBSendN\fP and can be used to save the item into an external storage.
.SS "$ctx ReadBDY"
Read the entire package \fIbody\fP into a binary array. A package \fIbody\fP include information about the number of items and the native data items. The \fIbody\fP package is usually send with \fBSendBDY\fP and is used to \fItunnel\fP the entire package data. (example: \fIagurad\fP tool)
.SS "$ctx ReadU"
return a temporary \fBBUFFER OBJECT\fP. (on error return an \fBEXCEPTION OBJECT\fP) 
.PP
\fBAttention:\fP
.RS 4
The object is \fBonly\fP valid until a new tclmsgque read data package has arrived.
.RE
.PP
.SS "$ctx ReadProxy otherCtx"
Link two tclmsgque objects to direct pass a data item from one object to the other. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "int: $ctx ReadGetNumItems"
return the number of items left in the tclmsgque read data package.
.SS "bool: $ctx ReadItemExists"
Check if are still items in the tclmsgque read data package.
.SS "$ctx ReadUndo()"
Undo the \fBlast\fP read operation. This is useful if an error was raised or if a buffer object (returned from \fBReadU\fP) has not the expected type. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx ReadL_START"
.SS "$ctx ReadL_START buffer"
Start to read an embedded list item. Use the current read package (\fIbuffer\fP = NULL) or a \fIbuffer\fP object. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx ReadL_END"
Finish to read an embedded list item.
.SH "SLAVE OBJECT"
.PP
The master/slave link is used to create a mesh of nodes by linking different PARENT context objects together. \fBThe master control the slave.\fP
.br
 The link is used to perform the following tasks:
.IP "\(bu" 2
report error messages from the slave to the master
.IP "\(bu" 2
to create a slave-child-context if a master-child-context is created
.IP "\(bu" 2
to delete a slave-context if a master-context is deleted
.PP
In difference to the client/server link the master/slave link connect two independent msgque-context in the same process or thread (e.g. node). This leads to the restriction that only the master-msgque-context can be a server because only one server per node is possible.
.SS "$ctx SlaveWorker id ..."
Create a worker as \fIslave\fP of the \fIctx\fP object using the image of the \fIctx\fP object self and started as an independent process or thread based on the \fBstartAs\fP argument. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP tclmsgque object as SERVER-PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIargs\fP command-line arguments passed to the \fIworker-client\fP or the \fIworker-server\fP. all arguments prior the first \fB@\fP token are added to the \fIworker-client\fP and the other arguments to the \fIworker-server\fP.
.RE
.PP
\fBexample\fP create a worker with id 7 as thread.
.PP
.PP
.nf
$ctx SlaveWorker 7 '--thread' '--silent' '@' 'WORKER' '--name' 'MyWorker'
.fi
.PP
.SS "$ctx SlaveCreate id slave"
Create a master/slave link between the \fIctx\fP object and the \fIslave\fP object. (on error return an \fBEXCEPTION OBJECT\fP) 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP tclmsgque object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIslave\fP the \fIslave\fP tclmsgque object as CLIENT-PARENT without a CHILD
.RE
.PP
.SS "$ctx SlaveDelete id"
Delete a \fIslave-context\fP from a former \fBSlaveCreate\fP command using the same identifier \fIid\fP. By default the \fIslave-context\fP object will be deleted if the \fImaster-context\fP is deleted. In addition \fIonly\fP the \fIparent-slave-context\fP can be deleted explicit. If \fIid\fP is invalid nothing will happen. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$ctx SlaveGet id"
return the \fIslave-context\fP from the \fBSlaveCreate\fP using the same identifier \fIid\fP or \fINULL\fP if the \fIid\fP is not valid or if \fIctx\fP is not a \fImaster\fP.
.SH "BUFFER OBJECT"
.PP
The \fIclass MqBufferC\fP object is created by \fBReadU\fP and id used to save a \fBtypeless temporary data item\fP from the tclmsgque data package. The lifetime of the \fIclass MqBufferC\fP is only the current callback up to the next read operation of the same context.
.PP
.PP
.nf
set buf [$ctx ReadU]
if {[$buf GetType] == 'C'} {
  puts [$buf GetC]
}
.fi
.PP
.SS "TYPE IDENTIFIER"
A tclmsgque buffer data package is type safe, this mean that every item has a type prefix and every \fB$ctx Read[TYPE]\fP or \fB$buffer Get[TYPE]\fP have to match the previous \fB$ctx Send[TYPE] value\fP with the same \fITYPE\fP. One exception, the cast from and to string (TYPE=C) is allowed. The following type identifier's are available:
.IP "\(bu" 2
\fCY\fP : 1 byte signed character
.IP "\(bu" 2
\fCO\fP : 1 byte boolean character using \fIyes\fP for yes or true or \fIno\fP for no or wrong
.IP "\(bu" 2
\fCS\fP : 2 byte signed short
.IP "\(bu" 2
\fCI\fP : 4 byte signed integer
.IP "\(bu" 2
\fCW\fP : 8 byte signed long long integer
.IP "\(bu" 2
\fCF\fP : 4 byte float
.IP "\(bu" 2
\fCD\fP : 8 byte double
.IP "\(bu" 2
\fCB\fP : unsigned char array used for binary data
.IP "\(bu" 2
\fCC\fP : string data using a \fC\\0\fP at the end
.IP "\(bu" 2
\fCL\fP : list type able to hold a list of all items from above
.IP "\(bu" 2
\fCU\fP : typeless buffer able to hold a single item from above
.PP
.SS "$buffer Get[TYPE]"
return the data form the buffer using the \fBTYPE IDENTIFIER\fP. (on error return an \fBEXCEPTION OBJECT\fP)
.SS "$buffer GetType"
return the type as single character of the item stored in the buffer object.
.SH "EXCEPTION OBJECT"
.PP
The exception object is used to transport a tclmsgque error using the \fITCLMSGQUE errorCode\fP.
.PP
.PP
.nf
if {[catch {
 i = $ctx ReadI();
}]} {
 $ctx ErrorSet 
 puts [$ctx ErrorGetText]
 $ctx ErrorReset
}
.fi
.PP
.SS "[lindex $errorCode 3] or $ctx ErrorGetText"
return the error message from the error object.
.SS "[lindex $errorCode 1] or $ctx ErrorGetNum"
return the error number from the error object. The number can be used as exit-code.
.SS "$ctx ErrorC prefix errnum message"
create a tclmsgque error object but do \fBnot\fP raise the \fBEXCEPTION OBJECT\fP
.SS "$ctx ErrorSet"
convert a \fITCLMSGQUE errorCode\fP into a tclmsgque conform error using the \fIctx\fP object. This method is used to enable additional error processing capabilities from \fBLinkDelete\fP or \fBExit\fP after the exception was caught and before the application exit or the object is deleted.
.SS "$ctx ErrorReset"
clear the tclmsgque error object.
.SS "$ctx ErrorRaise"
convert and raise an tclmsgque error object into a TCL \fBEXCEPTION OBJECT\fP.
.SS "$ctx ErrorPrint"
print an tclmsgque error object to stderr and \fIclear\fP the tclmsgque error
.SH "CONTEXT LOCAL STORAGE"
.PP
The CONTEXT LOCAL STORAGE is required to bind user data to the tclmsgque context
.SS "$ctx dict set key... data"
Add \fIdata\fP using \fIkey\fP into the local storage and return the \fIdata\fP afterwards.
.SS "$ctx dict get key..."
return the \fIdata\fP associated with \fIkey\fP or nothing if \fIkey\fP does not exists.
.SS "$ctx dict exists key..."
return \fIyes\fP if \fIkey\fP exists or \fIno\fP if not.
.SS "$ctx dict unset key..."
Remove the \fIkey\fP and the associated \fIdata\fP from the local storage.
.SH "FILTER MODE"
.PP
The filter mode is related to a special usage of the tclmsgque software called a command pipeline. To define a filter create a \fIserver\fP with \fBisServer\fP or use \fBIServerSetup\fP and add the required services.
.SS "ONE-DIRECTIONAL FILTER"
A one-directional filter has a \fIdata-flow\fP from the \fIleft\fP to the \fIright\fP and is well known from the \fBunix\fP shell to link different commands together: 
.PP
.nf

    command1 | command2 | command3

.fi
.PP
 A tclmsgque command pipeline is created with the special character \fB@\fP instead of \fB\fP| : 
.PP
.nf

    msgcmd1 @ msgcmd2 @ msgcmd3

.fi
.PP
 with every command have to use \fBlibmsgque\fP. To define a tclmsgque filter create a service handle with \fBServiceCreate\fP or \fBServiceProxy\fP for the both special token:
.IP "\(bu" 2
\fB+FTR\fP : required to act on filter data rows. Every filter input data is a list of filter data rows and every row is a list of filter data columns. Every row is send to the following filter-command as \fB+FTR\fP service request.
.IP "\(bu" 2
\fB+EOF\fP : required to act on End-Of-Filter data and is called after all \fB+FTR\fP data was send. Sometimes the filter data can not be served as \fB+FTR\fP data (example: sorting of the input rows need to read all rows before the data can be send to the next filter command) and the \fB+EOF\fP token is used to continue send \fB+FTR\fP data rows.
.PP
and send every data item with \fBSendEND_AND_WAIT\fP.
.SS "BI-DIRECTIONAL FILTER"
A bi-directional filter has a \fIdata-flow\fP in both directions and is used in a \fIclassical\fP client/server application: 
.PP
.nf

    client ... <--> ... server

.fi
.PP
 to add an additional feature like a protocol-tunnelling: 
.PP
.nf

    client @ mq2tunnel ... <--> ... tunnel2mq @ server

.fi
.PP
 or to convert the protocol into an other protocol: 
.PP
.nf

    client @ mq2soap ... <--> ... soap-server

.fi
.PP
 To define a \fIbi-directional\fP filter a couple of commands provide support:
.IP "\(bu" 2
\fBServiceCreate\fP : use the token \fB+ALL\fP to act on \fIall\fP services
.IP "\(bu" 2
\fBConfigGetFilter\fP: to get the filter context (other site)
.IP "\(bu" 2
\fBConfigGetToken\fP: to get the current token
.IP "\(bu" 2
\fBConfigGetIsTransaction\fP : to check if a transaction is ongoing
.IP "\(bu" 2
\fBReadBDY\fP : to read the entire body as binary array
.IP "\(bu" 2
\fBSendBDY\fP : to send the entire body
.PP
.SH "PORTABILITY ISSUES"
.PP
The library was tested on Linux, FreeBSD and WindowsXP using a x86_64, ppc processor or i686 processor from the VritualBox emulator.
.SH "EXAMPLES"
.PP
.SS "1. create a server to multiplicate 2 double values and return the result"
 
.PP
.nf
package require TclMsgque
proc MMUL {ctx} {
  $ctx SendSTART
  $ctx SendD [expr {[$ctx ReadD] * [$ctx ReadD]}]
  $ctx SendRETURN
}
proc ServerConfig {ctx} {
  $ctx ServiceCreate 'MMUL' MMUL
}
tclmsgque Main {
  set srv [tclmsgque MqS]
  $srv ConfigSetName MyMulServer
  $srv ConfigSetFactory
  $srv ConfigSetServerSetup ServerConfig
  if {[catch {
    $srv LinkCreate {*}$argv
    $srv ProcessEvent -wait FOREVER
  }]} {
    $srv ErrorSet
  }
  $srv Exit
}

.fi
.PP
 Start \fImulserver.tcl\fP using \fITCP\fP port \fI7777\fP and create a \fIthread\fP for every incoming connection 
.PP
.nf

> tclsh mulserver.tcl --tcp --port 7777 --thread

.fi
.PP
.SS "2. in a client call the service from 1."
 
.PP
.nf
package require TclMsgque
set ctx [tclmsgque MqS]
$ctx LinkCreate --name 'MyMul' {*}$argv
$ctx SendSTART
$ctx SendD 3.67 
$ctx SendD 22.3 
$ctx SendEND_AND_WAIT 'MMUL' 
puts [$ctx ReadD]
$ctx Exit

.fi
.PP
 Use \fImulclient.tcl\fP to connect to \fImulserver.tcl\fP using \fITCP\fP port \fI7777\fP: 
.PP
.nf

> tclsh mulclient.tcl --tcp --port 7777

.fi
.PP
.SS "3. create a filter to wrap every column in a '<>' pair"
 
.PP
.nf
package require TclMsgque
proc FTRcmd {ctx} {
  set ftr [$ctx ConfigGetFilter]
  $ftr SendSTART
  while {[$ctx ReadItemExists]} {
    $ftr SendC '<[$ctx ReadC]>'
  }
  $ftr SendEND_AND_WAIT '+FTR'
  $ctx SendRETURN
}
set srv [tclmsgque MqS]
$srv ConfigSetName ManFilter
$srv ConfigSetIsServer yes
$srv ConfigSetFactory
if {[catch {
  $srv LinkCreate {*}$argv
  $srv ServiceCreate '+FTR' FTRcmd
  $srv ServiceProxy  '+EOF'
  $srv ProcessEvent -wait FOREVER
}]} {
  $srv ErrorSet
}
$srv Exit

.fi
.PP
 Use \fImanfilter.tcl\fP in a LibMsgque command pipeline: 
.PP
.nf

> echo -e "1:2:3\na:b:c" | atool split -d : @ tclsh manfilter.tcl @ atool join -d :

.fi
.PP
.SH "SEE ALSO"
.PP
TCL, C: libmsgque(n), C++: ccmsgque(n), C#: csmsgque(n), JAVA: javamsgque(n), PYTHON: pymsgque(n), TCL: tclmsgque(n), PERL: perlmsgque(n)
.SH "KEYWORDS"
.PP
TCL, unix, socket, message, msgque 
.SH "Author"
.PP 
Generated automatically by Doxygen for tclmsgque from the source code.
