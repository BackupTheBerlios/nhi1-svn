.TH "MqSlaveAPI" n "1 Jan 2010" "Version 4.1" "tclmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MqSlaveAPI \- create and manage a slave context  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMQ_SLAVE_MAX\fP   1024"
.br
.R "the maximum number of slave objects per master "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveWorker\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP const id, struct \fBMqBufferLS\fP **argsP)"
.br
.R "create a \fImaster/slave\fP link using the same object as \fIcontext\fP "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveCreate\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP const id, struct \fBMqS\fP *const slave)"
.br
.R "create a \fImaster/slave\fP link between the current context object and a slave context object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveDelete\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP const id)"
.br
.R "delete a \fImaster/slave\fP "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqSlaveGet\fP (struct \fBMqS\fP const *const context, \fBMQ_SIZE\fP const id)"
.br
.R "get the slave context "
.in -1c
.SH "Detailed Description"
.PP 
create and manage a slave context 

The master/slave link is used to create a mesh of nodes and to link different \fIPARENT\fP context objects together. \fBThe master control the slave.\fP
.PP
The \fIlink\fP is used to perform the following tasks:
.IP "\(bu" 2
report error messages from the \fIslave\fP to the \fImaster\fP 
.IP "\(bu" 2
to create a \fIslave-child-context\fP if a \fImaster-child-context\fP is created
.IP "\(bu" 2
to delete a \fIslave-context\fP if a \fImaster-context\fP is deleted
.PP
In difference to the \fIclient/server\fP link the \fImaster/slave\fP link connect two independent msgque-context in the same process or thread (e.g. node). This leads to the restriction that only the \fImaster-msgque-context\fP can be a \fIserver\fP because only \fIon\fP server per node is possible.
.PP
.PP
.nf

    node-0   |           node-1          |   node-2
===================================================================

| ** client/server link ** | ** client/server link ** |

             | *** master/slave link *** |

                           |- client1-0 -|- server2-0 ...
                           |
             |- server1-0 -|             |- server2-1 ...
             |             |- client1-1 -|- server2-2 ...
  client0-0 -|                           |- server2-3
             |
             |- server1-1 -|- client1-2 -|- server2-4 ...

.fi
.PP
 
.SH "Define Documentation"
.PP 
.SS "#define MQ_SLAVE_MAX   1024"
.PP
the maximum number of slave objects per master 
.PP
\fBAttention:\fP
.RS 4
this number can be changed but \fBlibmsgque\fP have to be recompiled after 
.RE
.PP

.PP
Definition at line 3522 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "enum \fBMqErrorE\fP MqSlaveCreate (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP const  id, struct \fBMqS\fP *const  slave)"
.PP
create a \fImaster/slave\fP link between the current context object and a slave context object 
.PP
The link has the following requirements:
.IP "\(bu" 2
the \fIcontext\fP object have to be a \fIPARENT\fP without a \fICHILD\fP 
.IP "\(bu" 2
the \fIslave\fP object have to be a \fICLIENT-PARENT\fP without a \fICHILD\fP 
.IP "\(bu" 2
the \fIid\fP have to be unique
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIslave\fP a \fIslave\fP context object created by \fBMqLinkCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
after \fIMqSlaveCreate\fP the entire \fIslave\fP object blongs to \fIcontext\fP including the inital context. This mean no other external reference should be used for object cleanup. 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSlaveDelete (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP const  id)"
.PP
delete a \fImaster/slave\fP 
.PP
By default the \fIslave\fP context will be deleted if the \fImaster\fP context is deleted. In addition the \fIparent-slave-context\fP can be deleted explicit. It is an \fIerror\fP to delete a \fIchild-slave-context\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
it is still possible to delete a \fIchild-slave-context\fP using \fBMqLinkDelete\fP but this will break the internal master/slave order 
.RE
.PP

.SS "struct \fBMqS\fP* MqSlaveGet (struct \fBMqS\fP const *const  context, \fBMQ_SIZE\fP const  id)\fC [read]\fP"
.PP
get the slave context 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fIslave\fP context or \fCNULL\fP if \fIid\fP is not valid 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSlaveWorker (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP const  id, struct \fBMqBufferLS\fP ** argsP)"
.PP
create a \fImaster/slave\fP link using the same object as \fIcontext\fP 
.PP
\fIcontext\fP have to be a \fISERVER-PARENT\fP context without \fICHILD_CONTEXT\fP available
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIid\fP an integer used as unique identifier for the master/slave link 
.br
\fIargsP\fP command-line arguments passed to the \fIworker-client\fP or the \fIworker-server\fP. all arguments prior the first \fB@\fP token are added to the \fIworker-client\fP and the other arguments to the \fIworker-server\fP. the memory is freed after use. 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for tclmsgque from the source code.
