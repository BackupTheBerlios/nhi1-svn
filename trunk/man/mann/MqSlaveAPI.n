.TH "MqSlaveAPI" n "5 Jan 2010" "Version 4.1" "tclmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MqSlaveAPI \- create and manage a slave context  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMQ_SLAVE_MAX\fP   1024"
.br
.R "the maximum number of slave objects per master "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveWorker\fP (struct \fBMqS\fP *const ctx, \fBMQ_SIZE\fP const id, struct \fBMqBufferLS\fP **args)"
.br
.R "create a \fImaster/slave\fP link using the image of the \fIctx\fP object self. "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveCreate\fP (struct \fBMqS\fP *const ctx, \fBMQ_SIZE\fP const id, struct \fBMqS\fP *const slave)"
.br
.R "create a \fImaster/slave\fP link between the master-context object and the slave-context object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSlaveDelete\fP (struct \fBMqS\fP *const ctx, \fBMQ_SIZE\fP const id)"
.br
.R "Delete a \fIslave\fP object from a \fImaster/slave\fP link identified by \fIid\fP. "
.ti -1c
.RI "struct \fBMqS\fP * \fBMqSlaveGet\fP (struct \fBMqS\fP const *const ctx, \fBMQ_SIZE\fP const id)"
.br
.R "get the slave context "
.in -1c
.SH "Detailed Description"
.PP 
create and manage a slave context 

The master/slave link is used to create a mesh of nodes and to link different \fIPARENT\fP context objects together. \fBThe master control the slave.\fP
.PP
The \fIlink\fP is used to perform the following tasks:
.IP "\(bu" 2
report error messages from the \fIslave\fP to the \fImaster\fP 
.IP "\(bu" 2
to create a \fIslave-child-context\fP if a \fImaster-child-context\fP is created
.IP "\(bu" 2
to delete a \fIslave-context\fP if a \fImaster-context\fP is deleted
.PP
In difference to the \fIclient/server\fP link the \fImaster/slave\fP link connect two independent msgque-context in the same process or thread (e.g. node). This leads to the restriction that only the \fImaster-msgque-context\fP can be a \fIserver\fP because only \fIon\fP server per node is possible.
.PP
.PP
.nf

    node-0   |           node-1          |   node-2
===================================================================

| <- client/server link -> | <- client/server link -> |

             | <-- master/slave link --> |

                           |- client1-0 -|- server2-0 ...
                           |
             |- server1-0 -|             |- server2-1 ...
             |             |- client1-1 -|- server2-2 ...
  client0-0 -|                           |- server2-3
             |
             |- server1-1 -|- client1-2 -|- server2-4 ...
.fi
.PP
 
.SH "Define Documentation"
.PP 
.SS "#define MQ_SLAVE_MAX   1024"
.PP
the maximum number of slave objects per master 
.PP
\fBAttention:\fP
.RS 4
this number can be changed but \fBlibmsgque\fP have to be recompiled after 
.RE
.PP

.PP
Definition at line 3585 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "enum \fBMqErrorE\fP MqSlaveCreate (struct \fBMqS\fP *const  ctx, \fBMQ_SIZE\fP const  id, struct \fBMqS\fP *const  slave)"
.PP
create a \fImaster/slave\fP link between the master-context object and the slave-context object 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIslave\fP the \fIslave\fP context object as CLIENT-PARENT without a CHILD 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP
\fBAttention:\fP
.RS 4
The \fIslave-context\fP is owned by the \fImaster-context\fP. This mean that no other external references should be used and the \fIslave-context\fP will be deleted if the \fImaster-context\fP is be deleted. 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSlaveDelete (struct \fBMqS\fP *const  ctx, \fBMQ_SIZE\fP const  id)"
.PP
Delete a \fIslave\fP object from a \fImaster/slave\fP link identified by \fIid\fP. 
.PP
By default the \fIslave-context\fP object will be deleted if the \fImaster-context\fP is deleted. Use this function to delete the \fIparent-slave-context\fP explicit and brake the \fImaster/slave\fP link. If \fIid\fP is invalid nothing will happen. It is an \fIerror\fP to delete a \fIchild-slave-context\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP
\fBAttention:\fP
.RS 4
it is still possible to delete a \fIchild-slave-context\fP using \fBLinkDelete\fP but this will break the internal master/slave order. 
.RE
.PP

.SS "struct \fBMqS\fP* MqSlaveGet (struct \fBMqS\fP const *const  ctx, \fBMQ_SIZE\fP const  id)\fC [read]\fP"
.PP
get the slave context 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fIslave-context\fP or \fCNULL\fP if \fIid\fP is not valid or \fIctx\fP is not a \fImaster-context\fP. 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSlaveWorker (struct \fBMqS\fP *const  ctx, \fBMQ_SIZE\fP const  id, struct \fBMqBufferLS\fP ** args)"
.PP
create a \fImaster/slave\fP link using the image of the \fIctx\fP object self. 
.PP
The slave-context is started as an independent process or thread based on the \fBstartAs\fP argument. 
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP the \fImaster\fP context object as PARENT without a CHILD 
.br
\fIid\fP an \fIinteger\fP used as \fIunique\fP identifer for the master/slave link 
.br
\fIargs\fP command-line arguments passed to the \fIworker-client\fP or the \fIworker-server\fP. all arguments prior the first \fB@\fP token are added to the \fIworker-client\fP and the other arguments to the \fIworker-server\fP. 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBEXCEPTION OBJECT\fP on error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for tclmsgque from the source code.
