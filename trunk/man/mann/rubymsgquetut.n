.TH "rubymsgque Tutorial" n "7 Nov 2010" "Version 4.6" "rubymsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
rubymsgque Tutorial \- .SH "INDEX"
.PP
\fBINTRODUCTION\fP
.br
 \fBBUILD\fP
.br
 \fBSERVER\fP
.br
 \fBCLIENT\fP
.br
 \fBFILTER\fP
.br
.SH "INTRODUCTION"
.PP
\fBrubymsgque\fP is the RUBY language binding of the \fBlibmsgque\fP library.
.br
 The library was designed to simplify the client/server development using the following design rules:
.IP "1." 4
programming language independent
.IP "2." 4
operating system independent
.IP "3." 4
processor hardware independent
.PP
The RUBY language binding provide the following basic components:
.IP "\(bu" 2
abstract class of the \fBrubymsgque\fP object: \fBctx=MqS.new\fP
.IP "\(bu" 2
interface: \fBIServerSetup\fP and or \fBIServerCleanup\fP to add server functionality
.IP "\(bu" 2
interface: \fBIFactory\fP to create a new application instance
.IP "\(bu" 2
interface: \fBIBgError\fP to act on asyncrone errors
.IP "\(bu" 2
interface: \fBIEvent\fP to process background events
.IP "\(bu" 2
adding and removing \fBservices\fP
.PP
.SH "BUILD"
.PP
The build is different between \fIUNIX\fP and \fIWINDOWS\fP. On \fIUNIX\fP the \fBautomake\fP (info automake) build environment is used and on \fIWINDOWS\fP the \fBVisualExpress\fP tools from \fIMicrosoft\fP are used. The \fBautomake\fP build on \fIWINDOWS\fP is possible but not supported.
.SS "UNIX"
The example from the tutorial is using the \fBautomake\fP build-environment from the \fBrubymsgque\fP tool. An example \fBautomake\fP configuration file is available in: \fCexample/RUBY/Makefile.am\fP 
.PP
\fBno\fP build necessary
.SS "WINDOWS"
The \fBVisualExpress\fP build environment is located in the directory \fCwin\fP.
.SH "SERVER"
.PP
A \fBrubymsgque\fP server requires the following setup:
.IP "1." 4
file: \fCexample/RUBY/MyServer.rb\fP 
.IP "2." 4
an instance of the abstract class \fBctx=MqS.new\fP
.IP "3." 4
the interface \fBIServerSetup\fP and or \fBIServerCleanup\fP
.IP "4." 4
the interface \fBIFactory\fP to create a new application instance
.PP
The \fIminimal\fP server looks like:
.PP
 
.PP
.nf
require 'rubymsgque'
def HLWO
  SendSTART()
  SendC('Hello World')
  SendRETURN()
end
def ServerConfig
  ServiceCreate('HLWO',method(:HLWO))
end
srv = MqS.new
begin
  srv.ConfigSetServerSetup(srv.method(:ServerConfig))
  srv.ConfigSetFactory(lambda {MqS.new})
  srv.LinkCreate($0,ARGV)
  srv.ProcessEvent(MqS::WAIT_FOREVER)
rescue Exception => ex
  srv.ErrorSet(ex)
ensure
  srv.Exit()
end

.fi
.PP
.PP
The server is started as network visible \fITCP\fP server listen on \fIPORT\fP 2345 using a \fITHREAD\fP for every new connection request:
.PP
.PP
.nf

> ruby MyServer.rb --tcp --port 2345 --thread
.fi
.PP
.PP
If you are using \fIUNIX\fP and if you want to setup a high-performance local server then use the build-in \fIUDS\fP (Unix-Domain-Sockets) capability to listen on the \fIFILE\fP /path/to/any/file.uds instead on a network port:
.PP
.PP
.nf

> ruby MyServer.rb --uds --file /path/to/any/file.uds --thread
.fi
.PP
.PP
Three things are important:
.IP "1." 4
the \fBsend\fP style of functions
.IP "2." 4
the \fBctx.ServiceCreate(token,callback)\fP function
.IP "3." 4
a \fBconnected\fP context of type \fBctx=MqS.new\fP
.PP
Sending data is done using a minimum of 2 steps:
.IP "1." 4
First: start a data package with \fBctx.SendSTART()\fP
.IP "2." 4
Last: submit the a data package to the link target using one of:
.IP "  \(bu" 4
\fBctx.SendEND(token)\fP
.IP "  \(bu" 4
\fBctx.SendEND_AND_WAIT(token,?timeout=MQ_TIMEOUT_USER?)\fP
.IP "  \(bu" 4
\fBctx.SendEND_AND_CALLBACK(token,callback)\fP
.IP "  \(bu" 4
\fBctx.SendRETURN()\fP
.PP

.PP
The first three \fBSendEND\fP... functions are used to \fBcall\fP a remote service and the last one is used to answer an incoming service call. In-between ctx.SendSTART() and ctx.SendEND(token) ... other \fBSEND API\fP style commands are available to fill the data package with data.
.PP
Services are created with the \fBctx.ServiceCreate(token,callback)\fP function. The first parameter is a \fB4\fP byte Token as public name. 4 byte is required because this string is mapped to a 4 byte integer for speed reason. The second parameter is an object providing the \fBSERVICE CALLBACK\fP interface.
.PP
The \fBSERVICE CALLBACK\fP is called for every incoming \fIservice-request\fP which belongs to token.
.SH "CLIENT"
.PP
A \fBrubymsgque\fP client requires the following setup:
.IP "1." 4
an instance of the abstract class \fBctx=MqS.new\fP
.PP
The \fIminimal\fP client looks like:
.PP
 
.PP
.nf
require 'rubymsgque'
ctx = MqS.new
begin
  ctx.ConfigSetName('MyClient')
  ctx.LinkCreate($0,ARGV)
  ctx.SendSTART()
  ctx.SendEND_AND_WAIT('HLWO')
  $stdout.puts ctx.ReadC()
  $stdout.flush
rescue Exception => ex
  ctx.ErrorSet(ex)
ensure
  ctx.Exit()
end

.fi
.PP
.PP
To call a network visible \fITCP\fP server listen on \fIPORT\fP 2345 use:
.PP
.PP
.nf

> ruby MyClient.rb --tcp --port 2345
> Hello World
.fi
.PP
.PP
To call a network visible \fIUDP\fP server listen on \fIFILE\fP /path/to/any/file.uds use:
.PP
.PP
.nf

> ruby MyClient.rb --uds --file /path/to/any/file.uds
> Hello World
.fi
.PP
.PP
To call a \fIlocal\fP server started by the client using \fIPIPE\fP communication use:
.PP
.PP
.nf

> ruby MyClient.rb @ ruby MyServer.rb
> Hello World
.fi
.PP
.SH "FILTER"
.PP
The \fBFILTER MODE\fP is used to define a command pipeline. A \fIminimal\fP filter looks like:
.PP
 
.PP
.nf
require 'rubymsgque'
class ManFilter < MqS
  def initialize
    ConfigSetName('filter')
    ConfigSetFactory(lambda {ManFilter.new})
    ConfigSetServerSetup(method(:ServerSetup))
    super()
  end
  def ServerSetup
    ServiceCreate('+FTR', method(:FTRcmd))
    ServiceProxy('+EOF')
  end
  def FTRcmd
    ftr = ServiceGetFilter()
    ftr.SendSTART()
    while ReadItemExists()
      ftr.SendC('<' + ReadC() + '>')
    end
    ftr.SendEND_AND_WAIT('+FTR')
    SendRETURN()
  end
end
srv = ManFilter.new
begin
  srv.LinkCreate($0,ARGV)
  srv.ProcessEvent(MqS::WAIT_FOREVER)
rescue SignalException => ex
  # ignore
rescue Exception => ex
  srv.ErrorSet(ex)
ensure
  srv.Exit()
end

.fi
.PP
 Use \fImanfilter.rb\fP in a LibMsgque command pipeline: 
.PP
.nf

> echo -e "1:2:3\na:b:c" | atool split -d : @ ruby manfilter.rb @ atool join -d :

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for rubymsgque from the source code.
