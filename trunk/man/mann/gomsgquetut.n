.TH "gomsgque Tutorial" n "29 Nov 2010" "Version 4.7" "gomsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gomsgque Tutorial \- .SH "INDEX"
.PP
\fBINTRODUCTION\fP
.br
 \fBBUILD\fP
.br
 \fBSERVER\fP
.br
 \fBCLIENT\fP
.br
 \fBFILTER\fP
.br
.SH "INTRODUCTION"
.PP
\fBgomsgque\fP is the Go language binding of the \fBlibmsgque\fP library.
.br
 The library was designed to simplify the client/server development using the following design rules:
.IP "1." 4
programming language independent
.IP "2." 4
operating system independent
.IP "3." 4
processor hardware independent
.PP
The Go language binding provide the following basic components:
.IP "\(bu" 2
abstract class of the \fBgomsgque\fP object: \fBctx := NewMqS(top interface{})\fP
.IP "\(bu" 2
interface: \fBIServerSetup\fP and or \fBIServerCleanup\fP to add server functionality
.IP "\(bu" 2
interface: \fBIFactory\fP to create a new application instance
.IP "\(bu" 2
interface: \fBIBgError\fP to act on asyncrone errors
.IP "\(bu" 2
interface: \fBIEvent\fP to process background events
.IP "\(bu" 2
adding and removing \fBservices\fP
.PP
.SH "BUILD"
.PP
The build is different between \fIUNIX\fP and \fIWINDOWS\fP. On \fIUNIX\fP the \fBautomake\fP (info automake) build environment is used and on \fIWINDOWS\fP the \fBVisualExpress\fP tools from \fIMicrosoft\fP are used. The \fBautomake\fP build on \fIWINDOWS\fP is possible but not supported.
.SS "UNIX"
The example from the tutorial is using the \fBautomake\fP build-environment from the \fBgomsgque\fP tool. An example \fBautomake\fP configuration file is available in: \fCexample/Go/Makefile.am\fP 
.SS "WINDOWS"
The \fBVisualExpress\fP build environment is located in the directory \fCwin\fP.
.SH "SERVER"
.PP
A \fBgomsgque\fP server requires the following setup:
.IP "1." 4
file: \fCexample/Go/MyServer.go\fP 
.IP "2." 4
an instance of the abstract class \fBctx := NewMqS(top interface{})\fP
.IP "3." 4
the interface \fBIServerSetup\fP and or \fBIServerCleanup\fP
.IP "4." 4
the interface \fBIFactory\fP to create a new application instance
.PP
The \fIminimal\fP server looks like:
.PP
.PP
.nf

package main

import (
  . 'gomsgque'
    'os'
)

type MyServer struct {
  *MqS
  // add server specific data 
}

func NewMyServer() *MyServer {
  ret := new(MyServer)
  ret.MqS = NewMqS(ret)
  return ret
}

func (this *MyServer) Factory() *MqS {
  return NewMyServer().MqS
}

func (this *MyServer) ServerSetup() {
  this.ServiceCreate('HLWO', (*MyFirstService)(this))
}

type MyFirstService MyServer
  func (this *MyFirstService) Call() {
    this.SendSTART()
    this.SendC('Hello World')
    this.SendRETURN()
  }

func main() {
  var srv = NewMyServer()
  defer func() {
    if x := recover(); x != nil {
      srv.ErrorSet(x)
    }
    srv.Exit()
  }()
  srv.LinkCreate(os.Args...)
  srv.ProcessEvent(WAIT_FOREVER)
}

.fi
.PP
.PP
The server is started as network visible \fITCP\fP server listen on \fIPORT\fP 2345 using a \fITHREAD\fP for every new connection request:
.PP
.PP
.nf

> MyServer --tcp --port 2345 --thread
.fi
.PP
.PP
If you are using \fIUNIX\fP and if you want to setup a high-performance local server then use the build-in \fIUDS\fP (Unix-Domain-Sockets) capability to listen on the \fIFILE\fP /path/to/any/file.uds instead on a network port:
.PP
.PP
.nf

> MyServer --uds --file /path/to/any/file.uds --thread
.fi
.PP
.PP
Three things are important:
.IP "1." 4
the \fBsend\fP style of functions
.IP "2." 4
the \fBctx.ServiceCreate(token string, callback Service)\fP function
.IP "3." 4
a \fBconnected\fP context of type \fBctx := NewMqS(top interface{})\fP
.PP
Sending data is done using a minimum of 2 steps:
.IP "1." 4
First: start a data package with \fBctx.SendSTART()\fP
.IP "2." 4
Last: submit the a data package to the link target using one of:
.IP "  \(bu" 4
\fBctx.SendEND(token string)\fP
.IP "  \(bu" 4
\fBctx.SendEND_AND_WAIT(token string)\fP
.IP "  \(bu" 4
\fBctx.SendEND_AND_CALLBACK(token string, callback Service)\fP
.IP "  \(bu" 4
\fBctx.SendRETURN()\fP
.PP

.PP
The first three \fBSendEND\fP... functions are used to \fBcall\fP a remote service and the last one is used to answer an incoming service call. In-between ctx.SendSTART() and ctx.SendEND(token string) ... other \fBSEND API\fP style commands are available to fill the data package with data.
.PP
Services are created with the \fBctx.ServiceCreate(token string, callback Service)\fP function. The first parameter is a \fB4\fP byte Token as public name. 4 byte is required because this string is mapped to a 4 byte integer for speed reason. The second parameter is an object providing the \fBSERVICE CALLBACK\fP interface.
.PP
The \fBSERVICE CALLBACK\fP is called for every incoming \fIservice-request\fP which belongs to token.
.SH "CLIENT"
.PP
A \fBgomsgque\fP client requires the following setup:
.IP "1." 4
an instance of the abstract class \fBctx := NewMqS(top interface{})\fP
.PP
The \fIminimal\fP client looks like:
.PP
.PP
.nf

package main

import (
  . 'gomsgque'
  'os'
)

func main() {
  var ctx = NewMqS(nil)
  defer func() {
    if x := recover(); x != nil {
      ctx.ErrorSet(x)
    }
    ctx.Exit()
  }()
  ctx.LinkCreate(os.Args...)
  ctx.SendSTART()
  ctx.SendI(100)
  ctx.SendEND_AND_WAIT('HLWO', 5)
  println(ctx.ReadC())
}

.fi
.PP
.PP
To call a network visible \fITCP\fP server listen on \fIPORT\fP 2345 use:
.PP
.PP
.nf

> MyClient --tcp --port 2345
> Hello World
.fi
.PP
.PP
To call a network visible \fIUDP\fP server listen on \fIFILE\fP /path/to/any/file.uds use:
.PP
.PP
.nf

> MyClient --uds --file /path/to/any/file.uds
> Hello World
.fi
.PP
.PP
To call a \fIlocal\fP server started by the client using \fIPIPE\fP communication use:
.PP
.PP
.nf

> MyClient @ MyServer
> Hello World
.fi
.PP
.SH "FILTER"
.PP
The \fBFILTER MODE\fP is used to define a command pipeline. A \fIminimal\fP filter looks like: 
.SH "Author"
.PP 
Generated automatically by Doxygen for gomsgque from the source code.
