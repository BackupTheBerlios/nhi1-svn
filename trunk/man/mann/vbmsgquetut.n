.TH "vbmsgque Tutorial" n "7 Nov 2010" "Version 4.6" "vbmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vbmsgque Tutorial \- .SH "INDEX"
.PP
\fBINTRODUCTION\fP
.br
 \fBBUILD\fP
.br
 \fBSERVER\fP
.br
 \fBCLIENT\fP
.br
 \fBFILTER\fP
.br
.SH "INTRODUCTION"
.PP
\fBvbmsgque\fP is the VB.NET language binding of the \fBlibmsgque\fP library.
.br
 The library was designed to simplify the client/server development using the following design rules:
.IP "1." 4
programming language independent
.IP "2." 4
operating system independent
.IP "3." 4
processor hardware independent
.PP
The VB.NET language binding provide the following basic components:
.IP "\(bu" 2
abstract class of the \fBvbmsgque\fP object: \fBDim ctx As New MqS()\fP
.IP "\(bu" 2
interface: \fBIServerSetup\fP and or \fBIServerCleanup\fP to add server functionality
.IP "\(bu" 2
interface: \fBIFactory\fP to create a new application instance
.IP "\(bu" 2
interface: \fBIBgError\fP to act on asyncrone errors
.IP "\(bu" 2
interface: \fBIEvent\fP to process background events
.IP "\(bu" 2
adding and removing \fBservices\fP
.PP
.SH "BUILD"
.PP
The build is different between \fIUNIX\fP and \fIWINDOWS\fP. On \fIUNIX\fP the \fBautomake\fP (info automake) build environment is used and on \fIWINDOWS\fP the \fBVisualExpress\fP tools from \fIMicrosoft\fP are used. The \fBautomake\fP build on \fIWINDOWS\fP is possible but not supported.
.SS "UNIX"
The example from the tutorial is using the \fBautomake\fP build-environment from the \fBvbmsgque\fP tool. An example \fBautomake\fP configuration file is available in: \fCexample/VB.NET/Makefile\fP.am 
.PP
\fBno\fP UNIX build possible, mono tool \fBvbnc\fP is still in development
.SS "WINDOWS"
The \fBVisualExpress\fP build environment is located in the directory \fCwin\fP.
.SH "SERVER"
.PP
A \fBvbmsgque\fP server requires the following setup:
.IP "1." 4
file: \fCexample/VB.NET/MyServer\fP.vb
.IP "2." 4
an instance of the abstract class \fBDim ctx As New MqS()\fP
.IP "3." 4
the interface \fBIServerSetup\fP and or \fBIServerCleanup\fP
.IP "4." 4
the interface \fBIFactory\fP to create a new application instance
.PP
The \fIminimal\fP server looks like:
.PP
 
.PP
.nf
Imports System
Imports csmsgque

Public Module example
  Private Class MyServer
    Inherits MqS
    Implements IServerSetup
    Implements IFactory

    ' service definition
    Public Function Factory() As csmsgque.MqS Implements csmsgque.IFactory.Factory
      Return New MyServer()
    End Function

    ' service to serve all incomming requests for token 'HLWO'
    Private Sub MyFirstService()
      SendSTART()
      SendC('Hello World')
      SendRETURN()
    End Sub

    ' define a service as link between the token 'HLWO' and the callback 'MyFirstService'
    Public Sub ServerSetup() Implements csmsgque.IServerSetup.ServerSetup
      ServiceCreate('HLWO', AddressOf MyFirstService)
    End Sub
  End Class

  Sub Main(ByVal args() As String)
    Dim srv As New MyServer()
    Try
      srv.ConfigSetName('MyServer')
      srv.LinkCreate(args)
      srv.ProcessEvent(MqS.WAIT.FOREVER)
    Catch ex As Exception
      srv.ErrorSet(ex)
    Finally
      srv.Exit()
    End Try
  End Sub
End Module

.fi
.PP
.PP
The server is started as network visible \fITCP\fP server listen on \fIPORT\fP 2345 using a \fITHREAD\fP for every new connection request:
.PP
.PP
.nf

> mono MyServer.exe --tcp --port 2345 --thread
.fi
.PP
.PP
If you are using \fIUNIX\fP and if you want to setup a high-performance local server then use the build-in \fIUDS\fP (Unix-Domain-Sockets) capability to listen on the \fIFILE\fP /path/to/any/file.uds instead on a network port:
.PP
.PP
.nf

> MyServer --uds --file /path/to/any/file.uds --thread
.fi
.PP
.PP
Three things are important:
.IP "1." 4
the \fBsend\fP style of functions
.IP "2." 4
the \fBctx.ServiceCreate(token As String, AddressOf callback)\fP function
.IP "3." 4
a \fBconnected\fP context of type \fBDim ctx As New MqS()\fP
.PP
Sending data is done using a minimum of 2 steps:
.IP "1." 4
First: start a data package with \fBctx.SendSTART()\fP
.IP "2." 4
Last: submit the a data package to the link target using one of:
.IP "  \(bu" 4
\fBctx.SendEND(token As String)\fP
.IP "  \(bu" 4
\fBctx.SendEND_AND_WAIT(token As String, [timeout As Integer])\fP
.IP "  \(bu" 4
\fBctx.SendEND_AND_CALLBACK(token As String, AddressOf callback)\fP
.IP "  \(bu" 4
\fBctx.SendRETURN()\fP
.PP

.PP
The first three \fBSendEND\fP... functions are used to \fBcall\fP a remote service and the last one is used to answer an incoming service call. In-between ctx.SendSTART() and ctx.SendEND(token As String) ... other \fBSEND API\fP style commands are available to fill the data package with data.
.PP
Services are created with the \fBctx.ServiceCreate(token As String, AddressOf callback)\fP function. The first parameter is a \fB4\fP byte Token as public name. 4 byte is required because this string is mapped to a 4 byte integer for speed reason. The second parameter is an object providing the \fBSERVICE CALLBACK\fP interface.
.PP
The \fBSERVICE CALLBACK\fP is called for every incoming \fIservice-request\fP which belongs to token.
.SH "CLIENT"
.PP
A \fBvbmsgque\fP client requires the following setup:
.IP "1." 4
an instance of the abstract class \fBDim ctx As New MqS()\fP
.PP
The \fIminimal\fP client looks like:
.PP
 
.PP
.nf
Imports System
Imports csmsgque

Public Module example
    Sub Main(ByVal args() As String)
        Dim c As New MqS()
        Try
            c.LinkCreate(args)
            c.SendSTART()
            c.sendEND_AND_WAIT('HLWO', 5)
            Console.WriteLine(c.ReadC())
        Catch ex As Exception
            c.ErrorSet(ex)
        Finally
            c.Exit()
        End Try
    End Sub
End Module

.fi
.PP
.PP
To call a network visible \fITCP\fP server listen on \fIPORT\fP 2345 use:
.PP
.PP
.nf

> mono MyClient.exe --tcp --port 2345
> Hello World
.fi
.PP
.PP
To call a network visible \fIUDP\fP server listen on \fIFILE\fP /path/to/any/file.uds use:
.PP
.PP
.nf

> mono MyClient.exe --uds --file /path/to/any/file.uds
> Hello World
.fi
.PP
.PP
To call a \fIlocal\fP server started by the client using \fIPIPE\fP communication use:
.PP
.PP
.nf

> mono MyClient.exe @ mono MyServer.exe
> Hello World
.fi
.PP
.SH "FILTER"
.PP
The \fBFILTER MODE\fP is used to define a command pipeline. A \fIminimal\fP filter looks like:
.PP
 
.PP
.nf
Imports System
Imports csmsgque
Imports System.Collections.Generic

Public Module example
  Private Class manfilter
    Inherits MqS
    Implements IFactory

    Public Sub FilterFTR()
      Dim ftr As MqS = ServiceGetFilter()
      ftr.SendSTART()
      While ReadItemExists()
        ftr.SendC('<' + ReadC() + '>')
      End While
      ftr.SendEND_AND_WAIT('+FTR')
      SendRETURN()
    End Sub

    Public Function [Call]() As csmsgque.MqS Implements IFactory.Factory
      Return New manfilter()
    End Function
  End Class

  Sub Main(ByVal args() As String)
    Dim srv As New manfilter()
    Try
      srv.ConfigSetName('ManFilter')
      srv.ConfigSetIsServer(True)
      srv.LinkCreate(args)
      srv.ServiceCreate('+FTR', AddressOf srv.FilterFTR)
      srv.ServiceProxy('+EOF')
      srv.ProcessEvent(MqS.WAIT.FOREVER)
    Catch ex As Exception
      srv.ErrorSet(ex)
    Finally
      srv.Exit()
    End Try
  End Sub
End Module

.fi
.PP
 Use \fImanfilter.exe\fP in a LibMsgque command pipeline: 
.PP
.nf

> echo -e "1:2:3\na:b:c" | atool split -d : @ mono manfilter.exe @ atool join -d :

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for vbmsgque from the source code.
