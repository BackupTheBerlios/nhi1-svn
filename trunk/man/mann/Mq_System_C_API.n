.TH "Mq_System_C_API" n "9 Jan 2011" "Version 4.8" "msgqueforphp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_System_C_API \- L)anguage A)bstraction L)ayer definition.  

.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMqIdS\fP"
.br
.R "data type for process/thread identification "
.ti -1c
.RI "struct \fBMqSysServerThreadMainS\fP"
.br
.R "data used to initialize a new created thread "
.ti -1c
.RI "struct \fBMqLalS\fP"
.br
.R "Interface between \fBMqS\fP and the Operating-System. "
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBmq_strtoll\fP   strtoll"
.br
.ti -1c
.RI "#define \fBmq_strdup\fP   strdup"
.br
.ti -1c
.RI "#define \fBmq_getpid\fP   getpid"
.br
.ti -1c
.RI "#define \fBmq_unlink\fP   unlink"
.br
.ti -1c
.RI "#define \fBmq_snprintf\fP   snprintf"
.br
.ti -1c
.RI "#define \fBMQ_CLRCALL\fP"
.br
.ti -1c
.RI "#define \fBMQ_STDCALL\fP"
.br
.ti -1c
.RI "#define \fBMQ_CDECL\fP"
.br
.ti -1c
.RI "#define \fBmq_inline\fP   inline"
.br
.ti -1c
.RI "#define \fBmq_timeval\fP   timeval"
.br
.ti -1c
.RI "#define \fBmq_timezone\fP   timezone"
.br
.ti -1c
.RI "#define \fBMqSysFree\fP(tgt)"
.br
.R "\fBfree\fP syscall "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned long \fBMQ_IDNT\fP"
.br
.R "process or thread identifier "
.ti -1c
.RI "typedef \fBMQ_PTR\fP(* \fBMqSysCallocF\fP )(\fBMQ_SIZE\fP, \fBMQ_SIZE\fP)"
.br
.R "\fBcalloc\fP syscall "
.ti -1c
.RI "typedef \fBMQ_PTR\fP(* \fBMqSysMallocF\fP )(\fBMQ_SIZE\fP)"
.br
.R "\fBmalloc\fP syscall "
.ti -1c
.RI "typedef \fBMQ_STR\fP(* \fBMqSysStrDupF\fP )(\fBMQ_CST\fP)"
.br
.R "\fBstrdup\fP syscall "
.ti -1c
.RI "typedef \fBMQ_PTR\fP(* \fBMqSysReallocF\fP )(\fBMQ_PTR\fP, \fBMQ_SIZE\fP)"
.br
.R "\fBrealloc\fP syscall "
.ti -1c
.RI "typedef void(* \fBMqSysFreeF\fP )(\fBMQ_PTR\fP)"
.br
.R "\fBfree\fP syscall "
.ti -1c
.RI "typedef int(* \fBMqSysSelectF\fP )(int, void *, void *, void *, struct timeval *)"
.br
.R "\fBselect\fP syscall "
.ti -1c
.RI "typedef \fBMQ_IDNT\fP(* \fBMqSysForkF\fP )(void)"
.br
.R "\fBfork\fP syscall "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMqIdSE\fP { \fBMQ_ID_UNUSED\fP =  0, \fBMQ_ID_PROCESS\fP =  1, \fBMQ_ID_THREAD\fP =  2 }"
.br
.R "signal type of the \fI\fBMqIdS\fP\fP data \fIval\fP "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMqSysServerThreadMain\fP (struct \fBMqSysServerThreadMainS\fP *data)"
.br
.R "initialize a new created thread "
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqSysCalloc\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP nmemb, \fBMQ_SIZE\fP size)"
.br
.R "\fBcalloc\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqSysMalloc\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP size)"
.br
.R "\fBmalloc\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "\fBMQ_STR\fP \fBMqSysStrDup\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP str)"
.br
.R "\fBstrdup\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqSysRealloc\fP (struct \fBMqS\fP *const context, \fBMQ_PTR\fP buf, \fBMQ_SIZE\fP size)"
.br
.R "\fBrealloc\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "void \fBMqSysFreeP\fP (\fBMQ_PTR\fP data)"
.br
.R "\fBfree\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "static enum \fBMqErrorE\fP \fBMqSysWait\fP (struct \fBMqS\fP *const context, const struct \fBMqIdS\fP *idP)"
.br
.R "\fBwait for process or thread\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "static enum \fBMqErrorE\fP \fBMqSysUSleep\fP (struct \fBMqS\fP *const context, unsigned int const usec)"
.br
.R "\fBusleep\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "static enum \fBMqErrorE\fP \fBMqSysSleep\fP (struct \fBMqS\fP *const context, unsigned int const sec)"
.br
.R "\fBsleep\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "static void \fBMqSysExit\fP (int isThread, int num)"
.br
.R "\fBexit\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "\fBMQ_STR\fP \fBMqSysBasename\fP (\fBMQ_CST\fP const in, \fBMQ_BOL\fP includeExtension)"
.br
.R "\fBbasename\fP syscall with \fBMqS\fP error plugin "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSysGetTimeOfDay\fP (struct \fBMqS\fP *const context, struct mq_timeval *tv, struct mq_timezone *tz)"
.br
.R "\fBgettimeofday\fP syscall with \fBMqS\fP error plugin "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "struct \fBMqLalS\fP \fBMqLal\fP"
.br
.R "Language Abstraction Layer in duty. "
.in -1c
.SH "Detailed Description"
.PP 
L)anguage A)bstraction L)ayer definition. 

The \fBLAL\fP is required to give the target of embedding a change to modify the access to system functions. \fIRUBY\fP for example has it's own Thread-Creation function.
.PP
All wrappers to access the underlying OS,Languages and system functions are located in this section. Every external Function has additional code to map the OS/System specific error codes/messages into \fBMqS\fP specific error codes/messages 
.SH "Define Documentation"
.PP 
.SS "#define MQ_CDECL"
.PP
Definition at line 90 of file msgque.h.
.SS "#define MQ_CLRCALL"
.PP
Definition at line 86 of file msgque.h.
.SS "#define mq_getpid   getpid"
.PP
Definition at line 80 of file msgque.h.
.SS "#define mq_inline   inline"
.PP
Definition at line 92 of file msgque.h.
.SS "#define mq_snprintf   snprintf"
.PP
Definition at line 84 of file msgque.h.
.SS "#define MQ_STDCALL"
.PP
Definition at line 88 of file msgque.h.
.SS "#define mq_strdup   strdup"
.PP
Definition at line 78 of file msgque.h.
.SS "#define mq_strtoll   strtoll"
.PP
Definition at line 76 of file msgque.h.
.SS "#define mq_timeval   timeval"
.PP
Definition at line 158 of file msgque.h.
.SS "#define mq_timezone   timezone"
.PP
Definition at line 160 of file msgque.h.
.SS "#define mq_unlink   unlink"
.PP
Definition at line 82 of file msgque.h.
.SS "#define MqSysFree(tgt)"
.PP
\fBValue:\fP
.PP
.nf
do { \
        if ( likely((tgt) != (NULL)) ) { \
            (*MqLal.SysFree)((MQ_PTR)tgt); \
            (tgt) = (NULL); \
        } \
    } while (0)
.fi
\fBfree\fP syscall 
.PP
additional info: \fCman free\fP 
.PP
\fBParameters:\fP
.RS 4
\fItgt\fP the memory block to delete and set to NULL 
.RE
.PP

.PP
Definition at line 4543 of file msgque.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned long \fBMQ_IDNT\fP"
.PP
process or thread identifier 
.PP
Definition at line 4258 of file msgque.h.
.SS "typedef \fBMQ_PTR\fP(* \fBMqSysCallocF\fP)(\fBMQ_SIZE\fP, \fBMQ_SIZE\fP)"
.PP
\fBcalloc\fP syscall 
.PP
additional info: \fCman calloc\fP 
.PP
Definition at line 4262 of file msgque.h.
.SS "typedef \fBMQ_IDNT\fP(* \fBMqSysForkF\fP)(void)"
.PP
\fBfork\fP syscall 
.PP
additional info: \fCman fork\fP 
.PP
\fBReturn values:\fP
.RS 4
\fIthe\fP process identifier of the new child (in the parent process) or 0 (in the child process) 
.RE
.PP

.PP
Definition at line 4292 of file msgque.h.
.SS "typedef void(* \fBMqSysFreeF\fP)(\fBMQ_PTR\fP)"
.PP
\fBfree\fP syscall 
.PP
additional info: \fCman free\fP 
.PP
Definition at line 4278 of file msgque.h.
.SS "typedef \fBMQ_PTR\fP(* \fBMqSysMallocF\fP)(\fBMQ_SIZE\fP)"
.PP
\fBmalloc\fP syscall 
.PP
additional info: \fCman malloc\fP 
.PP
Definition at line 4266 of file msgque.h.
.SS "typedef \fBMQ_PTR\fP(* \fBMqSysReallocF\fP)(\fBMQ_PTR\fP, \fBMQ_SIZE\fP)"
.PP
\fBrealloc\fP syscall 
.PP
additional info: \fCman realloc\fP 
.PP
Definition at line 4274 of file msgque.h.
.SS "typedef int(* \fBMqSysSelectF\fP)(int, void *, void *, void *, struct timeval *)"
.PP
\fBselect\fP syscall 
.PP
read more at: \fCman 2 select\fP 
.PP
\fBParameters:\fP
.RS 4
\fImax\fP the maximum file descriptor + 1 from the \fIread\fP, \fIwrite\fP or \fIexcept\fP input data 
.br
\fIread\fP set of file descriptors 
.br
\fIwrite\fP set of file descriptors 
.br
\fIexcept\fP set of file descriptors 
.br
\fItimeout\fP maximum time to wait for data 
.RE
.PP

.PP
Definition at line 4287 of file msgque.h.
.SS "typedef \fBMQ_STR\fP(* \fBMqSysStrDupF\fP)(\fBMQ_CST\fP)"
.PP
\fBstrdup\fP syscall 
.PP
additional info: \fCman strdup\fP 
.PP
Definition at line 4270 of file msgque.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMqIdSE\fP"
.PP
signal type of the \fI\fBMqIdS\fP\fP data \fIval\fP 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_ID_UNUSED \fP\fP
empty struct 
.TP
\fB\fIMQ_ID_PROCESS \fP\fP
\fIval\fP has a process handle 
.TP
\fB\fIMQ_ID_THREAD \fP\fP
\fIval\fP has a thread handle 
.PP
Definition at line 4295 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "\fBMQ_STR\fP MqSysBasename (\fBMQ_CST\fP const  in, \fBMQ_BOL\fP includeExtension)"
.PP
\fBbasename\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman basename\fP 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP name of the string to extract the basename from (value of \fIin\fP will not be changed) 
.br
\fIincludeExtension\fP add extension like '.exe' to the filename (\fBMQ_YES\fP or \fBMQ_NO\fP) 
.RE
.PP
\fBReturns:\fP
.RS 4
the basename of \fIin\fP (it is save to modify the basename for additional needs) 
.RE
.PP
\fBAttention:\fP
.RS 4
the memory of the basename string returned is owned by the caller and have to be freed 
.RE
.PP

.SS "\fBMQ_PTR\fP MqSysCalloc (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP nmemb, \fBMQ_SIZE\fP size)"
.PP
\fBcalloc\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman calloc\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fInmemb\fP the number of members in the memory block 
.br
\fIsize\fP the size of the new memory block 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block initialized with '0' 
.RE
.PP

.SS "static void MqSysExit (int isThread, int num)\fC [inline, static]\fP"
.PP
\fBexit\fP syscall with \fBMqS\fP error plugin 
.PP
\fBParameters:\fP
.RS 4
\fIisThread\fP exit a thread? 
.br
\fInum\fP exit code 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.PP
Definition at line 4599 of file msgque.h.
.SS "void MqSysFreeP (\fBMQ_PTR\fP data)"
.PP
\fBfree\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman free\fP Free memory of \fIdata\fP if \fIdata\fP is \fBnot\fP \fCNULL\fP. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP block to be freed 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSysGetTimeOfDay (struct \fBMqS\fP *const  context, struct mq_timeval * tv, struct mq_timezone * tz)"
.PP
\fBgettimeofday\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman gettimeofday\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fItv\fP the timeval object 
.br
\fItz\fP the timezone object 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "\fBMQ_PTR\fP MqSysMalloc (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP size)"
.PP
\fBmalloc\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman malloc\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIsize\fP the size of the new memory block 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block 
.RE
.PP

.SS "\fBMQ_PTR\fP MqSysRealloc (struct \fBMqS\fP *const  context, \fBMQ_PTR\fP buf, \fBMQ_SIZE\fP size)"
.PP
\fBrealloc\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman realloc\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIbuf\fP the \fBold\fP memory block to extend 
.br
\fIsize\fP the size of the new memory block 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block 
.RE
.PP

.SS "void MqSysServerThreadMain (struct \fBMqSysServerThreadMainS\fP * data)"
.PP
initialize a new created thread 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP configuration data for the new thread 
.RE
.PP

.SS "static enum \fBMqErrorE\fP MqSysSleep (struct \fBMqS\fP *const  context, unsigned int const  sec)\fC [inline, static]\fP"
.PP
\fBsleep\fP syscall with \fBMqS\fP error plugin 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIsec\fP the seconds to sleep 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.PP
Definition at line 4587 of file msgque.h.
.SS "\fBMQ_STR\fP MqSysStrDup (struct \fBMqS\fP *const  context, \fBMQ_CST\fP str)"
.PP
\fBstrdup\fP syscall with \fBMqS\fP error plugin 
.PP
additional info: \fCman strdup\fP 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIstr\fP the string to duplicate 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block 
.RE
.PP

.SS "static enum \fBMqErrorE\fP MqSysUSleep (struct \fBMqS\fP *const  context, unsigned int const  usec)\fC [inline, static]\fP"
.PP
\fBusleep\fP syscall with \fBMqS\fP error plugin 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIusec\fP the micro (10^-6) seconds to sleep 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.PP
Definition at line 4575 of file msgque.h.
.SS "static enum \fBMqErrorE\fP MqSysWait (struct \fBMqS\fP *const  context, const struct \fBMqIdS\fP * idP)\fC [inline, static]\fP"
.PP
\fBwait for process or thread\fP syscall with \fBMqS\fP error plugin 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIidP\fP process or thread handle 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.PP
Definition at line 4563 of file msgque.h.
.SH "Variable Documentation"
.PP 
.SS "struct \fBMqLalS\fP \fBMqLal\fP"
.PP
Language Abstraction Layer in duty. 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for msgqueforphp from the source code.
