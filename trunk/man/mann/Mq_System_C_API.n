.TH "Mq_System_C_API" n "8 Mar 2010" "Version 4.5" "vbmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_System_C_API \- access to native system functions with error handling  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBmq_strtoll\fP   strtoll"
.br
.ti -1c
.RI "#define \fBmq_strdup\fP(v)   strdup(v)"
.br
.ti -1c
.RI "#define \fBmq_getpid\fP   getpid"
.br
.ti -1c
.RI "#define \fBmq_unlink\fP   unlink"
.br
.ti -1c
.RI "#define \fBmq_snprintf\fP   snprintf"
.br
.ti -1c
.RI "#define \fBMQ_CLRCALL\fP"
.br
.ti -1c
.RI "#define \fBMQ_STDCALL\fP"
.br
.ti -1c
.RI "#define \fBMQ_CDECL\fP"
.br
.ti -1c
.RI "#define \fBmq_inline\fP   inline"
.br
.ti -1c
.RI "#define \fBmq_timeval\fP   timeval"
.br
.ti -1c
.RI "#define \fBmq_timezone\fP   timezone"
.br
.ti -1c
.RI "#define \fBMqSysFree\fP(tgt)"
.br
.R "'free' system call macro "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqSysCalloc\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP nmemb, \fBMQ_SIZE\fP size)"
.br
.R "'calloc' system call with error handling feature "
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqSysMalloc\fP (struct \fBMqS\fP *const context, \fBMQ_SIZE\fP size)"
.br
.R "'malloc' system call with error handling feature "
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqSysRealloc\fP (struct \fBMqS\fP *const context, \fBMQ_PTR\fP buf, \fBMQ_SIZE\fP size)"
.br
.R "'realloc' system call with error handling feature "
.ti -1c
.RI "void \fBMqSysFreeP\fP (\fBMQ_PTR\fP ptr)"
.br
.R "'free' system call wrapper of libmsgque "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSysUSleep\fP (struct \fBMqS\fP *const context, unsigned int const usec)"
.br
.R "'usleep' system call with error handling feature "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSysSleep\fP (struct \fBMqS\fP *const context, unsigned int const sec)"
.br
.R "'sleep' system call with error handling feature "
.ti -1c
.RI "\fBMQ_STR\fP \fBMqSysBasename\fP (\fBMQ_CST\fP const in, \fBMQ_BOL\fP includeExtension)"
.br
.R "'basename' system call with error handling feature "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqSysGetTimeOfDay\fP (struct \fBMqS\fP *const context, struct mq_timeval *tv, struct mq_timezone *tz)"
.br
.R "'gettimeofday' system call with error handling feature "
.ti -1c
.RI "static \fBMQ_STR\fP \fBmq_strdup_save\fP (\fBMQ_CST\fP v)"
.br
.R "duplicate a string, the argument \fCNULL\fP is allowed "
.in -1c
.SH "Detailed Description"
.PP 
access to native system functions with error handling 
.SH "Define Documentation"
.PP 
.SS "#define MQ_CDECL"
.PP
Definition at line 90 of file msgque.h.
.SS "#define MQ_CLRCALL"
.PP
Definition at line 86 of file msgque.h.
.SS "#define mq_getpid   getpid"
.PP
Definition at line 80 of file msgque.h.
.SS "#define mq_inline   inline"
.PP
Definition at line 92 of file msgque.h.
.SS "#define mq_snprintf   snprintf"
.PP
Definition at line 84 of file msgque.h.
.SS "#define MQ_STDCALL"
.PP
Definition at line 88 of file msgque.h.
.SS "#define mq_strdup(v)   strdup(v)"
.PP
Definition at line 78 of file msgque.h.
.SS "#define mq_strtoll   strtoll"
.PP
Definition at line 76 of file msgque.h.
.SS "#define mq_timeval   timeval"
.PP
Definition at line 158 of file msgque.h.
.SS "#define mq_timezone   timezone"
.PP
Definition at line 160 of file msgque.h.
.SS "#define mq_unlink   unlink"
.PP
Definition at line 82 of file msgque.h.
.SS "#define MqSysFree(tgt)"
.PP
\fBValue:\fP
.PP
.nf
do { \
        if ( likely((tgt) != (NULL)) ) { \
            MqSysFreeP((MQ_PTR)tgt); \
            (tgt) = (NULL); \
        } \
    } while (0)
.fi
'free' system call macro 
.PP
\fBReturn values:\fP
.RS 4
\fItgt\fP the memory block to delete and set to NULL 
.RE
.PP

.PP
Definition at line 4044 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "static \fBMQ_STR\fP mq_strdup_save (\fBMQ_CST\fP v)\fC [static]\fP"
.PP
duplicate a string, the argument \fCNULL\fP is allowed 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP the string to duplicate 
.RE
.PP
\fBReturns:\fP
.RS 4
the new string or \fCNULL\fP 
.RE
.PP

.PP
Definition at line 4096 of file msgque.h.
.SS "\fBMQ_STR\fP MqSysBasename (\fBMQ_CST\fP const  in, \fBMQ_BOL\fP includeExtension)"
.PP
'basename' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIin\fP name of the string to extract the basename from (value of \fIin\fP will not be changed) 
.br
\fIincludeExtension\fP add extension like '.exe' to the filename (\fBMQ_YES\fP or \fBMQ_NO\fP) 
.RE
.PP
\fBReturns:\fP
.RS 4
the basename of \fIin\fP (it is save to modify the basename for additional needs) 
.RE
.PP
\fBAttention:\fP
.RS 4
the memory of the basename string returned is owned by the caller and have to be freed 
.RE
.PP

.SS "\fBMQ_PTR\fP MqSysCalloc (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP nmemb, \fBMQ_SIZE\fP size)"
.PP
'calloc' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fInmemb\fP the number of members in the memory block 
.br
\fIsize\fP the size of the new memory block 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block initialized with '0' 
.RE
.PP

.SS "void MqSysFreeP (\fBMQ_PTR\fP ptr)"
.PP
'free' system call wrapper of libmsgque 
.PP
.SS "enum \fBMqErrorE\fP MqSysGetTimeOfDay (struct \fBMqS\fP *const  context, struct mq_timeval * tv, struct mq_timezone * tz)"
.PP
'gettimeofday' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fItv\fP the timeval object 
.br
\fItz\fP the timezone object 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "\fBMQ_PTR\fP MqSysMalloc (struct \fBMqS\fP *const  context, \fBMQ_SIZE\fP size)"
.PP
'malloc' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIsize\fP the size of the new memory block 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block 
.RE
.PP

.SS "\fBMQ_PTR\fP MqSysRealloc (struct \fBMqS\fP *const  context, \fBMQ_PTR\fP buf, \fBMQ_SIZE\fP size)"
.PP
'realloc' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIbuf\fP the \fBold\fP memory block to extend 
.br
\fIsize\fP the size of the new memory block 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the new memory block 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSysSleep (struct \fBMqS\fP *const  context, unsigned int const  sec)"
.PP
'sleep' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIsec\fP the seconds to sleep 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqSysUSleep (struct \fBMqS\fP *const  context, unsigned int const  usec)"
.PP
'usleep' system call with error handling feature 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIusec\fP the micro (10^-6) seconds to sleep 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_CONTINUE\fP or \fBMQ_ERROR\fP and an \fBErrorObject\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for vbmsgque from the source code.
