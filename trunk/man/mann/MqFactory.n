.TH "Mq_Factory_C_API" n "Mon Jan 10 2011" "Version 4.8" "csmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_Factory_C_API \- 
.PP
provide an interface to create a new instance  

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBMqFactoryCreateS\fP"
.br
.RI "\fIinterface for the \fIconstructor\fP \fP"
.ti -1c
.RI "struct \fBMqFactoryDeleteS\fP"
.br
.RI "\fIinterface for the \fIdestructor\fP \fP"
.ti -1c
.RI "struct \fBMqFactoryS\fP"
.br
.RI "\fIdata used to define a factory \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMqFactoryErrorCheckI\fP(cmd)   ((cmd) != MQ_FACTORY_RETURN_OK)"
.br
.RI "\fIcheck static Factory function return code on error \fP"
.ti -1c
.RI "#define \fBMqFactoryErrorCheck\fP(cmd)   if ((cmd) != MQ_FACTORY_RETURN_OK) goto error;"
.br
.RI "\fIcheck static Factory function return code on error and goto to error label on error \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBMqErrorE\fP(* \fBMqFactoryCreateF\fP )(struct \fBMqS\fP *const tmpl, enum \fBMqFactoryE\fP create, struct \fBMqFactoryS\fP *const item, struct \fBMqS\fP **contextP)"
.br
.RI "\fItype of a \fIfactory-instance-constructor\fP \fP"
.ti -1c
.RI "typedef void(* \fBMqFactoryDeleteF\fP )(struct \fBMqS\fP *context, \fBMQ_BOL\fP doFactoryCleanup, struct \fBMqFactoryS\fP *const item)"
.br
.RI "\fItype of a \fIfactory-instance-destructor\fP \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP { \fBMQ_FACTORY_RETURN_OK\fP, \fBMQ_FACTORY_RETURN_CREATE_FUNCTION_REQUIRED\fP, \fBMQ_FACTORY_RETURN_ADD_IDENT_IN_USE_ERR\fP, \fBMQ_FACTORY_RETURN_CALL_ERR\fP, \fBMQ_FACTORY_RETURN_ITEM_GET_ERR\fP, \fBMQ_FACTORY_RETURN_NEW_ERR\fP, \fBMQ_FACTORY_RETURN_DEFAULT_ERR\fP, \fBMQ_FACTORY_RETURN_ADD_ERR\fP, \fBMQ_FACTORY_RETURN_INVALID_IDENT\fP }"
.br
.RI "\fIa static Factory function return this enum as status \fP"
.ti -1c
.RI "enum \fBMqFactoryE\fP { \fBMQ_FACTORY_NEW_INIT\fP =  0, \fBMQ_FACTORY_NEW_CHILD\fP =  1, \fBMQ_FACTORY_NEW_SLAVE\fP =  2, \fBMQ_FACTORY_NEW_FORK\fP =  3, \fBMQ_FACTORY_NEW_THREAD\fP =  4, \fBMQ_FACTORY_NEW_FILTER\fP =  5 }"
.br
.RI "\fIthe \fIfactory\fP is called to create an instance for ... \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqFactoryItemGetCreateData\fP (struct \fBMqFactoryS\fP const *const item)"
.br
.RI "\fIhelper function to return MqFactoryS.Create.data \fP"
.ti -1c
.RI "\fBMQ_PTR\fP \fBMqFactoryItemGetDeleteData\fP (struct \fBMqFactoryS\fP const *const item)"
.br
.RI "\fIhelper function to return MqFactoryS.Delete.data \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqFactoryErrorMsg\fP (enum \fBMqFactoryReturnE\fP ret)"
.br
.RI "\fIconvert an static Factory function \fIreturn-status\fP into a human readable \fIerror-message\fP \fP"
.ti -1c
.RI "void \fBMqFactoryErrorPanic\fP (enum \fBMqFactoryReturnE\fP ret)"
.br
.RI "\fIcheck an static Factory function return code an error and \fIpanic\fP on error \fP"
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP \fBMqFactoryNew\fP (\fBMQ_CST\fP const ident, \fBMqFactoryCreateF\fP const createCallF, \fBMQ_PTR\fP const createData, \fBMqTokenDataFreeF\fP const createDataFreeF, \fBMqFactoryDeleteF\fP const deleteCallF, \fBMQ_PTR\fP const deleteData, \fBMqTokenDataFreeF\fP const deleteDataFreeF, \fBMQ_PTR\fP data, struct \fBMqS\fP **ctxP)"
.br
.RI "\fIadd a new factory interface and create a new top-level instance \fP"
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP \fBMqFactoryAdd\fP (\fBMQ_CST\fP const ident, \fBMqFactoryCreateF\fP const createCallF, \fBMQ_PTR\fP const createData, \fBMqTokenDataFreeF\fP const createDataFreeF, \fBMqFactoryDeleteF\fP const deleteCallF, \fBMQ_PTR\fP const deleteData, \fBMqTokenDataFreeF\fP const deleteDataFreeF)"
.br
.RI "\fIadd a new \fIfactory-interface\fP identified by \fIident\fP \fP"
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP \fBMqFactoryDefault\fP (\fBMQ_CST\fP const ident, \fBMqFactoryCreateF\fP const createCallF, \fBMQ_PTR\fP const createData, \fBMqTokenDataFreeF\fP const createDataFreeF, \fBMqFactoryDeleteF\fP const deleteCallF, \fBMQ_PTR\fP const deleteData, \fBMqTokenDataFreeF\fP const deleteDataFreeF)"
.br
.RI "\fIadd a new \fIdefault-factory-interface\fP identified by \fIident\fP \fP"
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP \fBMqFactoryCopyDefault\fP (\fBMQ_CST\fP const ident)"
.br
.RI "\fIadd a new factory as \fIcopy\fP of the \fIdefault\fP factory but with a new \fIident\fP \fP"
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqFactoryDefaultCreate\fP (struct \fBMqS\fP *const tmpl, enum \fBMqFactoryE\fP create, struct \fBMqFactoryS\fP *item, struct \fBMqS\fP **contextP)"
.br
.RI "\fIthe \fIdefault\fP factory constructor function \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqFactoryDefaultIdent\fP (void)"
.br
.RI "\fIreturn the identifier of the \fIdefault\fP factory \fP"
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP \fBMqFactoryCall\fP (\fBMQ_CST\fP const ident, \fBMQ_PTR\fP const data, struct \fBMqS\fP **ctxP)"
.br
.RI "\fIcall the factory constructor, identified by \fIident\fP, to create a new instance \fP"
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqFactoryInvoke\fP (struct \fBMqS\fP *const tmpl, enum \fBMqFactoryE\fP create, struct \fBMqFactoryS\fP *item, struct \fBMqS\fP **contextP)"
.br
.RI "\fIcall a factory \fIconstructor\fP defined by \fIitem\fP \fP"
.ti -1c
.RI "enum \fBMqFactoryReturnE\fP \fBMqFactoryItemGet\fP (\fBMQ_CST\fP const ident, struct \fBMqFactoryS\fP **itemP)"
.br
.RI "\fIcall a factory \fIconstructor\fP defined by \fIitem\fP \fP"
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqFactoryCtxDefaultSet\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP const ident)"
.br
.RI "\fIcreate a copy of the default \fIfactory-interface\fP using the identifier \fIident\fP \fP"
.ti -1c
.RI "\fBMQ_CST\fP \fBMqFactoryCtxIdentGet\fP (struct \fBMqS\fP const *const context)"
.br
.RI "\fIget the \fIident\fP of the \fIfactory-interface\fP used for the context \fP"
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqFactoryCtxIdentSet\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP ident)"
.br
.RI "\fIlink the context to a new \fIfactory-interface\fP identified by \fIident\fP \fP"
.in -1c
.SH "Detailed Description"
.PP 
provide an interface to create a new instance 

The \fIfactory\fP is an important part of the object management and has the following basic features:
.IP "1." 4
create a new instance identified by an \fIidentifier\fP or using an already available instance as template
.IP "2." 4
cleanup and delete an instance
.IP "3." 4
provide an \fIidentifier\fP for factory lookup and as an unique application name
.IP "4." 4
identify the server in the network available as \fBMqLinkGetTargetIdent\fP on a remote context
.PP
The link between the \fIFactory-Identifier\fP and the \fIFactory-Interface\fP is important for the future development of \fBlibmsgque\fP. \fIMessage-Routing\fP, \fIService-Location\fP and \fIPersistent-Transactions\fP depend on this feature.
.PP
The relationship between the \fBMqFactoryS\fP and the \fBMqS\fP is the same as the relationship between a \fItype\fP and an \fIinstance\fP of the \fItype\fP in a regular programming language. The \fBMqFactoryS\fP define the \fItype\fP of the server and the \fBMqS\fP define a single instance of the server. Every kind of server has \fBonly one\fP specific \fBMqFactoryS\fP object but every instance of a server has one \fBMqS\fP object used for object management. Decreasing the size and the complexity of a \fBMqS\fP object will improve the server performance. In future more fields, defined in the \fBMqSetupS\fP attribute of the the \fBMqS\fP object, will move into \fBMqFactoryS\fP object. 
.SH "Define Documentation"
.PP 
.SS "#define MqFactoryErrorCheck(cmd)   if ((cmd) != MQ_FACTORY_RETURN_OK) goto error;"
.PP
check static Factory function return code on error and goto to error label on error 
.PP
Definition at line 1354 of file msgque.h.
.SS "#define MqFactoryErrorCheckI(cmd)   ((cmd) != MQ_FACTORY_RETURN_OK)"
.PP
check static Factory function return code on error 
.PP
Definition at line 1351 of file msgque.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBMqErrorE\fP( * \fBMqFactoryCreateF\fP)(struct \fBMqS\fP *const tmpl, enum \fBMqFactoryE\fP create, struct \fBMqFactoryS\fP *const item, struct \fBMqS\fP **contextP)"
.PP
type of a \fIfactory-instance-constructor\fP \fBParameters:\fP
.RS 4
\fItmpl\fP the calling instance to initialize the configuration data using \fBMqSetupDup\fP 
.br
\fIcreate\fP how is the factory constructor used 
.br
\fIitem\fP factory interface in use 
.br
\fIcontextP\fP the new instance 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP

.PP
Definition at line 1299 of file msgque.h.
.SS "typedef void( * \fBMqFactoryDeleteF\fP)(struct \fBMqS\fP *context, \fBMQ_BOL\fP doFactoryCleanup, struct \fBMqFactoryS\fP *const item)"
.PP
type of a \fIfactory-instance-destructor\fP \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIdoFactoryCleanup\fP was the instance created by a factory? \fBMQ_YES\fP or \fBMQ_NO\fP 
.br
\fIitem\fP \fIfactory-interface\fP used to destroy the instance 
.RE
.PP

.PP
Definition at line 1312 of file msgque.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMqFactoryE\fP"
.PP
the \fIfactory\fP is called to create an instance for ... 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_FACTORY_NEW_INIT \fP\fP
initial instance , nothing else is known 
.TP
\fB\fIMQ_FACTORY_NEW_CHILD \fP\fP
create instance as a \fIchild\fP of an other instance 
.TP
\fB\fIMQ_FACTORY_NEW_SLAVE \fP\fP
create instance as a \fIslave\fP of an other instance 
.TP
\fB\fIMQ_FACTORY_NEW_FORK \fP\fP
the instance is used by a fork process 
.TP
\fB\fIMQ_FACTORY_NEW_THREAD \fP\fP
the instance is used by a thread 
.TP
\fB\fIMQ_FACTORY_NEW_FILTER \fP\fP
the instance is used as a new filter 
.PP
Definition at line 1282 of file msgque.h.
.SS "enum \fBMqFactoryReturnE\fP"
.PP
a static Factory function return this enum as status Use the \fBMqFactoryErrorMsg\fP function to convert an static Factory function \fIreturn-status\fP into a human readable \fIerror-message\fP  
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMQ_FACTORY_RETURN_OK \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_CREATE_FUNCTION_REQUIRED \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_ADD_IDENT_IN_USE_ERR \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_CALL_ERR \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_ITEM_GET_ERR \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_NEW_ERR \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_DEFAULT_ERR \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_ADD_ERR \fP\fP
.TP
\fB\fIMQ_FACTORY_RETURN_INVALID_IDENT \fP\fP

.PP
Definition at line 1269 of file msgque.h.
.SH "Function Documentation"
.PP 
.SS "enum \fBMqFactoryReturnE\fP MqFactoryAdd (\fBMQ_CST\fP constident, \fBMqFactoryCreateF\fP constcreateCallF, \fBMQ_PTR\fP constcreateData, \fBMqTokenDataFreeF\fP constcreateDataFreeF, \fBMqFactoryDeleteF\fP constdeleteCallF, \fBMQ_PTR\fP constdeleteData, \fBMqTokenDataFreeF\fP constdeleteDataFreeF)"
.PP
add a new \fIfactory-interface\fP identified by \fIident\fP \fBParameters:\fP
.RS 4
\fIident\fP factory identifier 
.br
\fIcreateCallF\fP (C-API) instance constructor function 
.br
\fIcreateData\fP (C-API) instance constructor data 
.br
\fIcreateDataFreeF\fP (C-API) instance constructor data free function 
.br
\fIdeleteCallF\fP (C-API) instance destructor function 
.br
\fIdeleteData\fP (C-API) instance destructor data 
.br
\fIdeleteDataFreeF\fP (C-API) instance destructor data free function 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBcsmsgque.MqFactorySException\fP object on error 
.RE
.PP

.SS "enum \fBMqFactoryReturnE\fP MqFactoryCall (\fBMQ_CST\fP constident, \fBMQ_PTR\fP constdata, struct \fBMqS\fP **ctxP)"
.PP
call the factory constructor, identified by \fIident\fP, to create a new instance \fBParameters:\fP
.RS 4
\fIident\fP factory identifier to call 
.br
\fIdata\fP (C-API) environment specific data or \fCNULL\fP 
.br
\fIctxP\fP (C-API) the new created instance to return 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBcsmsgque.MqFactorySException\fP object on error 
.RE
.PP

.SS "enum \fBMqFactoryReturnE\fP MqFactoryCopyDefault (\fBMQ_CST\fP constident)"
.PP
add a new factory as \fIcopy\fP of the \fIdefault\fP factory but with a new \fIident\fP The new factory is an ordinary factory 
.PP
\fBParameters:\fP
.RS 4
\fIident\fP factory identifier 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBcsmsgque.MqFactorySException\fP object on error 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqFactoryCtxDefaultSet (struct \fBMqS\fP *constcontext, \fBMQ_CST\fP constident)"
.PP
create a copy of the default \fIfactory-interface\fP using the identifier \fIident\fP \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIident\fP the new factory identifier 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP

.SS "\fBMQ_CST\fP MqFactoryCtxIdentGet (struct \fBMqS\fP const *constcontext)"
.PP
get the \fIident\fP of the \fIfactory-interface\fP used for the context \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCcontext.factory.ident\fP value or an empty string if no factory is available 
.RE
.PP
\fBAttention:\fP
.RS 4
the \fIstring\fP is owned by \fBlibmsgque\fP -> do not free !! 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqFactoryCtxIdentSet (struct \fBMqS\fP *constcontext, \fBMQ_CST\fPident)"
.PP
link the context to a new \fIfactory-interface\fP identified by \fIident\fP \fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIident\fP the factory identifier to link with 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP

.SS "enum \fBMqFactoryReturnE\fP MqFactoryDefault (\fBMQ_CST\fP constident, \fBMqFactoryCreateF\fP constcreateCallF, \fBMQ_PTR\fP constcreateData, \fBMqTokenDataFreeF\fP constcreateDataFreeF, \fBMqFactoryDeleteF\fP constdeleteCallF, \fBMQ_PTR\fP constdeleteData, \fBMqTokenDataFreeF\fP constdeleteDataFreeF)"
.PP
add a new \fIdefault-factory-interface\fP identified by \fIident\fP The default factory is always used to create an instance if no other factory is available 
.PP
\fBParameters:\fP
.RS 4
\fIident\fP factory identifier 
.br
\fIcreateCallF\fP (C-API) instance constructor function 
.br
\fIcreateData\fP (C-API) instance constructor data 
.br
\fIcreateDataFreeF\fP (C-API) instance constructor data free function 
.br
\fIdeleteCallF\fP (C-API) instance destructor function 
.br
\fIdeleteData\fP (C-API) instance destructor data 
.br
\fIdeleteDataFreeF\fP (C-API) instance destructor data free function 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBcsmsgque.MqFactorySException\fP object on error 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqFactoryDefaultCreate (struct \fBMqS\fP *consttmpl, enum \fBMqFactoryE\fPcreate, struct \fBMqFactoryS\fP *item, struct \fBMqS\fP **contextP)"
.PP
the \fIdefault\fP factory constructor function This is an constructor suitable to create \fIC\fP language instance. Other programming languages need other default constructors. This constructor will be initialized on library startup using the identifier 'libmsgque' 
.PP
\fBParameters:\fP
.RS 4
\fItmpl\fP calling instance to initialize the configuration data using \fBMqConfigDup\fP 
.br
\fIcreate\fP how is the factory constructor used 
.br
\fIitem\fP factory interface in use 
.br
\fIcontextP\fP the new instance 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP

.SS "\fBMQ_CST\fP MqFactoryDefaultIdent (void)"
.PP
return the identifier of the \fIdefault\fP factory 
.SS "\fBMQ_CST\fP MqFactoryErrorMsg (enum \fBMqFactoryReturnE\fPret)"
.PP
convert an static Factory function \fIreturn-status\fP into a human readable \fIerror-message\fP \fBAttention:\fP
.RS 4
the string belongs to \fBlibmsgque\fP do \fBnot\fP free the memory 
.RE
.PP

.SS "void MqFactoryErrorPanic (enum \fBMqFactoryReturnE\fPret)"
.PP
check an static Factory function return code an error and \fIpanic\fP on error 
.SS "enum \fBMqErrorE\fP MqFactoryInvoke (struct \fBMqS\fP *consttmpl, enum \fBMqFactoryE\fPcreate, struct \fBMqFactoryS\fP *item, struct \fBMqS\fP **contextP)"
.PP
call a factory \fIconstructor\fP defined by \fIitem\fP This is a low-level function to call a factory constructor 
.PP
\fBParameters:\fP
.RS 4
\fItmpl\fP calling instance to initialize the configuration data using \fBMqConfigDup\fP 
.br
\fIcreate\fP how is the factory constructor used 
.br
\fIitem\fP factory interface in use 
.br
\fIcontextP\fP the new object 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBERROR OBJECT\fP on error 
.RE
.PP

.SS "enum \fBMqFactoryReturnE\fP MqFactoryItemGet (\fBMQ_CST\fP constident, struct \fBMqFactoryS\fP **itemP)"
.PP
call a factory \fIconstructor\fP defined by \fIitem\fP This is a low-level function to call a factory constructor 
.PP
\fBParameters:\fP
.RS 4
\fIident\fP the factory identifier of the factory interface 
.br
\fIitemP\fP the factory interface 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBcsmsgque.MqFactorySException\fP object on error 
.RE
.PP

.SS "\fBMQ_PTR\fP MqFactoryItemGetCreateData (struct \fBMqFactoryS\fP const *constitem)"
.PP
helper function to return MqFactoryS.Create.data 
.SS "\fBMQ_PTR\fP MqFactoryItemGetDeleteData (struct \fBMqFactoryS\fP const *constitem)"
.PP
helper function to return MqFactoryS.Delete.data 
.SS "enum \fBMqFactoryReturnE\fP MqFactoryNew (\fBMQ_CST\fP constident, \fBMqFactoryCreateF\fP constcreateCallF, \fBMQ_PTR\fP constcreateData, \fBMqTokenDataFreeF\fP constcreateDataFreeF, \fBMqFactoryDeleteF\fP constdeleteCallF, \fBMQ_PTR\fP constdeleteData, \fBMqTokenDataFreeF\fP constdeleteDataFreeF, \fBMQ_PTR\fPdata, struct \fBMqS\fP **ctxP)"
.PP
add a new factory interface and create a new top-level instance This function is a convenient function to combine the \fBMqFactoryAdd\fP and the \fBMqFactoryCall\fP functionality. 
.PP
\fBParameters:\fP
.RS 4
\fIident\fP factory identifier 
.br
\fIcreateCallF\fP (C-API) instance constructor function 
.br
\fIcreateData\fP (C-API) instance constructor data 
.br
\fIcreateDataFreeF\fP (C-API) instance constructor data free function 
.br
\fIdeleteCallF\fP (C-API) instance destructor function 
.br
\fIdeleteData\fP (C-API) instance destructor data 
.br
\fIdeleteDataFreeF\fP (C-API) instance destructor data free function 
.br
\fIdata\fP (C-API) environment specific data or \fCNULL\fP used by \fIcreateCallF\fP 
.br
\fIctxP\fP (C-API) the new created instance to return 
.RE
.PP
\fBReturns:\fP
.RS 4
an \fBcsmsgque.MqFactorySException\fP object on error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for csmsgque from the source code.
