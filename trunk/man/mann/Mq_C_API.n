.TH "Mq_C_API" n "Mon Jan 10 2011" "Version 4.8" "javamsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_C_API \- 
.PP
public libmsgque API  

.SS "Modules"

.in +1c
.ti -1c
.RI "\fBMq_Type_C_API\fP"
.br
.PP

.RI "\fIa collection of common used data types and definitions \fP"
.ti -1c
.RI "\fBMq_Config_C_API\fP"
.br
.PP

.RI "\fIconfiguration of a context \fP"
.ti -1c
.RI "\fBMq_Factory_C_API\fP"
.br
.PP

.RI "\fIprovide an interface to create a new instance \fP"
.ti -1c
.RI "\fBMq_Context_C_API\fP"
.br
.PP

.RI "\fI\fIcontext\fP, the top-level data structure and \fIapplication-handle\fP \fP"
.ti -1c
.RI "\fBMq_Link_C_API\fP"
.br
.PP

.RI "\fIsetup and manage a \fIclient-server-link\fP \fP"
.ti -1c
.RI "\fBMq_Service_C_API\fP"
.br
.PP

.RI "\fIcreate and manage services \fP"
.ti -1c
.RI "\fBMq_Buffer_C_API\fP"
.br
.PP

.RI "\fIcreate and manage dynamic, generic, mixed typed data. \fP"
.ti -1c
.RI "\fBMq_Buffer_List_C_API\fP"
.br
.PP

.RI "\fIcreate and manage a list of \fBMqBufferS\fP objects. \fP"
.ti -1c
.RI "\fBMq_Error_C_API\fP"
.br
.PP

.RI "\fIcreate and manage error messages. \fP"
.ti -1c
.RI "\fBMq_Read_C_API\fP"
.br
.PP

.RI "\fIextract data from an incoming \fIread-data-package\fP. \fP"
.ti -1c
.RI "\fBMq_Send_C_API\fP"
.br
.PP

.RI "\fIconstruct an outgoing \fIsend-data-package\fP. \fP"
.ti -1c
.RI "\fBMq_Slave_C_API\fP"
.br
.PP

.RI "\fIcreate and manage a slave context \fP"
.ti -1c
.RI "\fBMq_System_C_API\fP"
.br
.PP

.RI "\fIL)anguage A)bstraction L)ayer definition. \fP"
.ti -1c
.RI "\fBMq_Filter_C_API\fP"
.br
.PP

.RI "\fImodify data using filter technology \fP"
.in -1c
.SH "Detailed Description"
.PP 
public libmsgque API 

The msgque project is an infrastructure to link software together to act like a single software. To link mean distributing work from one software to an other software an wait or not wait for an answer. The linking is done using unix or inet domain sockets and is based on packages send from one software to an other software and back. The msgque project is used to handle all the different aspects for setup and maintain the link and is responsible for:
.IP "\(bu" 2
starting and stopping the server application
.IP "\(bu" 2
starting and stopping the communication interface
.IP "\(bu" 2
sending and receiving package data
.IP "\(bu" 2
reading and writing data from or into a package
.IP "\(bu" 2
setup and maintain the event-handling for an asynchronous transfer
.IP "\(bu" 2
propagate the error messages from the server to the client
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for javamsgque from the source code.
