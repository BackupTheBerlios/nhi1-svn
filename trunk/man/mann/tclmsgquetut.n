.TH "tclmsgque Tutorial" n "4 Dec 2009" "Version 0.1" "tclmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tclmsgque Tutorial \- .SH "INDEX"
.PP
\fBINTRODUCTION\fP
.br
 \fBBUILD\fP
.br
 \fBSERVER\fP
.br
 \fBCLIENT\fP
.br
 \fBFILTER\fP
.br
.SH "INTRODUCTION"
.PP
\fBtclmsgque\fP is the TCL language binding of the \fBlibmsgque\fP library.
.br
 The library was designed to simplify the client/server development using the following design rules:
.IP "1." 4
programming language independent
.IP "2." 4
operating system independent
.IP "3." 4
processor hardware independent
.PP
The TCL language binding provide the following basic components:
.IP "\(bu" 2
abstract class of the \fBtclmsgque\fP object: \fBMqS\fP
.IP "\(bu" 2
interface: \fBIServerSetup\fP and or \fBIServerCleanup\fP to add server functionality
.IP "\(bu" 2
interface: \fBIFilterFTR\fP and or \fBIFilterEOF\fP to add filter functionality
.IP "\(bu" 2
interface: \fBIFactory\fP to create a new application instance
.IP "\(bu" 2
interface: \fBIBgError\fP to act on asyncrone errors
.IP "\(bu" 2
adding and removing \fBservices\fP
.PP
.SH "BUILD"
.PP
The build is different between \fIUNIX\fP and \fIWINDOWS\fP. On \fIUNIX\fP the \fBautomake\fP (info automake) build environment is used and on \fIWINDOWS\fP the \fBVisualExpress\fP tools from \fIMicrosoft\fP are used. The \fBautomake\fP build on \fIWINDOWS\fP is possible but not supported.
.SS "UNIX"
The example from the tutorial is using the \fBautomake\fP build-environment from the \fBtclmsgque\fP tool. An example \fBautomake\fP configuration file is available in: \fCexample/TCL/Makefile.am\fP 
.PP
\fBno\fP build necessary
.SS "WINDOWS"
The \fBVisualExpress\fP build environment is located in the directory \fCwin\fP.
.SH "SERVER"
.PP
A \fBtclmsgque\fP server requires the following setup:
.IP "1." 4
file: \fCexample/TCL/MyServer.tcl\fP 
.IP "2." 4
an instance of the abstract class \fBMqS\fP
.IP "3." 4
the interface \fBIServerSetup\fP and or \fBIServerCleanup\fP
.IP "4." 4
the interface \fBIFactory\fP to create a new application instance
.PP
The \fIminimal\fP server looks like:
.PP
 
.PP
.nf
package require TclMsgque
proc MyFirstService {ctx} {
  $ctx SendSTART
  $ctx SendC 'Hello World'
  $ctx SendRETURN
}
proc ServerSetup {ctx} {
  $ctx ServiceCreate 'HLWO' MyFirstService
}

tclmsgque Main {
  set srv [tclmsgque MqS]
  $srv ConfigSetFactory
  $srv ConfigSetServerSetup ServerSetup
  if {[catch {
    $srv LinkCreate {*}$argv
    $srv ProcessEvent -wait FOREVER
  }]} {
    $srv ErrorSet
  }
  $srv Exit

.fi
.PP
.PP
The server is started as network visible \fITCP\fP server listen on \fIPORT\fP 2345 using a \fITHREAD\fP for every new connection request:
.PP
.PP
.nf

> tclsh MyServer.tcl --tcp --port 2345 --thread
.fi
.PP
.PP
If you are using \fIUNIX\fP and if you want to setup a high-performance local server then use the build-in \fIUDS\fP (Unix-Domain-Sockets) capability to listen on the \fIFILE\fP /path/to/any/file.uds instead on a network port:
.PP
.PP
.nf

> tclsh MyServer.tcl --uds --file /path/to/any/file.uds --thread
.fi
.PP
.PP
Three things are important:
.IP "1." 4
the \fBsend\fP style of functions
.IP "2." 4
the \fB$ctx ServiceCreate token service\fP function
.IP "3." 4
a \fBconnected\fP context of type \fBMqS\fP
.PP
Sending data is done using a minimum of 2 steps:
.IP "1." 4
First: start a data package with \fB$ctx SendSTART\fP
.IP "2." 4
Last: submit the a data package to the link target using one of:
.IP "  \(bu" 4
\fB$ctx SendEND token\fP
.IP "  \(bu" 4
\fB$ctx SendEND_AND_WAIT token ?timeout=MQ_TIMEOUT_USER?\fP
.IP "  \(bu" 4
\fB$ctx SendEND_AND_CALLBACK token callback\fP
.IP "  \(bu" 4
\fB$ctx SendRETURN\fP
.PP

.PP
The first three \fBSendEND\fP... functions are used to \fBcall\fP a remote service and the last one is used to answer an incoming service call. In-between $ctx SendSTART and $ctx SendEND token ... other \fBSEND DATA\fP style commands are available to fill the data package with data.
.PP
Services are created with the \fB$ctx ServiceCreate token service\fP function. The first parameter is a \fB4\fP byte Token as public name. 4 byte is required because this string is mapped to a 4 byte integer for speed reason. The second parameter is an object providing the \fBSERVICE CALLBACK\fP interface.
.PP
The \fBSERVICE CALLBACK\fP function has one parameter of type \fBMqS\fP. This parameter refer to the original object (in our case \fIMyServer\fP). If the service object (in our case \fIMyFirstService\fP) is a subclass of the original \fBMqS\fP object class, the both statements \fBSendSTART()\fP and \fBctx.sendSTART()\fP are identical.
.SH "CLIENT"
.PP
A \fBtclmsgque\fP client requires the following setup:
.IP "1." 4
an instance of the abstract class \fBMqS\fP
.PP
The \fIminimal\fP client looks like:
.PP
 
.PP
.nf
package require TclMsgque
set ctx [tclmsgque MqS]
$ctx ConfigSetName 'MyClient'
$ctx LinkCreate {*}$argv
$ctx SendSTART
$ctx SendEND_AND_WAIT 'HLWO' 
puts [$ctx ReadC]
$ctx Exit

.fi
.PP
.PP
To call a network visible \fITCP\fP server listen on \fIPORT\fP 2345 use:
.PP
.PP
.nf

> tclsh MyClient.tcl --tcp --port 2345
> Hello World
.fi
.PP
.PP
To call a network visible \fIUDP\fP server listen on \fIFILE\fP /path/to/any/file.uds use:
.PP
.PP
.nf

> tclsh MyClient.tcl --udp --file /path/to/any/file.uds
> Hello World
.fi
.PP
.PP
To call a \fIlocal\fP server started by the client using \fIPIPE\fP communication use:
.PP
.PP
.nf

> tclsh MyClient.tcl @ tclsh MyServer.tcl
> Hello World
.fi
.PP
.SH "FILTER"
.PP
A filter has to implement the \fBIFilterFTR\fP or the \fBIFilterEOF\fP interface which requires the following functions:
.IP "\(bu" 2
\fBIFilterFTR\fP, a service function to act on filter data rows. Every filter input data is a list of filter data rows and every row is a list of filter data columns. Every row is send from one filter-command to the following filter-command as \fIFTR\fP service request
.IP "\(bu" 2
\fBIFilterEOF\fP, a service function to act on \fIEnd-Of-Filter\fP data. This service is called \fIafter\fP the whole filter data was send. Sometimes the filter data can not be served as filter data rows (example: sorting of the input rows need to read all rows before the data can be send to the next filter command) and the EOF function is used to continue send filter data rows
.PP
The \fIminimal\fP filter looks like:
.PP
.IP "\(bu" 2
\fBfilter example\fP
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for tclmsgque from the source code.
