.TH "Mq_Link_Java_API" n "8 Nov 2010" "Version 4.7" "javamsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mq_Link_Java_API \- setup and manage a \fIclient-server-link\fP   

.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "native void \fBjavamsgque::MqS.LinkCreate\fP (String...args)  throws MqSException"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkCreate\fP "
.ti -1c
.RI "native void \fBjavamsgque::MqS.LinkCreateChild\fP (\fBMqS\fP parent, String...args)  throws MqSException"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkCreateChild\fP "
.ti -1c
.RI "native void \fBjavamsgque::MqS.LinkDelete\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkDelete\fP "
.ti -1c
.RI "native void \fBjavamsgque::MqS.LinkConnect\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkConnect\fP "
.ti -1c
.RI "native \fBMqS\fP \fBjavamsgque::MqS.LinkGetParent\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkGetParent\fP "
.ti -1c
.RI "native String \fBjavamsgque::MqS.LinkGetTargetIdent\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkGetTargetIdent\fP "
.ti -1c
.RI "native boolean \fBjavamsgque::MqS.LinkIsParent\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkIsParent\fP "
.ti -1c
.RI "native boolean \fBjavamsgque::MqS.LinkIsConnected\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkIsConnected\fP "
.ti -1c
.RI "native int \fBjavamsgque::MqS.LinkGetCtxId\fP ()"
.br
.R "implement the \fBlibmsgque\fP API object: \fBMqLinkGetCtxId\fP "
.in -1c
.SH "Detailed Description"
.PP 
setup and manage a \fIclient-server-link\fP  

setup and manage a \fIclient-server-link\fP 
.PP
The \fIclient-server-link\fP connect two \fIcontext\fP, a \fIclient-parent-context\fP and a \fIserver-parent-context\fP. The \fIlink\fP can be \fIlocal\fP (connect two \fIcontext\fP on the same host) or can be \fIremote\fP (connect two \fIcontext\fP on different hosts). On-Top the \fIparent-context\fP multiple \fIchild-context\fP are allowed. 
.PP
.nf

     !on local host!                                  !on remote host!
   
         server1---------x                     x----------server2
            |            |                     |             |
            |     child-context-1       child-context-2      |
            |            |                     |             |                      server
    parent-context-1-----x                     x-----parent-context-2
            |                                                |
   (MqConfigS::server)                  (MqConfigS::server --fork --tcp --port)
            |                                                |
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            |                                                |
        (--pipe)                                   (--tcp --host --port)
            |                                                |
    parent-context-1-----x                     x-----parent-context-2
            |            |                     |             |                      client
            |     child-context-1       child-context-2      |
            |            |                     |             |
            x------------x--------client-------x-------------x
   
                              !on local host!  
.fi
.PP
.PP
\fBDefinition of a 'client-context'\fP
.br
.IP "\(bu" 2
every new \fIclient-parent-context\fP create a new \fIclient-server-link\fP and perform the \fIconnect\fP system-call.
.IP "\(bu" 2
every new \fIclient-server-link\fP start a new \fIserver-instance\fP and creating a new \fIserver-parent-context\fP 
.IP "\(bu" 2
every deletion of the \fIclient-parent-context\fP stop the previous started \fIserver-instance\fP and delete the server-parent-context
.IP "\(bu" 2
the \fIclient-context\fP get all the error/warning/info messages from the \fIserver-context\fP 
.PP
\fBDefinition of a 'server-context'\fP
.br
.IP "\(bu" 2
every new \fIserver-parent-context\fP is created by request from the \fIclient-parent-context\fP:
.IP "\(bu" 2
in remote mode every new \fIserver-parent-context\fP wait for a \fItcp\fP or \fIuds\fP connection request using the \fIaccept\fP system-call. 
.PP
.nf

   client --tcp --hots REMOTE_HOST --port REMOTE_PORT ...    or
   client --uds --file MYFILE ...
.fi
.PP

.IP "\(bu" 2
in local mode new \fIserver-parent-context\fP is started by the \fIclient-parent-context\fP as \fIpipe:\fP 
.PP
.nf

   client @ server 
.fi
.PP

.IP "\(bu" 2
a \fIserver-context\fP have to implement the \fBIServerSetup\fP and the \fBIFactory\fP interface.
.IP "\(bu" 2
a \fIserver-context\fP have to enter the \fIevent-loop\fP and wait for incoming \fIservice-request\fP using \fBProcessEvent\fP together with the \fCMqS.WAIT.FOREVER\fP.
.PP
.PP
\fBDefinition of a 'parent-context'\fP
.br
.PP
.IP "\(bu" 2
the parent is the first context created and is created with \fBLinkCreate\fP
.IP "\(bu" 2
every new \fIparent-context\fP on the client create a new communication to a server.
.IP "\(bu" 2
every new \fIparent-context\fP on the client connect to a new \fIparent-context\fP on the server
.IP "\(bu" 2
every new \fIparent-context\fP on the server is using a new \fIserver-instance\fP 
.IP "\(bu" 2
the \fIparent-context\fP control the socket communication interface
.PP
\fBDefinition of a 'child-context'\fP
.br
.PP
.IP "\(bu" 2
the \fIchild-context\fP is the second or more context and is created with \fBLinkCreateChild\fP.
.IP "\(bu" 2
every new \fIchild-context\fP on the client create a new \fIchild-context\fP on the server.
.IP "\(bu" 2
every new \fIchild-context\fP is totally independent from the \fIparent-context\fP setup and is able to serve its own services.
.IP "\(bu" 2
the \fIchild-context\fP is using the \fIparent-context\fP as a tunnel.
.IP "\(bu" 2
the parent of a \fIchild-context\fP can be a \fIparent-context\fP or an other \fIchild-context\fP. A tree like structure is created.
.IP "\(bu" 2
the \fIchild-context\fP is using the communication interface from the parent-context.
.IP "\(bu" 2
if a \fIcontext\fP is deleted (parent or child) the \fIdepending\fP context (parent or child) is deleted too.
.IP "\(bu" 2
if a \fIcontext\fP is deleted the \fIdepending\fP context-tree is deleted too.
.PP
 
.SH "Function Documentation"
.PP 
.SS "native void javamsgque.MqS.LinkConnect ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkConnect\fP 
.PP
.SS "native void javamsgque.MqS.LinkCreate (String... args)  throws MqSException\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkCreate\fP 
.PP
.SS "native void javamsgque.MqS.LinkCreateChild (\fBMqS\fP parent, String... args)  throws MqSException\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkCreateChild\fP 
.PP
.SS "native void javamsgque.MqS.LinkDelete ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkDelete\fP 
.PP
.SS "native int javamsgque.MqS.LinkGetCtxId ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkGetCtxId\fP 
.PP
.SS "native \fBMqS\fP javamsgque.MqS.LinkGetParent ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkGetParent\fP 
.PP
.SS "native String javamsgque.MqS.LinkGetTargetIdent ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkGetTargetIdent\fP 
.PP
.SS "native boolean javamsgque.MqS.LinkIsConnected ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkIsConnected\fP 
.PP
.SS "native boolean javamsgque.MqS.LinkIsParent ()\fC [inherited]\fP"
.PP
implement the \fBlibmsgque\fP API object: \fBMqLinkIsParent\fP 
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for javamsgque from the source code.
