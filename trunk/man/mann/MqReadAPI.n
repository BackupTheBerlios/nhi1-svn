.TH "MqReadAPI" n "1 Jan 2010" "Version 4.1" "tclmsgque" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MqReadAPI \- extract items from a data package.  

.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadL_START\fP (struct \fBMqS\fP *const context, \fBMQ_BUF\fP buf)"
.br
.R "creating a \fILST\fP reference for reading the list items "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadL_END\fP (struct \fBMqS\fP *const context)"
.br
.R "deleting a \fILST\fP reference after reading the list items was finished "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadY\fP (struct \fBMqS\fP *const context, \fBMQ_BYT\fP *const valP)"
.br
.R "read a native typed value from the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadO\fP (struct \fBMqS\fP *const context, \fBMQ_BOL\fP *const valP)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadS\fP (struct \fBMqS\fP *const context, \fBMQ_SRT\fP *const valP)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadI\fP (struct \fBMqS\fP *const context, \fBMQ_INT\fP *const valP)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadF\fP (struct \fBMqS\fP *const context, \fBMQ_FLT\fP *const valP)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadW\fP (struct \fBMqS\fP *const context, \fBMQ_WID\fP *const valP)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadD\fP (struct \fBMqS\fP *const context, \fBMQ_DBL\fP *const valP)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadC\fP (struct \fBMqS\fP *const context, \fBMQ_CST\fP *const out)"
.br
.R "generic function to read an \fBMQ_STR\fP object from the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadB\fP (struct \fBMqS\fP *const context, \fBMQ_BIN\fP *const out, \fBMQ_SIZE\fP *const len)"
.br
.R "generic function to read an \fBMQ_BIN\fP object from the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadN\fP (struct \fBMqS\fP *const context, \fBMQ_BIN\fP *const out, \fBMQ_SIZE\fP *const len)"
.br
.R "generic function to read a \fBnative\fP package object from the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadBDY\fP (struct \fBMqS\fP *const context, \fBMQ_BIN\fP *const out, \fBMQ_SIZE\fP *const len)"
.br
.R "generic function to read the entire \fIbody\fP from the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadU\fP (struct \fBMqS\fP *const context, \fBMQ_BUF\fP *const out)"
.br
.R "generic function to read a \fBMQ_BUF\fP object from the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadL\fP (struct \fBMqS\fP *const context, struct \fBMqBufferLS\fP **const out)"
.br
.R "read an \fBMqBufferLS\fP object from all items of the \fIRead-Buffer\fP object "
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadProxy\fP (struct \fBMqS\fP *const readctx, struct \fBMqS\fP *const sendctx)"
.br
.ti -1c
.RI "enum \fBMqErrorE\fP \fBMqReadUndo\fP (struct \fBMqS\fP *const context)"
.br
.R "undo the \fBlast\fP MqReadX operation "
.ti -1c
.RI "\fBMQ_SIZE\fP \fBMqReadGetNumItems\fP (struct \fBMqS\fP const *const context)"
.br
.R "get the number of items left in the \fIRead-Buffer\fP object "
.ti -1c
.RI "\fBMQ_BOL\fP \fBMqReadItemExists\fP (struct \fBMqS\fP const *const context)"
.br
.R "does an additional item exits in the \fIRead-Buffer\fP object "
.in -1c
.SH "Detailed Description"
.PP 
extract items from a data package. 

The reading is done by an \fIRead-Buffer\fP object using an \fIMqIoS\fP object for doing the socket io. Every \fI\fBMqS\fP\fP object has only \fBone\fP \fIRead-Buffer\fP object and every \fIRead-Buffer\fP object has only \fBone\fP \fI\fBMqS\fP\fP object. The interface is used to extract the different \fBMqTypeE\fP data-types from the package doing the casting from one type to an other type if necessary. 
.SH "Function Documentation"
.PP 
.SS "enum \fBMqErrorE\fP MqReadB (struct \fBMqS\fP *const  context, \fBMQ_BIN\fP *const  out, \fBMQ_SIZE\fP *const  len)"
.PP
generic function to read an \fBMQ_BIN\fP object from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIout\fP the binary data to return 
.br
\fIlen\fP the length of the binary data 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadBDY (struct \fBMqS\fP *const  context, \fBMQ_BIN\fP *const  out, \fBMQ_SIZE\fP *const  len)"
.PP
generic function to read the entire \fIbody\fP from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIout\fP body of the data package 
.br
\fIlen\fP size of the body 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
the data retured belongs to \fBlibmsgque\fP.
.RE
.PP
In opposit to \fBMqReadN\fP all package items are returned. The native package data can be saved and send later back with \fBMqSendBDY\fP 
.SS "enum \fBMqErrorE\fP MqReadC (struct \fBMqS\fP *const  context, \fBMQ_CST\fP *const  out)"
.PP
generic function to read an \fBMQ_STR\fP object from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIout\fP the string to return 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
the string returned has \fIstatic\fP allocation and have to be duplicated for long term storage. 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadD (struct \fBMqS\fP *const  context, \fBMQ_DBL\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "enum \fBMqErrorE\fP MqReadF (struct \fBMqS\fP *const  context, \fBMQ_FLT\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "\fBMQ_SIZE\fP MqReadGetNumItems (struct \fBMqS\fP const *const  context)"
.PP
get the number of items left in the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of items 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadI (struct \fBMqS\fP *const  context, \fBMQ_INT\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "\fBMQ_BOL\fP MqReadItemExists (struct \fBMqS\fP const *const  context)"
.PP
does an additional item exits in the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of items 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadL (struct \fBMqS\fP *const  context, struct \fBMqBufferLS\fP **const  out)"
.PP
read an \fBMqBufferLS\fP object from all items of the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIout\fP data will be appended to \fI*out\fP, if \fI*out\fP != \fCNULL\fP the \fI*out\fP value will be used otherwise \fI*out\fP will be set to a new \fBMqBufferLS\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadL_END (struct \fBMqS\fP *const  context)"
.PP
deleting a \fILST\fP reference after reading the list items was finished 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadL_START (struct \fBMqS\fP *const  context, \fBMQ_BUF\fP buf)"
.PP
creating a \fILST\fP reference for reading the list items 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIbuf\fP the buffer object to read the LST object data from or \fCNULL\fP to use new data from the \fIRead-Buffer\fP object. The object \fIbuf\fP is the return value \fBMqReadU\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP
.RE
.PP
Example: 
.PP
.nf
 MQ_BUF buf = MqReadU(read);
 ...
 MqRead_LST_START(read,buf);
 MQ_INT myInt = MqReadI(read);
 ...
 MqRead_LST_END(read);

.fi
.PP
 
.SS "enum \fBMqErrorE\fP MqReadN (struct \fBMqS\fP *const  context, \fBMQ_BIN\fP *const  out, \fBMQ_SIZE\fP *const  len)"
.PP
generic function to read a \fBnative\fP package object from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIout\fP the binary data to return 
.br
\fIlen\fP the length of the binary data 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
the data retured belongs to \fBlibmsgque\fP.
.RE
.PP
The native package data can be saved and send later back with \fBMqSendN\fP 
.SS "enum \fBMqErrorE\fP MqReadO (struct \fBMqS\fP *const  context, \fBMQ_BOL\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "enum \fBMqErrorE\fP MqReadProxy (struct \fBMqS\fP *const  readctx, struct \fBMqS\fP *const  sendctx)"
.PP
.SS "enum \fBMqErrorE\fP MqReadS (struct \fBMqS\fP *const  context, \fBMQ_SRT\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "enum \fBMqErrorE\fP MqReadU (struct \fBMqS\fP *const  context, \fBMQ_BUF\fP *const  out)"
.PP
generic function to read a \fBMQ_BUF\fP object from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIout\fP the buffer to return 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
the object returned \fIout\fP is owned by \fIRead-Buffer\fP object and is \fBonly\fP valid up to the next call to any \fIMqRead\fP? function. If a long-term object is required use the \fBMqBufferDup\fP function. 
.PP
.nf
 MQ_BUF buf = MqBufferDup(MqReadU(read);

.fi
.PP
 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadUndo (struct \fBMqS\fP *const  context)"
.PP
undo the \fBlast\fP MqReadX operation 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
Can \fBundo\fP only the \fBlast\fP MqReadX operation, multiple \fBundo\fP will \fBcorrupt\fP the memory. 
.RE
.PP

.SS "enum \fBMqErrorE\fP MqReadW (struct \fBMqS\fP *const  context, \fBMQ_WID\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP
 
.SS "enum \fBMqErrorE\fP MqReadY (struct \fBMqS\fP *const  context, \fBMQ_BYT\fP *const  valP)"
.PP
read a native typed value from the \fIRead-Buffer\fP object 
.PP
\fBParameters:\fP
.RS 4
\fIcontext\fP the initial \fBMqS\fP object created by \fBMqContextCreate\fP 
.br
\fIvalP\fP a pointer of the value to read 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fBMqErrorE\fP return status \fBMQ_OK\fP, \fBMQ_ERROR\fP or \fBMQ_CONTINUE\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for tclmsgque from the source code.
