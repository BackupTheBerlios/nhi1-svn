#!/bin/bash

#
# template script for generating suse container for LXC
#

#
# lxc: linux Container library

# Authors:
# Daniel Lezcano <daniel.lezcano@free.fr>
# Frederic Crozat <fcrozat@suse.com>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

DISTRO=12.2

configure_opensuse()
{
    rootfs=$1
    hostname=$2

   # set network as static, but everything is done by LXC outside the container
   cat <<EOF > $rootfs/etc/sysconfig/network/ifcfg-eth0
STARTMODE='manual'
BOOTPROTO='none'
EOF

   # set default route
   IP=$(/sbin/ip route | awk '/default/ { print $3 }')
   echo "default $IP - -" > $rootfs/etc/sysconfig/network/routes

   # create empty fstab
   touch $rootfs/etc/fstab

    # create minimal /dev
    test -c $rootfs/dev/random || mknod -m 666 $rootfs/dev/random c 1 8
    test -c $rootfs/dev/urandom || mknod -m 666 $rootfs/dev/urandom c 1 9
    test -d $rootfs/dev/pts || mkdir -m 755 $rootfs/dev/pts
    test -d $rootfs/dev/shm || mkdir -m 1777 $rootfs/dev/shm
    test -c $rootfs/dev/tty || mknod -m 666 $rootfs/dev/tty c 5 0
    test -c $rootfs/dev/console || mknod -m 600 $rootfs/dev/console c 5 1
    test -c $rootfs/dev/tty0 || mknod -m 666 $rootfs/dev/tty0 c 4 0
    test -c $rootfs/dev/tty1 || mknod -m 666 $rootfs/dev/tty1 c 4 1
    test -c $rootfs/dev/tty2 || mknod -m 666 $rootfs/dev/tty2 c 4 2
    test -c $rootfs/dev/tty3 || mknod -m 666 $rootfs/dev/tty3 c 4 3
    test -c $rootfs/dev/tty4 || mknod -m 666 $rootfs/dev/tty4 c 4 4
    test -L $rootfs/dev/tty10 || ln -s null $rootfs/dev/tty10
    test -c $rootfs/dev/full || mknod -m 666 $rootfs/dev/full c 1 7
    test -c $rootfs/dev/ptmx || mknod -m 666 $rootfs/dev/ptmx c 5 2
    test -L $rootfs/dev/fd || ln -s /proc/self/fd $rootfs/dev/fd
    test -L $rootfs/dev/core || ln -s /proc/kcore $rootfs/dev/core
    test -d $rootfs/dev/mapper || mkdir -m 755 $rootfs/dev/mapper
    test -c $rootfs/dev/mapper/control || mknod -m 600 $rootfs/dev/mapper/control c 10 60
    test -d $rootfs/dev/net || mkdir -m 755 $rootfs/dev/net
    test -c $rootfs/dev/net/tun || mknod -m 666 $rootfs/dev/net/tun c 10 200

    # set the hostname
    cat <<EOF > $rootfs/etc/HOSTNAME
$hostname
EOF
    # ensure /etc/hostname is available too
    ln -s -f HOSTNAME $rootfs/etc/hostname

    # do not use hostname from HOSTNAME variable
    cat <<EOF >> $rootfs/etc/sysconfig/cron
unset HOSTNAME
EOF

    # set minimal hosts
    cat <<EOF > $rootfs/etc/hosts
127.0.0.1 localhost $hostname
EOF

    # disable various services
    # disable yast->bootloader in container
    cat <<EOF > $rootfs/etc/sysconfig/bootloader
LOADER_TYPE=none
LOADER_LOCATION=none
EOF

    # cut down inittab
    cat <<EOF > $rootfs/etc/inittab
id:3:initdefault:
si::bootwait:/etc/init.d/boot
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l6:6:wait:/etc/init.d/rc 6
ls:S:wait:/etc/init.d/rc S
~~:S:respawn:/sbin/sulogin
p6::ctrlaltdel:/sbin/init 6
p0::powerfail:/sbin/init 0
cons:2345:respawn:/sbin/mingetty --noclear console screen
c1:2345:respawn:/sbin/mingetty --noclear tty1 screen
EOF

    # set /dev/console as securetty
    cat << EOF >> $rootfs/etc/securetty
console
EOF

    cat <<EOF >> $rootfs/etc/sysconfig/boot
# disable root fsck
ROOTFS_FSCK="0"
ROOTFS_BLKDEV="/dev/null"
EOF


    # remove pointless services in a container
    chroot $rootfs /sbin/insserv -r -f boot.udev boot.loadmodules boot.device-mapper boot.clock boot.swap boot.klog kbd

    echo "Please change root-password !"
    echo "root:root" | chpasswd -P $rootfs

    return 0
}

download_opensuse()
{
    rootfs=$1
    arch=$2

    if [ ! -x /usr/bin/build ]; then
       echo "Could not create openSUSE template :"
       echo "you need to install \"build\" package"
       return 1
    fi

    # check the mini opensuse was not already downloaded
    cache="/var/cache/lxc/opensuse/partial-$arch"
    distro="http://download.opensuse.org/distribution/$DISTRO"
    update="http://download.opensuse.org/update/$DISTRO"
    mkdir -p "$cache"

    if [ $? -ne 0 ]; then
	echo "Failed to create '$cache' directory"
	return 1
    fi

    # cleanup the rootfs
    rm -fr $rootfs

    # download a mini opensuse into a cache
    echo "Downloading opensuse minimal ..."
    echo "Checking cache download in $cache ... "

    # repos
    zypper --root $rootfs --cache-dir $cache --non-interactive ar $distro/repo/oss/ repo-oss
    zypper --root $rootfs --cache-dir $cache  ar $update/ update

    # install packages
    zypper --root $rootfs --cache-dir $cache  in --auto-agree-with-licenses \
	zypper lxc patterns-openSUSE-base sysvinit-init

    zypper --root $rootfs --cache-dir $cache  in --auto-agree-with-licenses \
	aaa_base bash coreutils diffutils \
	filesystem fillup glibc grep insserv libacl1 libattr1 \
	libbz2-1 libgcc46 libncurses5 pam \
	permissions libreadline6 rpm sed tar zlib libselinux1 \
	liblzma5 libcap2 libpcre0 \
	libpopt0 libelf1 liblua5_1 \
	netcfg udev

    zypper --root $rootfs --cache-dir $cache  --gpg-auto-import-keys update

#   now the special configuration
    zypper --quiet --root $rootfs --cache-dir $cache  rm patterns-openSUSE-base
    umount $rootfs/proc
#   really clean the image
    rm -fr $rootfs/{.build,.guessed_dist,.srcfiles*,installed-pkg}
    rm -fr $rootfs/dev
#    make sure we have a minimal /dev
    mkdir -p "$rootfs/dev"
    mknod -m 666 $rootfs/dev/null c 1 3
    mknod -m 666 $rootfs/dev/zero c 1 5
#   create mtab symlink
    rm -f $rootfs/etc/mtab
    ln -sf /proc/self/mounts $rootfs/etc/mtab

# ensure /var/run and /run are symlinked
    rm -fr $rootfs/var/run
    ln -s -f ../run $rootfs/var/run
    if [ $? -ne 0 ]; then
	echo "Failed to download the rootfs, aborting."
	return 1
    fi

    # make it rerun-able
    echo "Download complete."

    return 0
}

install_opensuse()
{
    rootfs=$1
    mkdir -p /var/lock/subsys/
    (
	flock -n -x 200
	if [ $? -ne 0 ]; then
	    echo "Cache repository is busy."
	    return 1
	fi

    	download_opensuse $rootfs $(arch)

	return 0

    ) 200>/var/lock/subsys/lxc

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    cat <<EOF > $path/config
lxc.network.type = empty
lxc.utsname = $name

lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $rootfs
lxc.mount = $path/fstab

lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
EOF

    cat <<EOF > $path/fstab
proc            $rootfs/proc         proc	nodev,noexec,nosuid 0 0
sysfs           $rootfs/sys          sysfs	defaults  0 0
tmpfs           $rootfs/run          tmpfs	mode=0755,nodev,nosuid 0 0
EOF

    if [ $? -ne 0 ]; then
	echo "Failed to add configuration"
	return 1
    fi

    return 0
}

clean()
{
    cache="/var/cache/lxc/opensuse"

    if [ ! -e $cache ]; then
	exit 0
    fi

    # lock, so we won't purge while someone is creating a repository
    (
	flock -n -x 200
	if [ $? != 0 ]; then
	    echo "Cache repository is busy."
	    exit 1
	fi

	echo -n "Purging the download cache..."
	rm --preserve-root --one-file-system -rf $cache && echo "Done." || exit 1
	exit 0

    ) 200>/var/lock/subsys/lxc
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> -n|--name=<name> --clean
EOF
    return 0
}

options=$(getopt -o hp:n:c -l help,path:,name:,clean -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
	-h|--help)      usage $0 && exit 0;;
	-p|--path)      path=$2; shift 2;;
	-n|--name)      name=$2; shift 2;;
	-c|--clean)     clean=$2; shift 2;;
	--)             shift 1; break ;;
	*)              break ;;
    esac
done

if [ ! -z "$clean" -a -z "$path" ]; then
    clean || exit 1
    exit 0
fi

type zypper > /dev/null
if [ $? -ne 0 ]; then
    echo "'zypper' command is missing"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ -z "$name" ]; then
    echo "'name' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs

install_opensuse $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install opensuse"
    exit 1
fi

configure_opensuse $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure opensuse for a container"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

if [ ! -z $clean ]; then
    clean || exit 1
    exit 0
fi
