#!/bin/bash

set -u

# find env.sh config file
abs_top_builddir=$PWD
while [[ ! -f "$abs_top_builddir/env.sh" && "$abs_top_builddir" != '/' ]] ; do 
  abs_top_builddir=$(dirname "$abs_top_builddir")
done
if [[ -r "$abs_top_builddir/env.sh" ]] ; then
  . "$abs_top_builddir/env.sh"
else
 echo "unable to find the 'env.sh' configuration file"
 echo "please build first and than use this tool in the build-tree"
 exit
fi

cd "$abs_top_builddir/theLink/docs"

abs_srcdir="$abs_top_srcdir/theLink/docs"

## template definition
man=$abs_srcdir/man/local.generic
libmsgque_private=$abs_srcdir/man/Doxyfile.msgque
ccmsgque_private=$abs_srcdir/man/Doxyfile.msgque
javamsgque_private=$abs_srcdir/man/Doxyfile.msgque
pymsgque_private=$abs_srcdir/man/Doxyfile.msgque
rubymsgque_private=$abs_srcdir/man/Doxyfile.msgque
tclmsgque_private=$abs_srcdir/man/Doxyfile.msgque
msgqueforphp_private=$abs_srcdir/man/Doxyfile.msgque

main=$abs_srcdir/man/Doxyfile.msgque

libmsgque=$abs_srcdir/libmsgque_public/Doxyfile
javamsgque=$abs_srcdir/javamsgque_public/Doxyfile
ccmsgque=$abs_srcdir/ccmsgque_public/Doxyfile
csmsgque=$abs_srcdir/csmsgque_public/Doxyfile
gomsgque=$abs_srcdir/libmsgque_public/Doxyfile
vbmsgque=$abs_srcdir/csmsgque_public/Doxyfile
perlmsgque=$abs_srcdir/libmsgque_public/Doxyfile
msgqueforphp=$abs_srcdir/libmsgque_public/Doxyfile
pymsgque=$abs_srcdir/libmsgque_public/Doxyfile
rubymsgque=$abs_srcdir/libmsgque_public/Doxyfile
tclmsgque=$abs_srcdir/libmsgque_public/Doxyfile

##
## =========================================================================
## Command-Line
##

Usage() {
  cat - <<EOF
$(basename $0) ?options...? (ALL|Directories...)

  This tool build the documentation in the:
    TOP_BUILD_DIR/theLink/docs
  directory and can be used directly using:
    > Nhi1Docs ...
  or using together withe the makefile:
    > make html ...

ALL ........... generate all the documentation available
Directories ... use on of the following targets:

  main ........ build the toplevel documentation
  man ......... create manual pages

  libmsgque ... build core libmsgque documentation

  ccmsgque .... build C++ documentation
  javamsgque .. build JAVA documentation
  msgqueforphp  build PHP documentation
  pymsgque .... build PYTHON documentation
  rubymsgque .. build RUBY documentation
  tclmsgque ... build TCL documentation

EOF
}

eval "$($abs_top_srcdir/sbin/SetupEnv "$0" "$@" <<-'EOF'
G_Shell 'bash'
# ---------------------------------------------------------------------
G_Date='$Date: 2013-02-14 16:15:08 +0000 (Thu, 14 Feb 2013) $'
G_Revision='$Revision: 615 $'
G_Author='$Author: aotto1968 $'
G_Source='$URL: svn+ssh://svn.berlios.de/svnroot/repos/nhi1/trunk/bin/Nhi1Config $'
# --------------------------------------------------------------------
G_Description='frontend to run the documentation builder'
G_HelpProc='Usage'
# -------------------------------------------------------------------
G_Option break-on-non-option
G_Argument 'usedot:usedot:no:build graph using the dot tool:B'
G_Argument 'release:release:no:make the final build:B'

EOF
  )"

(( $# == 0 )) && {
    Usage
    exit 1
}
[[ "$usedot" == "yes" && -z "$DOT" ]] && {
    echo "error: dot tool not available, please install" 1>&2
    exit 1
}
[[ -z "$DOXYGEN" ]] && {
    echo ERROR: no 'doxygen' support available 2>&1
    exit 1
}

[[ $1 == "ALL" ]] && {
    set -- $abs_srcdir/man $abs_srcdir/*_private $abs_srcdir/main
    #set -- $abs_srcdir/main
}

## customizing
  export  SRCDIR="$abs_top_srcdir/theLink"
  export  TOPSRCDIR="$abs_top_srcdir"
  export  BUILDDIR="$abs_top_builddir/theLink"
  export  VERSION="$LIBMSGQUE_VERSION"
  export  PERL_PATH="$DOXYPERL"
  export  DOT_PATH="$(dirname $DOT)"
  export  GENERATE_MAN='NO' 
  export  GENERATE_RTF='NO' 
  export  GENERATE_XML='NO' 
  export  GENERATE_HTMLHELP='NO' 
  export  GENERATE_CHI='NO' 
  export  GENERATE_HTML='YES' 
  export  GENERATE_LATEX='NO' 
  if [[ "$release" == "YES" ]] ; then
    export  HTML_FOOTER="../footer.html"
  else
    export  HTML_FOOTER=""
  fi

#set -x

## Main
(
  for D
  do
    echo "======================================================================="
    case "$D" in
      *_private)
      ;;
      *)
	D+=_private
      ;;
    esac
    if test ! -e "$D" ; then
      D="$abs_srcdir/$D"
    fi
    if test ! -e "$D" ; then
      echo "Error: unable to open directory '$D'"
      exit 1
    fi
    if test -f "$D" ; then
      FN="$D"
      D="$(dirname $D)"
    elif test -d "$D"; then
      FN="$D/Doxyfile*"
    else
      echo "Error: '$D' ist not a file and not a directory"
      exit 1
    fi
    pushd "$D" || {
      echo "ERROR: $1 is no directory"
      exit 2
    }
    shift
    D=$(basename "$D")

  ## search and generate the files
    for F in $FN ; do
      test ! -f $F && continue
      if [[ "$F" == */Doxyfile.* ]] ; then
	P=$(basename "$F")
	P="${P##*.}"
      else
	P=''
      fi
      #test "$F" == "$P" && P="$(basename $PWD)"
      #test "$D" == "$P" && D=''
      echo "#########################################################################"
      echo "start: $F"
      export  PROJECT="${P:-$D}"
      export  DOCDIR="$abs_top_srcdir/html/theLink/$PROJECT"
      echo "PROJECT: $PROJECT"
      echo "DOCDIR: $DOCDIR"
      rm -fr "$DOCDIR"
      mkdir -p "$DOCDIR"
      echo "
$abs_srcdir/Doxyfile.generic \ 
  ${!D:-} \ 
    ${!P:-} \ 
      $F | $DOXYGEN
"
      cat "$abs_srcdir/Doxyfile.generic" ${!D:-} ${!P:-} "$F" | "$DOXYGEN" - 2>&1
    done

    popd
  done
)

