#!/bin/bash
#+
#:  \file       bin/Nhi1Test
#:  \brief      \$Id$
#:  
#:  (C) 2009 - NHI - #1 - Project - Group
#:  
#:  \version    \$Rev$
#:  \author     EMail: aotto1968 at users.berlios.de
#:  \attention  this software has GPL permissions to copy
#:              please contact AUTHORS for additional information
#:

set -u

export LANG="C"

# find env.sh config file
abs_top_builddir=$PWD
while [[ ! -f "$abs_top_builddir/env.sh" && "$abs_top_builddir" != '/' ]] ; do 
  abs_top_builddir=$(dirname "$abs_top_builddir")
done
if [[ -r "$abs_top_builddir/env.sh" ]] ; then
  . "$abs_top_builddir/env.sh"
else
 echo "unable to find the 'env.sh' configuration file"
 echo "please build first and than use this tool in the build-tree"
 exit
fi

##
## =========================================================================
## Functions
##

Die() {
  echo "Error[${BASH_LINENO[1]}]: $*" 1>&2
  exit 1
}

Usage() {
  cat - <<-EOF
The scripts used process test-cases to verify the features gives.
Testing is done using the tcltest feature of the tcl distribution.
The genaral syntax is:

  $0 ?global-options? script ?script-options?

  1. using the test feature of the build environment
        > cd NHI1-X.X
        > make check (not available for windows)

  2. invoke an individual test script for language "python" and "perl"
        > cd NHI1-X.X/theLink/tests
        > ./Nhi1Test.bash int.test --only-python-perl

  3. invoke all tests for language "go" using "threads" and only "binary" data
        > cd NHI1-X.X/theLink/tests
        > ./Nhi1Test.bash ./all.tcl --only-go --only-threads --only-binary

  4. start "tcl" server using "tcp" and listing on port "7777" and "spawn"
     for every new connection a new server
        > cd NHI1-X.X/theLink/tests
        > ./Nhi1Test.bash ../example/tcl/server.tcl --tcp --port 7777 --spawn

Help is available with the following commands:

  1. test specific help
        > cd NHI1-X.X/theLink/tests
        > ./Nhi1Test.bash ./all.tcl --help
     or
        > ./Nhi1Test.bash ./all.tcl --help-msgque

  2. tcltest specific help
        > man tcltest

Available test scripts:

$(cd $abs_top_srcdir/theLink/tests; ls -1 *.test | xargs -n 4 printf '  %-18s %-18s %-18s %-18s\n')

The prefix is used to add debugger or profiler tools in front of the executable.
The following tools are supported:

  st:   strace
            > $PREFIX_st
  vg:   valgrind:
            > $PREFIX_vg
  sp:   valgrind: gen-suppressions
            > $PREFIX_sp
  lc:   valgrind: leak-chec
            > $PREFIX_lc
  sr:   valgrind: leak-chec + show-reachable
            > $PREFIX_sr
  gdb:  use debugger 'gdb'
            > $PREFIX_gdb
  ddd:  use debugger 'ddd'
            > $PREFIX_ddd
  kdbg: use debugger 'kdbg'
            > $PREFIX_kdbg
EOF
  exit 1
}

#
# lookup the token
#
lookup() {
  if [[ "$1" == '-silent' ]] ; then
    declare -i silent=1
    shift
  else
    declare -i silent=0
  fi
  declare -a ret
  declare CMDDIR=$(cd $(dirname -- $1);pwd)
  declare CMD=$(basename -- $1)

  # fix the CMD path
  [[ ! -e "$CMDDIR/$CMD" ]] && {
    # look for CMD in the same directory but in the source tree
    CMDDIR="$abs_top_srcdir/${CMDDIR#$abs_top_builddir/}"
    [[ ! -e  "$CMDDIR/$CMD" ]] && {
      # look into the example directories
      case "$CMD" in
	*.tcl)      CMDDIR="$abs_top_srcdir/theLink/example/tcl";;
	*.test)     CMDDIR="$abs_top_srcdir/theLink/tests";;
	*.java)     CMDDIR="$abs_top_builddir/theLink/example/java";;
	*.py)	    CMDDIR="$abs_top_srcdir/theLink/example/python";;
	*.pl)	    CMDDIR="$abs_top_srcdir/theLink/example/perl";;
	*.rb)	    CMDDIR="$abs_top_srcdir/theLink/example/ruby";;
	*.php)      CMDDIR="$abs_top_srcdir/theLink/example/php";;
	*.cs|*.exe) CMDDIR="$abs_top_builddir/theLink/example/csharp";;
	*.vb)	    CMDDIR="$abs_top_builddir/theLink/example/vb";;
	*.go)	    CMDDIR="$abs_top_builddir/theLink/example/go";;
	*.cc)	    CMDDIR="$abs_top_builddir/theLink/example/cc";;
	*.c)	    CMDDIR="$abs_top_builddir/theLink/example/c";;
      esac
    }
  }

  if [[ -r "$CMDDIR/$CMD" ]] ; then
    CMD="$CMDDIR/$CMD"
  elif (( ! silent )) ; then
    Die "unable to find comand-file '$CMD'"
  fi

  if (( silent )) ; then
    echo $CMD
  else 
    # find executable if CMD is a script-file
    case "$CMD" in
      *.tcl|*.test)   EXE="${TCLSH:-tclsh}";;
      *.java)	    EXE="${JAVA:-java}"; CMD="${CMD%.*}";;
      *.py)	    EXE="${PYTHON:-python}";;
      *.pl)	    EXE="${PERL:-perl} -I$abs_top_srcdir/theLink/example/perl";;
      *.rb)	    EXE="${RUBY:-ruby}";;
      *.php)	    EXE="${PHP:-php}";;
      *.cs|*.exe)	    EXE="${MONO:-mono}"; CMD="${CMD%.*}.exe";;
      *.go)	    EXE=""; CMD="${CMD%.*}$EXT";;
      *.cc)	    EXE=""; CMD="${CMD%.*}$EXT";;
      *.c)	    EXE=""; CMD="${CMD%.*}$EXT";;
      *)		    EXE="";;
    esac

    test -n "$EXE" && ret+=("$EXE")
    ret+=("$CMD")
    echo "${ret[@]}"
  fi
}

##
## =========================================================================
## Main
##

# special Windows
if [[ ${WINDIR:-} != "" ]] ; then
  PATH=$PATH:$LD_LIBRARY_PATH
  EXT=.exe
  MONO=""
else
  EXT=""
  MONO=$CLREXEC
fi
export TS_DEBUG=0

PREFIX=""
POSTFIX="cat"
TEE="yes"

PREFIX_vg="valgrind --trace-children=yes --num-callers=36 --quiet"
PREFIX_gdb="gdb -d ../perlmsgque/Net*/ --tui --args"
PREFIX_ddd="ddd --args"
PREFIX_kdbg="/opt/kde3/bin/kdbg"
PREFIX_lc="valgrind --trace-children=yes --leak-check=full --num-callers=36 --quiet"
PREFIX_sr="valgrind --trace-children=yes --leak-check=full --show-reachable=yes --num-callers=36 --quiet"
PREFIX_st="strace"
PREFIX_sp="valgrind --trace-children=yes --leak-check=full --num-callers=36 --quiet --gen-suppressions=all"

# setup special variables
case "${1:-}" in
  *.tcl|*.test)   
    # find library.tcl
    d="$abs_top_srcdir${PWD#$abs_top_builddir}"
    [[ -r "$d/library.tcl" ]] && export TS_LIBRARY="$d/library.tcl"
    unset d
  ;;
esac

##
## =========================================================================
## Command-Line
##

eval "$($abs_top_srcdir/sbin/SetupEnv "$0" "$@" <<-'EOF'
G_Shell 'bash'
# ---------------------------------------------------------------------
G_Date='$Date$'
G_Revision='$Revision$'
G_Author='$Author: aotto1968 $'
G_Source='$URL: svn+ssh://svn.berlios.de/svnroot/repos/nhi1/trunk/bin/Nhi1Config $'
# --------------------------------------------------------------------
G_Description='frontend to run test-scripts'
G_HelpProc='Usage'
# -------------------------------------------------------------------
G_Option break-on-non-option
G_Argument 'prefix:prefix:no:prefix test with:L:no:vg:gdb:ddd:kdbg:lc:sr:st:sp:mdb'
G_Argument 'lookup:lookup:no:lookup a test-script:B'
G_Argument 'remote:remote::add --tcp --port 7777 --thread to the argument(s)'

EOF
  )"

(( $# == 0 )) && Usage

if [[ "$lookup" == 'yes' ]] ; then
  lookup "$1"
  exit
fi

[[ $1 == "-ur" ]] && {
  set -- "$@" --tcp --port 7777 --thread
}
case "$prefix" in
  vg) 
    PREFIX=$PREFIX_vg
    POSTFIX='grep -v DWARF2'
  ;;
  gdb) 
    PREFIX=$PREFIX_gdb
    POSTFIX=''
    TEE='no'
  ;;
  ddd) 
    PREFIX=$PREFIX_ddd
    TEE='no'
  ;;
  kdbg) 
    PREFIX=$PREFIX_kdbg
    TEE='no'
  ;;
  lc) 
    PREFIX=$PREFIX_lc
    POSTFIX='grep -v DWARF2'
  ;;
  sr) 
    PREFIX=$PREFIX_sr
    POSTFIX='grep -v DWARF2'
  ;;
  st) 
    PREFIX=$PREFIX_st
  ;;
  sp) 
    PREFIX=$PREFIX_sp
    POSTFIX='grep -v DWARF2'
  ;;
  mdb) 
    MONO='mdb'
  ;;
esac

# set local tcltest configuration file
export TS_LIBRARY=$(lookup -silent library.tcl)
if [[ -r "$TS_LIBRARY" ]] ; then
  echo "add: TS_LIBRARY=$PWD/library.tcl"
else
  echo "skip: TS_LIBRARY"
  unset TS_LIBRARY
fi

# rebuild command line, expand the path, find executable etc..
#
declare -a cmdline=()
declare -a args=()
declare -i first=1
declare id=all

while (( $# )) ; do
  if [[ "$1" == -* && $first -eq 1 ]] ; then
    args+=($1)
  else
    if (( first )) ; then
      id=$(basename -- ${PWD%/*})_$(basename -- ${1%.*})
      cmdline+=( $(lookup $1) ${args[@]:-} ) || exit
      first=0
    else
      cmdline+=( $1 )
      [[ "$1" == "@" ]] && first=1
    fi
  fi
  shift
done

echo "exec: ${cmdline[*]}"

set "${cmdline[@]}"
EXE=$1; shift

if [[ $TEE == "yes" ]] ; then
  if [[ $PREFIX == *kdbg* ]] ; then
    exec $PREFIX $EXE -a "$*" 2>&1 | $POSTFIX | tee /tmp/$id.log
  else
    exec $PREFIX $EXE "$@" 2>&1 | $POSTFIX | tee /tmp/$id.log
  fi
else
  if [[ $PREFIX == *kdbg* ]] ; then
    exec $PREFIX $EXE -a "$*}"
  else
    if [[ "$POSTFIX" == "cat" ]] ; then
      exec $PREFIX $EXE "$@" 2>&1 | $POSTFIX
    else
      exec $PREFIX $EXE "$@"
    fi
  fi
fi

