#+
#:  \file       README_windows
#:  \brief      \$Id$
#:  
#:  (C) 2011 - NHI - #1 - Project - Group
#:  
#:  \version    \$Rev$
#:  \author     EMail: aotto1968 at users.berlios.de
#:  \attention  this software has GPL permissions to copy
#:              please contact AUTHORS for additional information
#:

Quote-Of-The-Live:

"Argh. I guess we have to extend the old joke: these days, Windows is a
64-bit file-system redirection on top of a 32-bit patch to a 16-bit shell for
an 8-bit operating system written for a 4-bit processor by a two-bit company
without one bit of sense!"
-> http://cygwin.com/ml/cygwin/2007-06/msg00163.html

On Windows the 'cygwin' build environment is used to build cygwin and
none cygwin binaries.

The cygwin build is like a unix build and is not mentioned in this document.

The non cygwin build or the windows native build are performed using the
mingw cross-compiler of cygwin OR the winsdk compiler from Microsoft.


a typical configuration command is:

/path/to/NHI1/configure --enable-cache --enable-threads --enable-debug \
    --host=x86_64-w64-mingw32 --prefix=/cygpath/c/nhi1 \
    --with-tcl=/cygdrive/c/Tcl/bin/tclsh86 \
    --with-python=/cygdrive/c/Python32/python.exe \
    --with-perl=/cygdrive/c/Perl64/bin/perl \
    --with-java=/cygdrive/c/Program\ Files/Java/jdk1.7.0_17/bin/java.exe \
    --with-cxx \
    --with-csharp \
    --with-vb \
    --with-winsdk="C:/Program Files/Microsoft SDKs/Windows/v7.1/Bin/SetEnv.cmd"

* The tcl, perl and python binaries come from the active-state distribution.
* The Windows-SDK comes from Microsoft

The following libmsgque binaries are build and installed:

  PREFIX/bin/atool.exe ............. a multi purpose tool

  PREFIX/include/msgque.h .......... public c header file
  PREFIX/bin/libmsgque-XX.dll ...... mingw c library
  PREFIX/lib/libmsgque.dll.a ....... mingw c import library
  PREFIX/lib/libmsgque.la .......... mingw libtool c configuration
  PREFIX/bin/msgque.dll ............ msvc c library
  PREFIX/lib/msgque.exp ............ msvc c export library
  PREFIX/lib/msgque.lib ............ msvc c import library

  PREFIX/include/ccmsgque.h ........ public c++ header file
  PREFIX/bin/libccmsgque-XX.dll .... mingw c++ library
  PREFIX/lib/libccmsgque.dll.a ..... mingw import library
  PREFIX/lib/libccmsgque.la ........ mingw libtool c++ configuration
  PREFIX/bin/ccmsgque.dll .......... msvc c++ library
  PREFIX/lib/ccmsgque.exp .......... msvc c++ export library
  PREFIX/lib/ccmsgque.lib .......... msvc c++ import library

  PREFIX/lib/NHI1/csmsgque.dll ..... clr csharp interface library
  PREFIX/bin/NHI1pymsgque.pyd ...... msvc python interface library

  PREFIX/lib/NHI1/javamsgque.jar ... java interface package
  PREFIX/lib/NHI1/javamsgque.dll ... mingw java interface library
  PREFIX/lib/NHI1/javamsgque.dll.a . mingw java import library
  PREFIX/lib/NHI1/javamsgque.la .... mingw libtool java configuration

  PREFIX/lib/NHI1/pkgIndex.tcl ..... tcl interface index file
  PREFIX/lib/NHI1/tclmsgque.dll .... mingw tcl interface library
  PREFIX/lib/NHI1/tclmsgque.dll.a .. mingw tcl import library
  PREFIX/lib/NHI1/tclmsgque.la ..... mingw libtool tcl configuration


The Windows-SDK build using the following build-scripts
  
  TOP_BUILDDIR/sbin/wincl.bat ...... "cl" compiler wrapper
  TOP_BUILDDIR/sbin/winclr.bat ..... "clr" compiler wrapper
  TOP_BUILDDIR/sbin/winlib.bat ..... "lib" archive-builder wrapper
  TOP_BUILDDIR/sbin/winlink.bat .... "link" linker wrapper
  TOP_BUILDDIR/sbin/winsdk.bat ..... windows SDL shell

Tne MinGW build was tested with the with:

  x86_64-w64-mingw32 ............ creating 64bit windows binaries

The following pitfalls are important:

  1. if you try to use the ssh server from cygwin to login and compile
     windows native binaries the ssh server have to run as the LOGIN
     user. This mean only one development user per windows is possible.

  2. libtool require a import library called libXX.dll.a but a typical 
     msvc inport library is called XX.lib. The configure script will
     create a copy of the import library in the SAME directory as the
     original msvc import library was located.

  3. the /Windows/System32 directory is mapped to /Windows/SysWOW64 for
     32bit application like cygwin. Native 64bit dll's are hidden. use
     /cygdrive/c/Windows/Sysnative diretory to get it.
     
  4. ref 2. works for tcl but NOT for python. some imcopabilities between
     MinGW and msvc keep this problem open. Use msvc to create native
     python extension

  5. perl does only support the msvc build on windows.


OLD
========================================================================


Java
====

export JAVA_HOME=/cygdrive/c/Programme/Java/jdk1.6.0_24/
export PATH="$JAVA_HOME/bin:$PATH"


C# / VB.Net
===========

CSDIR=/cygdrive/c/Windows/Microsoft.NET/Framework64
FrameworkDir=$(cygpath -w $CSDIR)
FrameworkVersion=v4.0.30319
export PATH=$CSDIR/$FrameworkVersion:'/cygdrive/c/Program Files/Microsoft SDKs/Windows/v7.1/Bin/x64':$PATH


