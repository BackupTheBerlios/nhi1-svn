/**

\page filter WHAT-IS: a filter ?

\section filter-intro				  INTRODUCTION
\copydetails Mq_Filter_C_API

\section filter-bi				  BI-DIRECTIONAL FILTER
The following code is based on the \b JAVA example \c theLink/example/java/Filter3.java:

\dontinclude Filter3.java

\skip package example
\until javamsgque

create the \e class, implement the \e factory and the \e server interface:
\skip IFactory
\until }

define the \e ServerSetup function to configure a new connection request and create a \e generic 
service-handler (\b +ALL) for the \e left and the \e right context:
\skip ServerSetup
\until }

define the \e generic service-handler to act on \b +ALL token:
\skip Filter
\until MqSException

get the \e right context as send-target:
\skipline ServiceGetFilter

read the data from the \e left context send the data to the \e right context:
\until SendBDY

depending on the \e transaction-status decide to use the proper \b Send function:
\until }
\until }

finally finish the service-handler:
\until }
\until }

define the main function and create the initial context:
\skip main
\until filter

process the command-line arguments and start the initial link:
\skipline LinkCreate

finally start the event-loop and wait for an incoming service-request:
\skipline ProcessEvent

on exit delete the context and finish the process:
\until }
\until }
\until }
\until }
\until }


\section        filter-one                         ONE-DIRECTIONAL FILTER

The following code is based on the \b JAVA example \c theLink/example/java/Filter1.java:

\dontinclude Filter1.java

\skip package example
\until javamsgque

create a \e class and implement the \e factory interface:
\skip IFactory
\until }

define a service-handler for the \b +FTR token and collect the data:
\skip FTR
\until Filter1

finally finish the service-handler:
\until }
\until }

define a service-handler for the \b +EOF token:
\skip EOF
\until }

first send the \b +FTR data, line by line:
\until FTR
\until }

second send the \b +EOF data, only once at the end:
\skip SendSTART
\until EOF

finally finish the service-handler:
\until }
\until }

define the main function and create the initial context:
\skip main
\until filter

define the server setup:
\skipline ConfigSetIsServer

process the command-line arguments and start the initial link:
\skipline LinkCreate

define the \b +FTR and the \b +EOF token but only for the \e left context:
\skip FTR
\until EOF

finally start the event-loop and wait for an incoming service-request:
\skipline ProcessEvent

on exit delete the context and finish the process:
\until }
\until }
\until }
\until }
\until }

*/

