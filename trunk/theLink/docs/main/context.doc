/** 
\page context WHAT-IS: context
\section context_toc Table Of Contents
 - \ref context_definition
 - \ref context_detail
 .
\section context_definition Definition

<TABLE>
    <TR> <TD> \c context </TD>  <TD> the real application using the \libmsgque interface and service handles </TD> </TR>
</TABLE>

\section context_detail What is a "context" ?
 - the \b context is the main \libmsgque object with a different purpose on a \e client and a \e server and is created with:
\code
MqErrorCheck (MqLinkCreate ((struct ContextS *)context, argv, alfa, &context->msgque));
\endcode
  - the \e client \b context is an object of the type #MqS and it is the return value of the call to #MqLinkCreate .
  - the \e server \b context is defined with the #MqSetupS::isServer configuration option to #MqLinkCreate and a \e server 
    specific wrapper around the #MqS struct. 
    The \e server \b context is created in a server specific startup code with the
    following purpose:
   - create the server specific \b context.
   - create the \libmsgque specific \b context #MqS with #MqLinkCreate.
   - adding the services or the filter.
   - doing a \e server \b context specific setup.
   .
 - both \e client and \e server are able to create multiple \b context.
 - every \e client is able to create multiple \e server-parent \b context.
 - every \e server is able to create multiple \e client-parent \b context.
\verbatim
--App-1---|-----------App-21-----------|---App-31--
          |                            |
          |             *- client211 ->|-> server31
          |             *              |
          |-> server21 -*              |---App-32--
          |             *              |
          |             *- client212 ->|-> server32
          |                            |
client1 ->| ----------App-22-----------|---App-33--
          |                            |
          |             *- client221 ->|-> server33
          |             *              |
          |-> server22 -*              |---App-34--
          |             *              |
          |             *- client222 ->|-> server34
\endverbatim
  - The setup from above is connecting 7 individual applications (App-1 - App-34) together.
  - Every individual application is consuming one process or thread.
  - \b client1 from \b App-1 is starting/connecting to \b server21 from \b App-21 and \b server22 from \b App-22
  - \b server21 is creating the \b client211 and \b client212 in \b App-21
  - \b client211 from \b App-21 is starting/connecting to \b server31 from \b App-31
  - ...
  .
 - every \b context on the \e client has a link to a \b context on the \e server.
 - every \b context is able to provide different \e service handles.
 - every \e handle is recognized by a 4 character token and have to be unique per \b context.
 - a handle can be dynamically added or removed. \n
<B>using \libmsgque code (\ref c_e1 "example")</B>
\dontinclude mulserver.c
\skipline ServiceCreate
<B>using \ccmsgque code (\ref cc_e1 "example")</B>
\dontinclude mulserver.cc
\skipline ServiceCreate
<B>using \csmsgque code (\ref cs_e1 "example")</B>
\dontinclude mulserver.cs
\skipline ServiceCreate
<B>using \javamsgque code (\ref java_e1 "example")</B>
\dontinclude mulserver.java
\skipline ServiceCreate
<B>using \tclmsgque code (\ref tcl_e1 "example")</B>
\dontinclude mulserver.tcl
\skipline ServiceCreate
<B>using \pymsgque code (\ref py_e1 "example")</B>
\dontinclude mulserver.py
\skipline ServiceCreate
<B>using \perlmsgque code (\ref perl_e1 "example")</B>
\dontinclude mulserver.pl
\skipline ServiceCreate
<B>using \vbmsgque code (\ref vb_e1 "example")</B>
\dontinclude mulserver.vb
\skipline ServiceCreate
 - the \e service handle is needed to supply a 'service' usable by a remote context \n
<B>using \libmsgque code (\ref c_e1 "example")</B>
\dontinclude mulserver.c
\skip MMUL
\until }
<B>using \ccmsgque code (\ref cc_e1 "example")</B>
\dontinclude mulserver.cc
\skip MMUL
\until }
<B>using \csmsgque code (\ref cs_e1 "example")</B>
\dontinclude mulserver.cs
\skip MMUL
\until }
<B>using \javamsgque code (\ref java_e1 "example")</B>
\dontinclude mulserver.java
\skip MMUL
\until }
\until }
<B>using \pymsgque code (\ref py_e1 "example")</B>
\dontinclude mulserver.py
\skip MMUL
\until SendRETURN
<B>using \tclmsgque code (\ref perl_e1 "example")</B>
\dontinclude mulserver.pl
\skip MMUL
\until }
<B>using \vbmsgque code (\ref vb_e1 "example")</B>
\dontinclude mulserver.vb
\skip MMUL
\until End
 .

*/

