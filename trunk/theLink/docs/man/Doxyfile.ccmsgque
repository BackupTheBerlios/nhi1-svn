# Doxyfile 1.5.3

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------


ENABLED_SECTIONS    += CC
EXAMPLE_PATH	    += $(SRCDIR)/example/cc

TAGFILES            += $(DOCDIR)/../ccmsgque_public/ccmsgque_public.tag=../ccmsgque_public

ALIASES		    += "self=ccmsgque"
ALIASES		    += "selftut=ccmsgquetut"
ALIASES		    += "NS{1}=cc_\1"
ALIASES		    += "lang=C++"
ALIASES		    += "fileextension=cc"
ALIASES		    += "yes=\e MQ_YES"
ALIASES		    += "no=\e MQ_NO"
ALIASES		    += "package=\#include \"ccmsgque.h\"<br>using namespace ccmsgque;"

# OBJECT CREATION AND DELETION
ALIASES		    += "MqS=MqC*"
ALIASES		    += "ObjectCreate=ctx = new MqC()"
ALIASES		    += "ObjectDelete=delete(ctx)"

# OBJECT CONFIGURATION
ALIASES		    += "Init=struct MqBufferLS * init = MqInitCreate()"

ALIASES		    += "config_type_buffersize=#MQ_INT"
ALIASES		    += "config_set_buffersize=#ConfigSetBuffersize"
ALIASES		    += "config_get_buffersize=#ConfigGetBuffersize"

ALIASES		    += "config_type_debug=#MQ_INT"
ALIASES		    += "config_set_debug=#ConfigSetDebug"
ALIASES		    += "config_get_debug=#ConfigGetDebug"

ALIASES		    += "config_type_timeout=#MQ_TIME_T"
ALIASES		    += "config_set_timeout=#ConfigSetTimeout"
ALIASES		    += "config_get_timeout=#ConfigGetTimeout"

ALIASES		    += "config_type_name=#MQ_CST"
ALIASES		    += "config_set_name=#ConfigSetName"
ALIASES		    += "config_get_name=#ConfigGetName"

ALIASES		    += "config_type_srvname=#MQ_CST"
ALIASES		    += "config_set_srvname=#ConfigSetSrvName"
ALIASES		    += "config_get_srvname=#ConfigGetSrvName"

ALIASES		    += "config_type_ident=#MQ_CST"
ALIASES		    += "config_set_ident=#ConfigSetIdent"
ALIASES		    += "config_get_ident=#ConfigGetIdent"
ALIASES		    += "config_check_ident=#ConfigCheckIdent"

ALIASES		    += "config_type_isSilent=bool"
ALIASES		    += "config_set_isSilent=#ConfigSetIsSilent"
ALIASES		    += "config_get_isSilent=#ConfigGetIsSilent"

ALIASES		    += "config_type_isString=bool"
ALIASES		    += "config_set_isString=#ConfigSetIsString"
ALIASES		    += "config_get_isString=#ConfigGetIsString"

ALIASES		    += "config_type_ignoreExit=bool"
ALIASES		    += "config_set_ignoreExit=#ConfigSetIgnoreExit"
ALIASES		    += "config_get_ignoreExit=NO"

ALIASES		    += "config_type_startAs=enum MqStartE"
ALIASES		    += "config_set_startAs=#ConfigSetStartAs (startAs)"
ALIASES		    += "config_get_startAs=#ConfigGetStartAs"

ALIASES		    += "config_type_daemon=MQ_CST"
ALIASES		    += "config_set_daemon=#ConfigSetDaemon (pidfile)"
ALIASES		    += "config_get_daemon=NO"

ALIASES		    += "config_type_tcp=MQ_CST"
ALIASES		    += "config_set_tcp=#ConfigSetIoTcp (host, port, myhost, myport)"
ALIASES		    += "config_get_tcp=#ConfigGetIoTcpHost/Port/MyHost/MyPort"

ALIASES		    += "config_type_uds=MQ_CST"
ALIASES		    += "config_set_uds=#ConfigSetIoUds (file)"
ALIASES		    += "config_get_uds=#ConfigGetIoUdsFile"

ALIASES		    += "config_type_pipe=MQ_SOCK"
ALIASES		    += "config_set_pipe=#ConfigSetIoPipe (socket)"
ALIASES		    += "config_get_pipe=#ConfigGetIoPipeSocket"

ALIASES		    += "config_type_isServer=bool"
ALIASES		    += "config_set_isServer=#ConfigSetIsServer"
ALIASES		    += "config_get_isServer=#ConfigGetIsServer"

ALIASES		    += "config_type_isParent=bool"
ALIASES		    += "config_set_isParent=NO"
ALIASES		    += "config_get_isParent=#ConfigGetIsParent"

ALIASES		    += "config_type_isSlave=bool"
ALIASES		    += "config_set_isSlave=NO"
ALIASES		    += "config_get_isSlave=#ConfigGetIsSlave"

ALIASES		    += "config_type_isConnected=bool"
ALIASES		    += "config_set_isConnected=NO"
ALIASES		    += "config_get_isConnected=#ConfigGetIsConnected"

ALIASES		    += "config_type_isTransaction=bool"
ALIASES		    += "config_set_isTransaction=NO"
ALIASES		    += "config_get_isTransaction=#ConfigGetIsTransaction"

ALIASES		    += "config_type_master=MqC"
ALIASES		    += "config_set_master=\ref \NS{slave}"
ALIASES		    += "config_get_master=#ConfigGetMaster"

ALIASES		    += "config_type_filter=MqC"
ALIASES		    += "config_set_filter=NO"
ALIASES		    += "config_get_filter=#ConfigGetFilter"

ALIASES		    += "config_type_ctxId=#MQ_SIZE"
ALIASES		    += "config_set_ctxId=NO"
ALIASES		    += "config_get_ctxId=#ConfigGetCtxId"

ALIASES		    += "config_type_token=#MQ_CST"
ALIASES		    += "config_set_token=NO"
ALIASES		    += "config_get_token=#ConfigGetToken"

ALIASES		    += "config_type_IServerSetup=Interface"
ALIASES             += "config_set_IServerSetup=#ccmsgque::IServerSetup"
ALIASES		    += "config_get_IServerSetup=NO"

ALIASES		    += "config_type_IServerCleanup=Interface"
ALIASES		    += "config_set_IServerCleanup=#ccmsgque::IServerCleanup"
ALIASES		    += "config_get_IServerCleanup=NO"

ALIASES		    += "config_type_IFactory=Interface"
ALIASES		    += "config_set_IFactory=#ccmsgque::IFactory"
ALIASES		    += "config_get_IFactory=NO"

ALIASES             += "config_type_IBgError=Interface"
ALIASES             += "config_set_IBgError=#ccmsgque::IBgError"
ALIASES             += "config_get_IBgError=NO"

# LINK CREATION AND DELETION
ALIASES             += "LinkCreate=ctx.LinkCreate(struct MqBufferLS * args)"
ALIASES             += "LinkCreate2=ctx.LinkCreateVA(va_list args)"
ENABLED_SECTIONS    += LinkCreate2
ALIASES             += "LinkCreate3=ctx.LinkCreateV(MQ_CST ..., NULL)"
ENABLED_SECTIONS    += LinkCreate3
ALIASES             += "LinkCreate4=ctx.LinkCreateVT(const std::vector<MQ_CST>& args)"
ENABLED_SECTIONS    += LinkCreate4
ALIASES             += "LinkCreate5=ctx.LinkCreateVC(int const argc, MQ_CST *args)"
ENABLED_SECTIONS    += LinkCreate5

ALIASES             += "LinkCreateChild=ctx.LinkCreateChild(const MqC& parent, struct MqBufferLS * args)"
ALIASES             += "LinkCreateChild2=ctx.LinkCreateChildVA(const MqC& parent, va_list args)"
ENABLED_SECTIONS    += LinkCreateChild2
ALIASES             += "LinkCreateChild3=ctx.LinkCreateChildV(const MqC& parent, MQ_CST ..., NULL)"
ENABLED_SECTIONS    += LinkCreateChild3
ALIASES             += "LinkCreateChild4=ctx.LinkCreateChildVT(const MqC& parent, const std::vector<MQ_CST>& args)"
ENABLED_SECTIONS    += LinkCreateChild4
ALIASES             += "LinkCreateChild5=ctx.LinkCreateChildVS(const MqC& parent, int const argc, MQ_CST *args)"
ENABLED_SECTIONS    += LinkCreateChild5

ALIASES		    += "LinkDelete=ctx.LinkDelete()"
ALIASES		    += "Exit=ctx.Exit()"

# SEND DATA
ALIASES		    += "SendSTART=ctx.SendSTART()"
ALIASES		    += "SendEND=ctx.SendEND(MQ_CST const token)"
ALIASES		    += "SendEND_AND_WAIT=ctx.SendEND_AND_WAIT(MQ_CST const token, MQ_TIME_T timeout=MQ_TIMEOUT_USER)"
ALIASES		    += "SendEND_AND_CALLBACK=ctx.SendEND_AND_CALLBACK(MQ_CST const token, IService * const callback)"
ALIASES		    += "SendEND_AND_CALLBACK2=ctx.SendEND_AND_CALLBACK(MQ_CST const token, CallbackF const callback)"
ENABLED_SECTIONS    += SendEND_AND_CALLBACK2
ALIASES		    += "SendRETURN=ctx.SendRETURN()"
ALIASES		    += "SendERROR=ctx.SendERROR()"
ALIASES		    += "Send_TYPE=ctx.Send[TYPE](TYPE value)"
ALIASES		    += "SendL_START=ctx.SendL_START()"
ALIASES		    += "SendL_END=ctx.SendL_END()"
ALIASES		    += "SendN=ctx.SendB(MQ_BIN value, MQ_SIZE len)"
ALIASES		    += "SendBDY=ctx.SendBDY(MQ_BIN value, MQ_SIZE len)"

# READ DATE
ALIASES		    += "read_example=\verbatim num = ctx.ReadI();\nctx.ReadL_START();\n  balance = ctx.ReadD();\n  owner = ctx.ReadC();\n  signature = ctx.ReadB();\nctx.ReadL_END();\endverbatim"
ALIASES		    += "Read_TYPE=TYPE val = ctx.Read[TYPE]()"
ALIASES		    += "ReadU=MqBufferS val = ctx.ReadU()"
ALIASES		    += "ReadN=ctx.ReadN(MQ_BIN &value, MQ_SIZE &len)"
ALIASES		    += "ReadBDY=ctx.ReadBDY(MQ_BIN &value, MQ_SIZE &len)"
ALIASES		    += "ReadProxy=ctx.ReadProxy(MqC otherCtx)"
ALIASES		    += "ReadGetNumItems=MQ_SIZE val = ctx.ReadGetNumItems()"
ALIASES		    += "ReadItemExists=MQ_BOL ctx.ReadItemExists()"
ALIASES		    += "ReadUndo=ctx.ReadUndo()"
ALIASES		    += "ReadL_START=ctx.ReadL_START(MQ_BUF buffer=NULL)"
ALIASES		    += "ReadL_START2=ctx.ReadL_START(const MqBufferC& buffer)"
ENABLED_SECTIONS    += ReadL_START2
ALIASES		    += "ReadL_START3=ctx.ReadL_START(MqBufferC * const buffer)"
ENABLED_SECTIONS    += ReadL_START3
ALIASES		    += "ReadL_END=ctx.ReadL_END()"

# ADDING SERVICES
ALIASES		    += "ServiceInterface=Interface: IService"
ALIASES		    += "ServiceCreate=ctx.ServiceCreate(MQ_CST token, IService * service)"
ALIASES		    += "ServiceCreate2=ctx.ServiceCreate(MQ_CST token, CallbackF service)"
ENABLED_SECTIONS    += ServiceCreate2
ALIASES		    += "ServiceProxy=ctx.ServiceProxy(MQ_CST token, MQ_SIZE id=0 )"
ALIASES		    += "ServiceDelete=ctx.ServiceDelete(MQ_CST token)"
ALIASES		    += "ProcessEvent=ctx.ProcessEvent([int timeout], [MQ_WAIT_(NO|ONCE|FOREVER)])"
ALIASES		    += "ProcessEventFlag=MqC.WAIT"

# SLAVE CREATION AND DELETION
ALIASES		    += "SlaveWorker=ctx.SlaveWorker(const int id, struct MqBufferLS * args = NULL)"
ALIASES		    += "SlaveWorker2=ctx.SlaveWorkerVA(const int id, va_list args)"
ENABLED_SECTIONS    += SlaveWorker2
ALIASES		    += "SlaveWorker3=ctx.SlaveWorkerV(const int id, MQ_CST ... , NULL)"
ENABLED_SECTIONS    += SlaveWorker3
ALIASES		    += "SlaveWorker4=ctx.SlaveWorkerVT(const int id, vector<MQ_CST>& args)"
ENABLED_SECTIONS    += SlaveWorker4
ALIASES		    += "SlaveWorker5=ctx.SlaveWorkerVC(const int id, int const argc, MQ_CST args[])"
ENABLED_SECTIONS    += SlaveWorker5
ALIASES             += "SlaveWorker_example=\code ctx.SlaveWorkerV (7, \"--thread\", \"--silent\", \"@\", \"WORKER\", \"--name\", \"MyWorker\", NULL); \endcode"

ALIASES		    += "SlaveCreate=ctx.SlaveCreate(const int id, MqC *const slave)"
ALIASES		    += "SlaveDelete=ctx.SlaveDelete(const int id)"
ALIASES		    += "SlaveGet=MqC ctx.SlaveGet(const int id)"

# THE BUFFER OBJECT
ALIASES		    += "BufferObject=<I>class MqBufferC</I>"
ALIASES		    += "BufferGet_TYPE=TYPE val=buffer.Get[TYPE]("
ALIASES		    += "BufferType=enum MqTypeE buffer.GetType()"

# ERROR OBJECT
ALIASES		    += "ErrorObject=<I>class MqCException ex</I>"
ALIASES		    += "ErrorGetText=string ex.what() or ctx.ErrorGetText()"
ALIASES		    += "ErrorGetNum=int ex.num() or ctx.ErrorGetNum()"
ALIASES		    += "ErrorC=ctx.ErrorC(string prefix, int num, string what)"
ALIASES		    += "ErrorSet=ctx.ErrorSet(const exception& ex)"
ALIASES		    += "ErrorReset=ctx.ErrorReset()"
ALIASES		    += "ErrorRaise=ctx.ErrorRaise()"
ALIASES		    += "ErrorPrint=ctx.ErrorPrint()"

