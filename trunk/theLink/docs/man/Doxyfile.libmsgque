# Doxyfile 1.5.3

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

ENABLED_SECTIONS    += C
ENABLED_SECTIONS    += DAEMON
ENABLED_SECTIONS    += C-STYLE
EXAMPLE_PATH	    += $(SRCDIR)/example/c

ALIASES		    += "self=libmsgque"
ALIASES		    += "selftut=libmsgquetut"
ALIASES		    += "NS{1}=c_\1"
ALIASES		    += "lang=C"
ALIASES		    += "fileextension=.c"
ALIASES		    += "executable="
ALIASES		    += "exeextension="
ALIASES		    += "dirname=c"
ALIASES		    += "null=\e NULL"
ALIASES		    += "yes=\e MQ_YES"
ALIASES		    += "no=\e MQ_NO"
ALIASES		    += "package=\#include \"msgque.h\""
ALIASES		    += "RNS_PREFIX{1}=Mq\1"
ALIASES             += "server=server.c"

ALIASES		    += "FactoryDefault=MqFactoryDefault(\TM  error, MQ_CST ident, interface...)"
ALIASES		    += "FactoryDefaultIdent=MQ_CST MqFactoryDefaultIdent()"
ALIASES		    += "FactoryAdd=MqFactoryAdd(\TM error, MQ_CST ident, interface...)"
ALIASES		    += "FactoryGet=struct MqFactoryS* MqFactoryGet(MQ_CST ident)"
ALIASES		    += "FactoryGetCalled=struct MqFactoryS* MqFactoryGetCalled(MQ_CST ident)"

ALIASES		    += "FactoryNew=\TM  MqFactoryNew(\TM error, MQ_PTR data, struct MqFactoryS * item)"
ALIASES		    += "FactoryCopy=struct MqFactoryS* MqFactoryCopy(struct MqFactoryS * item, MQ_CST ident)"

ALIASES		    += "FactoryCtxSet=MqFactoryCtxSet(\TM ctx, struct MqFactoryS *factory)"
ALIASES		    += "FactoryCtxGet=struct MqFactoryS* MqFactoryCtxGet(\TM ctx)"
ALIASES		    += "FactoryCtxIdentSet=MqFactoryCtxIdentSet(\TM ctx, MQ_CST ident)"
ALIASES		    += "FactoryCtxIdentGet=MQ_CST MqFactoryCtxIdentGet(\TM ctx)"

# OBJECT CREATION AND DELETION
ALIASES		    += "object_example=\code \n\
struct MyClassDataS { \n\
  struct MqS mqctx; \n\
  int mydata; \n\
}; \n\
enum MqErrorE MyClassFactory ( \n\
  \TM  const tmpl, \n\
  enum MqFactoryE create, \n\
  struct MqFactoryS * const item, \n\
  \TM *contextP \n\
) { \n\
  \TM  const ctx = *contextP = MqContextCreate(sizeof(struct MyClassDataS),tmpl); \n\
  ... \n\
  return MQ_OK; \n\
} \n\
\TM  ctx = MqFactoryNew (MQ_ERROR_PANIC, NULL, \n\
  MqFactoryAdd(MQ_ERROR_PANIC, \"MyClass\", MyClassFactory, NULL, NULL, NULL, NULL, NULL, NULL, NULL) \n\
); \n\
\endcode"

ALIASES		    += "ContextCreate=\TM  MqContextCreate(MQ_SIZE size, struct MqS const * const tmpl)"
ALIASES		    += "ContextCreateSection="
ALIASES		    += "ContextDelete=MqContextDelete(\TM * ctx)"
ALIASES		    += "Resolve=\TM* Resolve(\C ident, \I *size)"
ALIASES		    += "Exit=MqExit(\TM ctx)"
ALIASES		    += "LogC=MqLogC(\TM  ctx, MQ_CST const prefix, MQ_INT level, MQ_CST const message)"
ENABLED_SECTIONS    += HAS_LOGV
ALIASES		    += "LogV=MqLogV(\TM  ctx, MQ_CST const prefix, MQ_INT level, MQ_CST fmt, ...)"
ENABLED_SECTIONS    += HAS_LOGVL
ALIASES		    += "LogVL=MqLogVL(\TM  ctx, MQ_CST const prefix, MQ_INT level, MQ_CST const fmt, va_list var_list)"

# OBJECT CONFIGURATION
ALIASES		    += "Init=struct MqBufferLS * init = MqInitArg0()"
ALIASES		    += "init_example=\
\code \n\
struct MqBufferLS * init = MqInitArg0(); \n\
MqBufferLAppendC(init, \"myExecutable\"); \n\
MqBufferLAppendC(init, \"myFirstArgument\"); \n\
\endcode \n\
The memory is owned by the library -> <B>do not free the memory</B>"

ALIASES		    += "config_type_buffersize=#MQ_INT"
ALIASES		    += "config_set_buffersize=#MqConfigSetBuffersize (ctx, MQ_INT buffersize)"
ALIASES		    += "config_get_buffersize=#MqConfigGetBuffersize (ctx)"

ALIASES		    += "config_type_debug=#MQ_INT"
ALIASES		    += "config_set_debug=#MqConfigSetDebug (ctx, MQ_INT debug)"
ALIASES		    += "config_get_debug=#MqConfigGetDebug (ctx)"

ALIASES		    += "config_type_timeout=#MQ_TIME_T"
ALIASES		    += "config_set_timeout=#MqConfigSetTimeout (ctx, MQ_TIME_T timeout)"
ALIASES		    += "config_get_timeout=#MqConfigGetTimeout (ctx)"

ALIASES		    += "config_type_name=#MQ_CST"
ALIASES		    += "config_set_name=#MqConfigSetName (ctx. MQ_CST name)"
ALIASES		    += "config_get_name=#MqConfigGetName (ctx)"

ALIASES		    += "config_type_srvname=#MQ_CST"
ALIASES		    += "config_set_srvname=#MqConfigSetSrvName (ctx, MQ_CST srvName)"
ALIASES		    += "config_get_srvname=#MqConfigGetSrvName (ctx)"

ALIASES		    += "config_type_storage=#MQ_CST"
ALIASES		    += "config_set_storage=#MqConfigSetStorage (ctx, MQ_CST storageFile)"
ALIASES		    += "config_get_storage=#MqConfigGetStorage (ctx)"

ALIASES		    += "config_type_ident=#MQ_CST"
ALIASES		    += "config_set_ident=#MqConfigSetIdent (\TM ctx, MQ_CST ident)"
ALIASES		    += "config_get_ident=#MqConfigGetIdent (\TM ctx)"

ALIASES		    += "config_type_isSilent=#MQ_BOL"
ALIASES		    += "config_set_isSilent=#MqConfigSetIsSilent (ctx, MQ_BOL bool)"
ALIASES		    += "config_get_isSilent=#MqConfigGetIsSilent (ctx)"

ALIASES		    += "config_type_isString=#MQ_BOL"
ALIASES		    += "config_set_isString=#MqConfigSetIsString (ctx, MQ_BOL bool)"
ALIASES		    += "config_get_isString=#MqConfigGetIsString (ctx)"

ALIASES		    += "config_type_ignoreExit=#MQ_BOL"
ALIASES		    += "config_set_ignoreExit=#MqConfigSetIgnoreExit (ctx, MQ_BOL bool)"
ALIASES		    += "config_get_ignoreExit=NO"

ALIASES		    += "config_type_daemon=#MQ_CST"
ALIASES		    += "config_set_daemon=#MqConfigSetDaemon (ctx, MQ_CST pidfile)"
ALIASES		    += "config_get_daemon=NO"

ALIASES		    += "config_type_isServer=#MQ_BOL"
ALIASES		    += "config_set_isServer=#MqConfigSetIsServer (ctx, MQ_BOL isServer)"
ALIASES		    += "config_get_isServer=#MqConfigGetIsServer (ctx)"

ALIASES		    += "config_type_startAs=enum #MqStartE"
ALIASES		    += "config_set_startAs=#MqConfigSetStartAs (ctx, enum #MqStartE startAS)"
ALIASES		    += "config_get_startAs=#MqConfigGetStartAs (ctx)"
ALIASES		    += "MQ_START_DEFAULT=#MQ_START_DEFAULT"
ALIASES		    += "MQ_START_FORK=#MQ_START_FORK"
ALIASES		    += "MQ_START_THREAD=#MQ_START_THREAD"
ALIASES		    += "MQ_START_SPAWN=#MQ_START_SPAWN"

ALIASES		    += "config_type_tcp=#MQ_CST"
ALIASES		    += "config_set_tcp=#MqConfigSetIoTcp (ctx,MQ_CST host, MQ_CST port, MQ_CST myhost, MQ_CST myport)"
ALIASES		    += "config_get_tcp=#MqConfigGetIoTcpHost/Port/MyHost/MyPort"

ALIASES		    += "config_type_uds=#MQ_CST"
ALIASES		    += "config_set_uds=#MqConfigSetIoUdsFile (ctx, MQ_CST file)"
ALIASES		    += "config_get_uds=#MqConfigGetIoUdsFile"

ALIASES		    += "config_type_pipe=#MQ_SOCK"
ALIASES		    += "config_set_pipe=#MqConfigSetIoPipeSocket (ctx, MQ_INT socket)"
ALIASES		    += "config_get_pipe=#MqConfigGetIoPipeSocket"

ALIASES             += "config_IServerSetup=MqConfigSetServerSetup (ctx, fFunc, data, fFree, fCopy)"
ALIASES		    += "config_IServerCleanup=MqConfigSetServerCleanup (ctx, fFunc, data, fFree, fCopy)"
ALIASES		    += "config_IBgError=MqConfigSetBgError (ctx, fFunc, Data, fFree, fCopy)"
ALIASES		    += "config_IEvent=MqConfigSetEvent (ctx, fFunc, Data, fFree, fCopy)"

# LINK CREATION AND DELETION
ALIASES		    += "LinkCreate=MqLinkCreate (\TM ctx, struct MqBufferLS ** args)"
ALIASES		    += "LinkCreateChild=MqLinkCreateChild (\TM ctx, \TM parent, struct MqBufferLS ** args)"
ALIASES		    += "LinkIsConnected=MqLinkIsConnected (\TM ctx)"
ALIASES		    += "LinkGetParent=\TM  MqLinkGetParent (\TM ctx)"
ALIASES		    += "LinkGetCtxId=MQ_SIZE MqLinkGetCtxId (\TM ctx)"
ALIASES		    += "LinkIsParent=MQ_BOL MqLinkIsParent (\TM ctx)"
ALIASES		    += "LinkIsConnected=MQ_BOL MqLinkIsConnected (\TM ctx)"
ALIASES		    += "LinkDelete=MqLinkDelete(\TM ctx)"
ALIASES		    += "LinkConnect=MqLinkConnect(\TM ctx)"
ALIASES		    += "LinkGetTargetIdent=MQ_CST MqLinkGetTargetIdent (\TM ctx)"

# SEND DATA
ALIASES		    += "send_example=\code \n\
MqSendSTART(ctx);\n\
MqSendI(ctx,num);\n\
MqSendL_START(ctx);\n\
  MqSendD(ctx,balance);\n\
  MqSendC(ctx,\"name of the owner\");\n\
  MqSendB(ctx,signature);\n\
MqSendL_END(ctx);\n\
MqErrorCheck(MqSendEND_AND_WAIT(ctx,\"SRV1\",MQ_TIMEOUT_USER));\endcode"

ALIASES		    += "SendSTART=enum MqErrorE MqSendSTART(ctx)"
ALIASES		    += "SendEND=enum MqErrorE MqSendEND(ctx,MQ_TOK token)"
ALIASES		    += "SendEND_AND_WAIT=enum MqErrorE MqSendEND_AND_WAIT(ctx,MQ_TOK token,MQ_TIME_T timeout)"
ALIASES		    += "SendEND_AND_CALLBACK=enum MqErrorE MqSendEND_AND_CALLBACK(ctx,MQ_TOK token,fCallback,data,fFree)"
ALIASES		    += "SendRETURN=enum MqErrorE MqSendRETURN(ctx)"
ALIASES		    += "SendERROR=enum MqErrorE MqSendERROR(ctx)"
ALIASES		    += "SendO=enum MqErrorE MqSendO(ctx,\O value)"
ALIASES		    += "SendY=enum MqErrorE MqSendY(ctx,\Y value)"
ALIASES		    += "SendS=enum MqErrorE MqSendS(ctx,\S value)"
ALIASES		    += "SendI=enum MqErrorE MqSendI(ctx,\I value)"
ALIASES		    += "SendW=enum MqErrorE MqSendW(ctx,\W value)"
ALIASES		    += "SendF=enum MqErrorE MqSendF(ctx,\F value)"
ALIASES		    += "SendD=enum MqErrorE MqSendD(ctx,\D value)"
ALIASES		    += "SendC=enum MqErrorE MqSendC(ctx,\C value)"
ALIASES		    += "SendB=enum MqErrorE MqSendB(ctx,\B value)"
ALIASES		    += "SendU=enum MqErrorE MqSendU(ctx,struct MqBufferS * const in)"
ALIASES		    += "SendN=enum MqErrorE MqSendN(ctx,MQ_CBI const value,MQ_SIZE const len)"
ALIASES		    += "SendL_START=enum MqErrorE MqSendL_START(ctx)"
ALIASES		    += "SendL_END=enum MqErrorE MqSendL_END(ctx)"
ALIASES		    += "SendT_START=enum MqErrorE MqSendT_START(ctx)"
ALIASES		    += "SendT_END=enum MqErrorE MqSendT_END(ctx, \C token)"
ALIASES		    += "SendT_example=\code \n\
MqErrorCheck (MqSendSTART (mqctx)); \n\
MqErrorCheck (MqSendT_START (mqctx)); \n\
MqErrorCheck (MqSendC (mqctx, \"myEnvironment\")); \n\
MqErrorCheck (MqSendT_END (mqctx, \"ENV1\")); \n\
MqErrorCheck (MqSendC (mqctx, \"myData\")); \n\
MqErrorCheck (MqSendEND_AND_WAIT (mqctx, \"SRVC\", MQ_TIMEOUT_USER)); \endcode"

# READ DATE
ALIASES		    += "read_example=\code MqErrorCheck(MqReadI(ctx, &i));\nMqErrorCheck(MqReadL_START(ctx, NULL));\n  MqErrorCheck(MqReadD(ctx, &balance));\n  MqErrorCheck(MqReadC(ctx, &owner));\n  MqErrorCheck(MqReadB(ctx, &signature));\nMqReadL_END(ctx);\endcode"
ALIASES		    += "ReadO=enum MqErrorE MqReadO(ctx, \O *value)"
ALIASES		    += "ReadY=enum MqErrorE MqReadY(ctx, \Y *value)"
ALIASES		    += "ReadS=enum MqErrorE MqReadS(ctx, \S *value)"
ALIASES		    += "ReadI=enum MqErrorE MqReadI(ctx, \I *value)"
ALIASES		    += "ReadW=enum MqErrorE MqReadW(ctx, \W *value)"
ALIASES		    += "ReadF=enum MqErrorE MqReadF(ctx, \F *value)"
ALIASES		    += "ReadD=enum MqErrorE MqReadD(ctx, \D *value)"
ALIASES		    += "ReadC=enum MqErrorE MqReadC(ctx, \C *value)"
ALIASES		    += "ReadB=enum MqErrorE MqReadB(ctx, \B *value)"
ALIASES		    += "ReadU=enum MqErrorE MqReadU(ctx, \U *value)"
ALIASES		    += "ReadN=enum MqErrorE MqReadN(ctx,MQ_CBI * const value, MQ_SIZE * const len)"
ALIASES		    += "ReadDUMP=enum MqErrorE MqReadDUMP(ctx, struct MqDumpS ** const dump)"
ALIASES		    += "ReadLOAD=enum MqErrorE MqReadLOAD(ctx, struct MqDumpS * const dump)"
ALIASES		    += "ReadForward=enum MqErrorE MqReadForward(ctx, \TM  const otherCtx, struct MqDumpS * const dump)"
ALIASES		    += "ReadProxy=enum MqErrorE MqReadProxy(ctx, \TM otherCtx)"
ALIASES		    += "ReadGetNumItems=MQ_SIZE MqReadGetNumItems(ctx)"
ALIASES		    += "ReadItemExists=MQ_BOL MqReadItemExists(ctx)"
ALIASES		    += "ReadUndo=enum MqErrorE MqReadUndo(ctx)"
ALIASES		    += "ReadL_START=enum MqErrorE MqReadL_START(ctx, struct MqBufferS *buffer=NULL)"
ALIASES		    += "ReadL_END=enum MqErrorE MqReadL_END(ctx)"
ALIASES		    += "ReadT_START=enum MqErrorE MqReadT_START(ctx, struct MqBufferS *buffer=NULL)"
ALIASES		    += "ReadT_END=enum MqErrorE MqReadT_END(ctx)"
ALIASES		    += "ReadT_example=\code \n\
static enum MqErrorE SRVR ( \n\
  \TM  const mqctx, \n\
  MQ_PTR data \n\
) \n\
{ \n\
  struct MyCtxS *srvctx = (struct MyCtxS*) mqctx; \n\
  MqErrorCheck (MqReadT_START (mqctx, NULL)); \n\
  MqErrorCheck (MqReadC (mqctx, &myEnvrironment)); \n\
  MqErrorCheck (MqReadT_END (mqctx)); \n\
  MqErrorCheck (MqReadC (mqctx, &theResult)); \n\
error: \n\
  return MqErrorStack (mqctx); \n\
} \endcode"


# ADDING SERVICES
ALIASES		    += "service_example=\code \n\
enum MqErrorE ServerSetup(\TM  msgque) { \n\
  MqErrorCheck(MqServiceCreate(msgque, \"SRV1\", SRV1, NULL, NULL)); \n\
  return MQ_OK; \n\
error: \n\
  return MqErrorStack(msgque->error); \n\
} \n\
\endcode"
ALIASES		    += "ServiceInterface=Interface: IService"
ALIASES		    += "ServiceCreate=enum MqErrorE MqServiceCreate(ctx,MQ_TOK token,callback,data,fFree)"
ALIASES		    += "ServiceProxy=enum MqErrorE MqServiceProxy(ctx,MQ_TOK token, MQ_SIZE id=0)"
ALIASES		    += "ServiceStorage=enum MqErrorE MqServiceStorage(ctx,MQ_TOK token)"
ALIASES		    += "ServiceDelete=enum MqErrorE MqServiceDelete(ctx,MQ_TOK token)"
ALIASES		    += "ProcessEvent=enum MqErrorE MqProcessEvent(ctx,MQ_TIME_T timeout,MQ_WAIT_NO(|ONCE|FOREVER))"
ALIASES		    += "MQ_WAIT_NO=#MQ_WAIT_NO"
ALIASES		    += "MQ_WAIT_ONCE=#MQ_WAIT_ONCE"
ALIASES		    += "MQ_WAIT_FOREVER=#MQ_WAIT_FOREVER"
ALIASES		    += "MQ_TIMEOUT_DEFAULT=#MQ_TIMEOUT_DEFAULT"
ALIASES		    += "MQ_TIMEOUT_USER=#MQ_TIMEOUT_USER"
ALIASES		    += "MQ_TIMEOUT_MAX=#MQ_TIMEOUT_MAX"
ALIASES		    += "ServiceGetFilter=enum MqErrorE MqServiceGetFilter(ctx, MQ_SIZE id, \TM *const filter)"
ALIASES		    += "ServiceIsTransaction=int MqServiceIsTransaction (ctx)"
ALIASES		    += "ServiceGetToken=MQ_CST MqServiceGetToken (ctx)"

# SLAVE CREATION AND DELETION
ALIASES		    += "SlaveWorker=enum MqErrorE MqSlaveWorker(ctx, MQ_SIZE id, struct MqBufferLS **argv)"
ALIASES		    += "SlaveWorker_example=\code \nMqErrorCheck(MqSlaveWorker (ctx, 7,\n   MqBufferLCreateArgsV(ctx, \"--thread\", \"--silent\", \"@\", \"--name\", \"MyWorker\", NULL)\n);\endcode"
ALIASES		    += "SlaveCreate=enum MqErrorE MqSlaveCreate(ctx, MQ_SIZE id, \TM slaveCtx)"
ALIASES		    += "SlaveDelete=enum MqErrorE MqSlaveDelete(ctx, MQ_SIZE id)"
ALIASES		    += "SlaveGet=\TM  MqSlaveGet(ctx, MQ_SIZE id)"
ALIASES		    += "SlaveGetMaster=\TM  MqSlaveGetMaster(ctx)"
ALIASES		    += "SlaveIs=MQ_BOL MqSlaveIs(ctx)"

# STORAGE
ALIASES		    += "StorageOpen=enum MqErrorE MqStorageOpen(ctx, MQ_CST storageFile)"
ALIASES		    += "StorageClose=enum MqErrorE MqStorageClose(ctx)"
ALIASES		    += "StorageInsert=enum MqErrorE MqStorageInsert(ctx, MQ_TRA *transLIdP)"
ALIASES		    += "StorageSelect=enum MqErrorE MqStorageSelect(ctx, MQ_TRA *transLIdP)"
ALIASES		    += "StorageDelete=enum MqErrorE MqStorageDelete(ctx, MQ_TRA transLId)"
ALIASES		    += "StorageCount=enum MqErrorE MqStorageCount(ctx, MQ_TRA *countP)"

# THE DUMP OBJECT

ALIASES		    += "DumpSize=MQ_SIZE MqDumpSize(dump)"
ALIASES		    += "DumpDelete=MqDumpDelete(\TD *dumpP)"

# THE BUFFER OBJECT
ALIASES		    += "buffer_example=\code \n\
MQ_BUF buf = MqReadU(ctx); \n\
if (buf->type == MQ_STRT) \n\
  printf(buf->cur.C); \n\
\endcode"

ALIASES		    += "BufferObject=<I>struct MqBufferS*</I>"

ALIASES		    += "BufferGetO=enum MqErrorE MqBufferGetO(MQ_BUF buffer, \O *value)"
ALIASES		    += "BufferGetY=enum MqErrorE MqBufferGetY(MQ_BUF buffer, \Y *value)"
ALIASES		    += "BufferGetS=enum MqErrorE MqBufferGetS(MQ_BUF buffer, \S *value)"
ALIASES		    += "BufferGetI=enum MqErrorE MqBufferGetI(MQ_BUF buffer, \I *value)"
ALIASES		    += "BufferGetW=enum MqErrorE MqBufferGetW(MQ_BUF buffer, \W *value)"
ALIASES		    += "BufferGetF=enum MqErrorE MqBufferGetF(MQ_BUF buffer, \F *value)"
ALIASES		    += "BufferGetD=enum MqErrorE MqBufferGetD(MQ_BUF buffer, \D *value)"
ALIASES		    += "BufferGetC=enum MqErrorE MqBufferGetC(MQ_BUF buffer, \C *value)"
ALIASES		    += "BufferGetB=enum MqErrorE MqBufferGetB(MQ_BUF buffer, \B *value)"

ALIASES		    += "BufferSetO=MQ_BUF MqBufferSetO(MQ_BUF buffer, \O value)"
ALIASES		    += "BufferSetY=MQ_BUF MqBufferSetY(MQ_BUF buffer, \Y value)"
ALIASES		    += "BufferSetS=MQ_BUF MqBufferSetS(MQ_BUF buffer, \S value)"
ALIASES		    += "BufferSetI=MQ_BUF MqBufferSetI(MQ_BUF buffer, \I value)"
ALIASES		    += "BufferSetW=MQ_BUF MqBufferSetW(MQ_BUF buffer, \W value)"
ALIASES		    += "BufferSetF=MQ_BUF MqBufferSetF(MQ_BUF buffer, \F value)"
ALIASES		    += "BufferSetD=MQ_BUF MqBufferSetD(MQ_BUF buffer, \D value)"
ALIASES		    += "BufferSetC=MQ_BUF MqBufferSetC(MQ_BUF buffer, \C value)"
ALIASES		    += "BufferSetB=MQ_BUF MqBufferSetB(MQ_BUF buffer, \B value)"

ALIASES		    += "BufferAppendC=MQ_BUF MqBufferAppendC(MQ_BUF buffer, \C value)"

ALIASES		    += "BufferGetType=MqBufferGetType(buffer) or buffer->type"
ALIASES		    += "BufferDup=struct MqBufferS* MqBufferDup(MQ_BUF buffer)"
ALIASES		    += "BufferDelete=MqBufferDelete(MQ_BUF *bufferP)"

ALIASES		    += "Y=MQ_BYT"
ALIASES		    += "O=MQ_BOL"
ALIASES		    += "S=MQ_SRT"
ALIASES		    += "I=MQ_INT"
ALIASES		    += "F=MQ_FLT"
ALIASES		    += "W=MQ_WID"
ALIASES		    += "D=MQ_DBL"
ALIASES		    += "C=MQ_CST"
ALIASES		    += "B=MQ_BIN"
ALIASES		    += "U=MQ_BUF"
ALIASES		    += "L=MQ_BFL"

ALIASES		    += "TM=struct MqS*"
ALIASES		    += "TB=unsigned char *"
ALIASES		    += "TE=enum MqErrorE"
ALIASES		    += "TD=struct MqDumpS*"
ALIASES		    += "TU=struct MqBufferS*"
ALIASES		    += "TL=struct MqBufferLS*"

# ERROR OBJECT
ALIASES		    += "error_example=\code \n\
if (MqErrorCheckI(MqReadI(ctx, &i))) { \n\
 printf(MqErrorGetText(ctx)); \n\
 MqErrorReset(ctx); \n\
} \n\
\endcode"
ALIASES		    += "ErrorObject=<I>ctx</I>"
ALIASES		    += "ErrorGetText=MQ_CST MqErrorGetText(ctx)"
ALIASES		    += "ErrorGetNum=MQ_INT MqErrorGetNum(ctx)"
ALIASES		    += "ErrorC=MqErrorC(ctx,MQ_CST prefix, MQ_INT errnum, MQ_CST message)"
ALIASES		    += "ErrorSet=MqErrorSet(ctx,MQ_INT errnum,enum MqErrorE errorcode,MQ_CST message)"
ALIASES		    += "ErrorSetCONTINUE=MqErrorSetCONTINUE(ctx)"
ALIASES		    += "ErrorSetEXIT=MqErrorSetEXIT(ctx)"
ALIASES		    += "ErrorIsEXIT=MQ_BOL MqErrorIsEXIT(ctx)"
ALIASES		    += "ErrorReset=MqErrorReset(ctx)"
ALIASES		    += "ErrorRaise=MqErrorRaise(ctx)"
ALIASES		    += "ErrorPrint=MqErrorPrint(ctx)"

ALIASES		    += "ErrorIsEXIT_example=\code \
if (MqErrorCheckI (MqSendEND_AND_WAIT (ctx, \"TOKS\", MQ_TIMEOUT_USER))) { \n\
  if (MqErrorIsEXIT (ctx)) MqErrorReset (ctx); \n\
} \n\
\endcode"

ALIASES		    += "tut_build=\skip noinst_PROGRAMS\n\until LDADD"
ALIASES		    += "tut_server=\skip include\n\until Exit\n\until }"
ALIASES		    += "tut_client=\skip include\n\until Exit\n\until }"
ALIASES		    += "tut_filter=\skip include\n\until Exit\n\until }"


