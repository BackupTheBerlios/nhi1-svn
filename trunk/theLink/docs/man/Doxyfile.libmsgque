# Doxyfile 1.5.3

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

ENABLED_SECTIONS    += C
EXAMPLE_PATH	    += $(SRCDIR)/example/c

ALIASES		    += "self=libmsgque"
ALIASES		    += "selftut=libmsgquetut"
ALIASES		    += "NS{1}=c_\1"
ALIASES		    += "lang=C"
ALIASES		    += "fileextension=c"
ALIASES		    += "null=\e NULL"
ALIASES		    += "yes=\e MQ_YES"
ALIASES		    += "no=\e MQ_NO"
ALIASES		    += "package=\#include \"msgque.h\""

# OBJECT CREATION AND DELETION
ALIASES		    += "object_example=\code \n\
struct MqS * const ctx = MqContextCreate(sizeof(struct MyCtxS), NULL); \n\
\endcode"

ALIASES		    += "MqS=struct MqS*"
ALIASES		    += "ObjectCreate=struct MqS *ctx=MqContextCreate(size, template)"
ALIASES		    += "ObjectDelete=MqContextDelete(&ctx)"

# OBJECT CONFIGURATION
ALIASES		    += "Init=struct MqBufferLS * init = MqInitCreate()"

ALIASES		    += "config_type_buffersize=#MQ_INT"
ALIASES		    += "config_set_buffersize=#MqConfigSetBuffersize (ctx, buffersize)"
ALIASES		    += "config_get_buffersize=#MqConfigGetBuffersize (ctx)"

ALIASES		    += "config_type_debug=#MQ_INT"
ALIASES		    += "config_set_debug=#MqConfigSetDebug (ctx, debug)"
ALIASES		    += "config_get_debug=#MqConfigGetDebug (ctx)"

ALIASES		    += "config_type_timeout=#MQ_TIME_T"
ALIASES		    += "config_set_timeout=#MqConfigSetTimeout (ctx, timeout)"
ALIASES		    += "config_get_timeout=#MqConfigGetTimeout (ctx)"

ALIASES		    += "config_type_name=#MQ_CST"
ALIASES		    += "config_set_name=#MqConfigSetName (ctx. name)"
ALIASES		    += "config_get_name=#MqConfigGetName (ctx)"

ALIASES		    += "config_type_srvname=#MQ_CST"
ALIASES		    += "config_set_srvname=#MqConfigSetSrvName (ctx, srvName)"
ALIASES		    += "config_get_srvname=#MqConfigGetSrvName (ctx)"

ALIASES		    += "config_type_ident=#MQ_CST"
ALIASES		    += "config_set_ident=#MqConfigSetIdent (struct MqS *ctx, MQ_CST ident)"
ALIASES		    += "config_get_ident=#MqConfigGetIdent (struct MqS *ctx)"
ALIASES		    += "config_check_ident=#MqConfigCheckIdent (struct MqS *ctx, MQ_CST ident)"

ALIASES		    += "config_type_isSilent=#MQ_BOL"
ALIASES		    += "config_set_isSilent=#MqConfigSetIsSilent (ctx, bool)"
ALIASES		    += "config_get_isSilent=#MqConfigGetIsSilent (ctx)"

ALIASES		    += "config_type_isString=#MQ_BOL"
ALIASES		    += "config_set_isString=#MqConfigSetIsString (ctx, bool)"
ALIASES		    += "config_get_isString=#MqConfigGetIsString (ctx)"

ALIASES		    += "config_type_ignoreExit=#MQ_BOL"
ALIASES		    += "config_set_ignoreExit=#MqConfigSetIgnoreExit (ctx, bool)"
ALIASES		    += "config_get_ignoreExit=NO"

ALIASES		    += "config_type_daemon=#MQ_CST"
ALIASES		    += "config_set_daemon=#MqConfigSetDaemon (ctx, pidfile)"
ALIASES		    += "config_get_daemon=NO"

ALIASES		    += "config_type_isServer=#MQ_BOL"
ALIASES		    += "config_set_isServer=#MqConfigSetIsServer (ctx, isServer)"
ALIASES		    += "config_get_isServer=#MqConfigGetIsServer (ctx)"

ALIASES		    += "config_type_isSlave=#MQ_BOL"
ALIASES		    += "config_set_isSlave=NO"
ALIASES		    += "config_get_isSlave=#MqConfigGetIsSlave (ctx)"

ALIASES		    += "config_type_master=struct MqS*"
ALIASES		    += "config_set_master=\ref \NS{slave}"
ALIASES		    += "config_get_master=#MqConfigGetMaster (ctx)"

ALIASES		    += "config_type_ctxId=#MQ_SIZE"
ALIASES		    += "config_set_ctxId=NO"
ALIASES		    += "config_get_ctxId=#MqConfigGetCtxId (ctx)"

ALIASES		    += "config_type_startAs=enum #MqStartE"
ALIASES		    += "config_set_startAs=#MqConfigSetStartAs (ctx, startAS"
ALIASES		    += "config_get_startAs=#MqConfigGetStartAs (ctx)"

ALIASES		    += "config_type_tcp=#MQ_CST"
ALIASES		    += "config_set_tcp=#MqConfigSetIoTcp (ctx,host,port,myhost,myport)"
ALIASES		    += "config_get_tcp=#MqConfigGetIoTcpHost/Port/MyHost/MyPort"

ALIASES		    += "config_type_uds=#MQ_CST"
ALIASES		    += "config_set_uds=#MqConfigSetIoUds (ctx, file)"
ALIASES		    += "config_get_uds=#MqConfigGetIoUdsFile"

ALIASES		    += "config_type_pipe=#MQ_SOCK"
ALIASES		    += "config_set_pipe=#MqConfigSetIoPipe (ctx, socket)"
ALIASES		    += "config_get_pipe=#MqConfigGetIoPipeSocket"

ALIASES             += "config_IServerSetup=MqConfigSetServerSetup (ctx, fFunc, data, fFree, fCopy)"
ALIASES		    += "config_IServerCleanup=MqConfigSetServerCleanup (ctx, fFunc, data, fFree, fCopy)"
ALIASES		    += "config_IFactory=MqConfigSetFactory (ctx, fCreate, cData, fcFree, fcCopy, fDelete, dData, fdFree, fdCopy)"
ALIASES		    += "config_IBgError=MqConfigSetBgError (ctx, fFunc, Data, fFree, fCopy)"
ALIASES		    += "config_IEvent=MqConfigSetEvent (ctx, fFunc, Data, fFree, fCopy)"

# LINK CREATION AND DELETION
ALIASES		    += "LinkCreate=MqLinkCreate (struct MqS *ctx, struct MqBufferLS ** args)"
ALIASES		    += "LinkCreateChild=MqLinkCreateChild (struct MqS *ctx, struct MqS *parent, struct MqBufferLS ** args)"
ALIASES		    += "LinkIsConnected=MqLinkIsConnected (struct MqS *ctx)"
ALIASES		    += "LinkGetParent=struct MqS* MqLinkGetParent (struct MqS *ctx)"
ALIASES		    += "LinkGetCtxId=MQ_SIZE MqLinkGetCtxId (struct MqS *ctx)"
ALIASES		    += "LinkIsParent=MQ_BOL MqLinkIsParent (struct MqS *ctx)"
ALIASES		    += "LinkIsConnected=MQ_BOL MqLinkIsConnected (struct MqS *ctx)"
ALIASES		    += "LinkDelete=MqLinkDelete(struct MqS *ctx)"
ALIASES		    += "Exit=MqExit(ctx)"

# SEND DATA
ALIASES		    += "send_example=\code \n\
SendSTART(ctx);\n\
MqSendI(ctx,num);\n\
MqSendL_START(ctx);\n\
  MqSendD(ctx,balance);\n\
  MqSendC(ctx,\"name of the owner\");\n\
  MqSendB(ctx,signature);\n\
MqSendL_END(ctx);\n\
MqErrorCheck(MqSendEND_AND_WAIT(ctx,\"SRV1\",MQ_TIMEOUT_USER));\endcode"

ALIASES		    += "SendSTART=MqSendSTART(ctx)"
ALIASES		    += "SendEND=MqSendEND(ctx,MQ_CST token)"
ALIASES		    += "SendEND_AND_WAIT=MqSendEND_AND_WAIT(ctx,token,?timeout=MQ_TIMEOUT_USER?)"
ALIASES		    += "SendEND_AND_CALLBACK=MqSendEND_AND_CALLBACK(ctx,token,fCallback,data,fFree)"
ALIASES		    += "SendRETURN=MqSendRETURN(ctx)"
ALIASES		    += "SendERROR=MqSendERROR(ctx)"
ALIASES		    += "SendFTR=MqSendFTR(ctx,timeout=MQ_TIMEOUT_USER)"
ALIASES		    += "SendEOF=MqSendEOF(ctx,timeout=MQ_TIMEOUT_USER)"
ALIASES		    += "SendTYPE=MqSendTYPE(ctx,value)"
ALIASES		    += "SendN=MqSendN(ctx,MQ_BIN value,MQ_SIZE len)"
ALIASES		    += "SendBDY=MqSendBDY(ctx,MQ_BIN value,MQ_SIZE len)"
ALIASES		    += "SendL_START=MqSendL_START(ctx)"
ALIASES		    += "SendL_END=MqSendL_END(ctx)"

# READ DATE
ALIASES		    += "read_example=\code MqErrorCheck(MqReadI(ctx, &i));\nMqErrorCheck(MqReadL_START(ctx, NULL));\n  MqErrorCheck(MqReadD(ctx, &balance));\n  MqErrorCheck(MqReadC(ctx, &owner));\n  MqErrorCheck(MqReadB(ctx, &signature));\nMqReadL_END(ctx);\endcode"
ALIASES		    += "ReadTYPE=MqReadTYPE(ctx, TYPE *val)"
ALIASES		    += "ReadN=MqReadN(ctx,MQ_BIN *value, MQ_SIZE *len)"
ALIASES		    += "ReadBDY=MqReadBDY(ctx,MQ_BIN *value, MQ_SIZE *len)"
ALIASES		    += "ReadU=MqReadU(ctx)"
ALIASES		    += "ReadProxy=MqReadProxy(ctx, otherCtx)"
ALIASES		    += "ReadGetNumItems=MQ_SIZE MqReadGetNumItems(ctx)"
ALIASES		    += "ReadItemExists=MQ_BOL MqReadItemExists(ctx)"
ALIASES		    += "ReadUndo=MqReadUndo(ctx)"
ALIASES		    += "ReadL_START=MqReadL_START(ctx, struct MqBufferS buffer=NULL)"
ALIASES		    += "ReadL_END=MqReadL_END(ctx)"

# ADDING SERVICES
ALIASES		    += "service_example=\code \n\
enum MqErrorE ServerSetup(struct MqS * msgque) { \n\
  MqErrorCheck(MqServiceCreate(msgque, \"SRV1\", SRV1, NULL, NULL)); \n\
  return MQ_OK; \n\
error: \n\
  return MqErrorStack(msgque->error); \n\
} \n\
\endcode"
ALIASES		    += "ServiceInterface=Interface: IService"
ALIASES		    += "ServiceCreate=MqServiceCreate(ctx,token,callback,data,fFree)"
ALIASES		    += "ServiceProxy=MqServiceProxy(ctx,MQ_CST token, MQ_SIZE id=0)"
ALIASES		    += "ServiceDelete=MqServiceDelete(ctx,token)"
ALIASES		    += "ProcessEvent=MqProcessEvent(ctx,timeout,MQ_WAIT_(NO|ONCE|FOREVER))"
ALIASES		    += "MQ_WAIT_NO=#MQ_WAIT_NO"
ALIASES		    += "MQ_WAIT_ONCE=#MQ_WAIT_ONCE"
ALIASES		    += "MQ_WAIT_FOREVER=#MQ_WAIT_FOREVER"
ALIASES		    += "ServiceGetFilter=struct MqS* ServiceGetFilter(ctx, MQ_SIZE id, struct MqCtx **const filter)"
ALIASES		    += "ServiceIsTransaction=int ServiceIsTransaction (ctx)"
ALIASES		    += "ServiceGetToken=MQ_CST ServiceGetToken (ctx)"

# SLAVE CREATION AND DELETION
ALIASES		    += "SlaveWorker=MqSlaveWorker(ctx,id,argv)"
ALIASES		    += "SlaveWorker_example=\code \nMqErrorCheck(MqSlaveWorker (ctx, 7,\n   MqBufferLCreateArgsV(ctx, \"--thread\", \"--silent\", \"@\", \"--name\", \"MyWorker\", NULL)\n);\endcode"
ALIASES		    += "SlaveCreate=MqSlaveCreate(ctx,id,slaveCtx)"
ALIASES		    += "SlaveDelete=MqSlaveDelete(ctx,id)"
ALIASES		    += "SlaveGet=MqSlaveGet(ctx,id)"

# THE BUFFER OBJECT
ALIASES		    += "buffer_example=\code \n\
MQ_BUF buf = MqReadU(ctx); \n\
if (buf->type == MQ_STRT) \n\
  printf(buf->cur.C); \n\
\endcode"

ALIASES		    += "BufferObject=<I>struct MqBufferS*</I>"
ALIASES		    += "BufferGetTYPE=TYPE MqBufferGetTYPE(MQ_BUF buffer)"
ALIASES		    += "BufferType=buffer->type"

ALIASES		    += "Y=#MQ_BYT"
ALIASES		    += "O=#MQ_BOL"
ALIASES		    += "S=#MQ_SRT"
ALIASES		    += "I=#MQ_INT"
ALIASES		    += "F=#MQ_FLT"
ALIASES		    += "W=#MQ_WID"
ALIASES		    += "D=#MQ_DBL"
ALIASES		    += "C=#MQ_CST"
ALIASES		    += "B=#MQ_BIN"
ALIASES		    += "U=#MQ_BUF"

# ERROR OBJECT
ALIASES		    += "error_example=\code \n\
if (MqErrorCheckI(MqReadI(ctx, &i))) { \n\
 printf(MqErrorGetText(ctx)); \n\
 MqErrorReset(ctx); \n\
} \n\
\endcode"
ALIASES		    += "ErrorObject=<I>ctx</I>"
ALIASES		    += "ErrorGetText=MQ_CST MqErrorGetText(ctx)"
ALIASES		    += "ErrorGetNum=MQ_INT MqErrorGetNum(ctx)"
ALIASES		    += "ErrorC=MqErrorC(ctx,MQ_CST prefix, MQ_INT errnum, MQ_CST message)"
ALIASES		    += "ErrorSet=MqErrorSet(ctx,MQ_INT errnum,enum MqErrorE errorcode,MQ_CST message)"
ALIASES		    += "ErrorSetCONTINUE=MqErrorSetCONTINUE(ctx)"
ALIASES		    += "ErrorReset=MqErrorReset(ctx)"
ALIASES		    += "ErrorRaise=MqErrorRaise(ctx)"
ALIASES		    += "ErrorPrint=MqErrorPrint(ctx)"


