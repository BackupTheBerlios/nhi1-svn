#+
#§  \file       theLink/tests/transaction.test
#§  \brief      \$Id$
#§  
#§  (C) 2002 - NHI - #1 - Project - Group
#§  
#§  \version    \$Rev$
#§  \author     EMail: aotto1968 at users.berlios.de
#§  \attention  this software has GPL permissions to copy
#§              please contact AUTHORS for additional information
#§

if {[info exists env(TS_LIBRARY)]} {
  source $env(TS_LIBRARY)
} else {
  source [file join [file dirname [info script]] library.tcl]
}

##
## -----------------------------------------------------------------------
## init
##

#set tcl_traceExec 1

set testdb [makeFile {} storageFile]
file delete -force $testdb
set storageFiles [list "#memdb#" ]
set storageFiles [list "#memdb#" "#tmpdb#" $testdb]


proc CB_I {ctx} {
  global RET
  $ctx ReadT_START
  lappend RET [$ctx ReadI]
  $ctx ReadT_END
  lappend RET [$ctx ReadI]
}

proc ECOI {ctx} {
  $ctx SendSTART
  $ctx SendI [$ctx ReadI]
  $ctx SendRETURN
}

[tclmsgque FactoryGet] Copy OTTO

##
## -----------------------------------------------------------------------
## Master/Child + Binary yes/no
##

if {[Block 1]} {

# 1,2, ... tclmsgque (parent/child)
 foreach I [getNum 3] {

 # transport-type: string or binary
  foreach B [getEnv BIN_LST] {

  # socket-type: pipe, uds or tcp
   foreach C [getEnv COM_LST] {

    # server-type: server server.tcl
    foreach S [filter SRV_LST $C] {

      # what is currently tested
       SetConstraints $I $B $S

      # storage
      foreach D $storageFiles {

##
## -----------------------------------------------------------------------
## transactions...
##

# startup binary --------------------------
Setup $I $B $C $S --ident OTTO

Echo0 $FH_LAST STDB SendC $D
set D [file tail $D]

# tests ----------------------------

test transaction-e-1-($I|$B|$C|$S|$D) {wrong item position} \
    -constraints    {c pipe} \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendI 1
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendEND_AND_WAIT TRNS
    } \
    -returnCodes    error \
    -match	    glob \
    -result         {[cC]> (client-0) \[MqSendT_START] the 'TRANSACTION' item have to be the 'first' item in the data package}

test transaction-e-2-($I|$B|$C|$S|$D) {SendT_END without SendT_START} \
    -constraints    {c pipe} \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_END TEST
      $FH_LAST SendEND_AND_WAIT TRNS
    } \
    -returnCodes    error \
    -match	    glob \
    -result         {[cC]> (client-0) \[MqSendT_END] the required item 'MqSendT_START' is not available in the data package}

test transaction-2a-($I|$B|$C|$S|$D) {basic test - SendEND_AND_WAIT OK return} \
    -setup	    {
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendI 1
      $FH_LAST SendEND_AND_WAIT ECOI
      $FH_LAST ProcessEvent -wait ONCE
      set RET
    } \
    -cleanup {
      $FH_LAST ServiceDelete TEST
    } \
    -result         {9978 1}

test transaction-2b-($I|$B|$C|$S|$D) {basic test - SendEND_AND_CALLBACK OK return} \
    -setup	    {
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
      proc CB {ctx} {
	lappend ::RET CB
      }
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendI 1
      $FH_LAST SendEND_AND_CALLBACK ECOI CB
      $FH_LAST ProcessEvent -wait ONCE; # wait for callback
      $FH_LAST ProcessEvent -wait ONCE; # wait for transaction
      set RET
    } \
    -cleanup {
      $FH_LAST ServiceDelete TEST
    } \
    -result         {CB 9978 1}

test transaction-2c-($I|$B|$C|$S|$D) {basic test - SendEND OK return} \
    -setup	    {
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
      proc CB {ctx} {
	lappend ::RET CB
      }
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendI 1
      $FH_LAST SendEND ECOI
      $FH_LAST ProcessEvent -wait ONCE; # wait for transaction
      set RET
    } \
    -cleanup {
      $FH_LAST ServiceDelete TEST
    } \
    -result         {9978 1}

test transaction-3-($I|$B|$C|$S|$D) {basic test - ERROR return} \
    -constraints    {binary} \
    -setup	    {
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendW 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendW 1
      $FH_LAST SendEND_AND_WAIT ECOI
      $FH_LAST ProcessEvent -wait ONCE
      set RET
    } \
    -cleanup {
      $FH_LAST ServiceDelete TEST
    } \
    -returnCodes    error \
    -match	    glob \
    -result         {[cC]> (client-0) \[transaction-callback-error] <Token|TEST>, <Num|1>
[sS]> (server-0) \[*pBufferGetA4] type ERROR, it is not allowed to convert an 'WID' object into an 'INT' object
[sS]> (server-0) found in function "*sReadA4" at file "read.c*"
[cC]> (client-0) found in function "pServiceStart" at file "service.c"
[cC]> (client-0) found in function "pEventStart" at file "event.c"
[cC]> (client-0) found in function "MqProcessEvent" at file "service.c"}

test transaction-4-($I|$B|$C|$S|$D) {basic test - ERROR return} \
    -setup	    {
      set RET [list]
      $FH_LAST ServiceCreate ECOI ECOI
    } \
    -body           {
      EchoL $FH_LAST TRNS SendI 345
    } \
    -cleanup {
      $FH_LAST ServiceDelete ECOI
    } \
    -returnCodes    ok \
    -match	    glob \
    -result         {9876 345}

test transaction-5-($I|$B|$C|$S|$D) {MqSendERROR test} \
    -setup	    {
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
      proc CB {ctx} {
	lappend ::RET CB
      }
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendI 1
      $FH_LAST SendEND ERRT
      $FH_LAST ProcessEvent -wait ONCE; # wait for transaction
      set RET
    } \
    -cleanup {
      $FH_LAST ServiceDelete TEST
    } \
    -returnCodes    error \
    -match	    glob \
    -result         {[cC]> (client-0) \[transaction-callback-error] <Token|TEST>, <Num|9>
[sS]> (server-0) \[MYERR] 1
[cC]> (client-0) found in function "pTokenDefaultTRT" at file "token.c"
[cC]> (client-0) found in function "pServiceStart" at file "service.c"
[cC]> (client-0) found in function "pEventStart" at file "event.c"
[cC]> (client-0) found in function "MqProcessEvent" at file "service.c"}
 
# cleanup ---------------------------

Cleanup
   
     }; # storage
    }; # SRV_LST
   }; # COM_LST
  }; # BIN_LST
 }; # Master/Child  
unset -nocomplain I B C S

}

##  
## -----------------------------------------------------------------------
## additional testes
##

if {[Block 2]} {

# 1,2, ... tclmsgque (parent/child)
 foreach I [getNum 3] {

 # transport-type: string or binary
  foreach B [getEnv BIN_LST] {

  # socket-type: pipe, uds or tcp
   foreach C [getEnv COM_LST] {

    # server-type: server server.tcl
    foreach S [filter SRV_LST $C] {

     # storage
     foreach D $storageFiles {

test transaction-X1-($I|$B|$C|$S|$D) {Read/Send BDY test} \
    -constraints    {!filter-test} \
    -setup	    {
      Setup $I $B $C $S --filter-server Filter3 --ident OTTO
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
      Echo0 $FH_LAST STDB SendC $D
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendI 1
      $FH_LAST SendEND_AND_WAIT ECOI
      $FH_LAST ProcessEvent -wait ONCE
      set RET
    } \
    -cleanup {
      Cleanup
    } \
    -result         {9978 1}

test transaction-X2-($I|$B|$C|$S|$D) {Read/Send BDY test with ERROR} \
    -constraints    {!filter-test} \
    -setup	    {
      Setup $I $B $C $S --filter-server Filter3 --ident OTTO
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
      Echo0 $FH_LAST STDB SendC $D
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendEND_AND_WAIT ECOI
      $FH_LAST ProcessEvent -wait ONCE
      set RET
    } \
    -cleanup {
      Cleanup
    } \
    -returnCodes    error \
    -match	    glob \
    -result         {[cC]> (client-0) \[transaction-callback-error] <Token|TEST>, <Num|213>
[sS]> (server-0) \[sReadA4] request more arguments than available
[cC]> (client-0) found in function "pTokenDefaultTRT" at file "token.c"
[cC]> (client-0) found in function "pServiceStart" at file "service.c"
[cC]> (client-0) found in function "pEventStart" at file "event.c"
[cC]> (client-0) found in function "MqProcessEvent" at file "service.c"}
   
     }; # storageFiles
    }; # SRV_LST
   }; # COM_LST
  }; # BIN_LST
 }; # Master/Child  
unset -nocomplain I B C S

}

if {[Block 3]} {

# 1,2, ... tclmsgque (parent/child)
 foreach I [getNum 3] {

 # transport-type: string or binary
  foreach B [getEnv BIN_LST] {

  # socket-type: pipe, uds or tcp
   foreach C [filter -not COM_LST pipe] {

    # server-type: server server.tcl
    foreach S [filter SRV_LST $C] {

test transaction-Y1-($I|$B|$C|$S) {shutdown during SendEND_AND_WAIT} \
    -constraints    {bug} \
    -setup	    {
      Setup $I $B $C $S --ident OTTO --filter-server Filter3
      set RET [list]
      $FH_LAST ServiceCreate TEST CB_I
    } \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendT_START
      $FH_LAST SendI 9978
      $FH_LAST SendT_END TEST
      $FH_LAST SendI 1
      $FH_LAST SendEND_AND_WAIT ECIW
      $FH_LAST LinkDelete
if 0 {
      after 1000
Print ARG_LAST
      $FH_LAST LinkCreate {*}$ARG_LAST
      $FH_LAST ProcessEvent -wait ONCE
}
    } \
    -cleanup {
      Cleanup
    } \
    -result         {9978 1}
   
    }; # SRV_LST
   }; # COM_LST
  }; # BIN_LST
 }; # Master/Child  
unset -nocomplain I B C S

}

##
## -----------------------------------------------------------------------
## finish
##
catch {file delete -force $testdb}
freeTests

