#+
#§  \file       theLink/tests/trans.test
#§  \brief      \$Id$
#§  
#§  (C) 2002 - NHI - #1 - Project - Group
#§  
#§  \version    \$Rev$
#§  \author     EMail: aotto1968 at users.berlios.de
#§  \attention  this software has GPL permissions to copy
#§              please contact AUTHORS for additional information
#§

if {[info exists env(TS_LIBRARY)]} {
  source $env(TS_LIBRARY)
} else {
  source [file join [file dirname [info script]] library.tcl]
}

##
## -----------------------------------------------------------------------
## init
##

#set tcl_traceExec 1

##
## -----------------------------------------------------------------------
## define filter
##

set env(TS_FILTER_SERVER)  Filter4
set env(TS_FILTER_CLIENT)  NO

##
## -----------------------------------------------------------------------
## Master/Child + Binary yes/no
##

# 1,2, ... tclmsgque (parent/child)
 foreach I [numGet 1] {

 # transport-type: string or binary
  foreach B [filterGet BIN_LST binary] {

  # socket-type: pipe, uds or tcp
   foreach C [filterGet -or COM_LST tcp uds] {

    # server-type: server server.tcl
    foreach S [filterGet SRV_LST $C spawn] {

# tests ----------------------------

test trans-1-($I|$B|$C|$S) {send data with error} \
    -body           {
      Setup $I $B $C $S --save-server-output
      Echo0 $FH_LAST DUM1 SendC HALLO
      Echo0 $FH_LAST DUM2 SendC OTTO
      Cleanup
    } \
    -returnCodes    ok \
    -match	    glob \
    -result         {BACKGROUND ERROR: [Cc]> (fs) \[service-call-error] <Tok|DUM1> <Num|1>
[Ss]> (server-0) \[*pTokenInvoke] token <DUM1> not found
BACKGROUND ERROR: [Cc]> (fs) \[service-call-error] <Tok|DUM2> <Num|1>
[Ss]> (server-0) \[*pTokenInvoke] token <DUM2> not found}

test trans-2-($I|$B|$C|$S) {send valid data} \
    -body           {
      Setup $I $B $C $S --save-server-output
      Echo0 $FH_LAST PRNT SendC HALLO
      Cleanup
    } \
    -returnCodes    ok \
    -result         { 1: HALLO}

test trans-3-($I|$B|$C|$S) {send error + valid data} \
    -body           {
      Setup $I $B $C $S --save-server-output
      Echo0 $FH_LAST DUM1 SendC HALLO
      Echo0 $FH_LAST PRNT SendC HALLO
      Cleanup
    } \
    -returnCodes    ok \
    -match	    glob \
    -result         {BACKGROUND ERROR: [cC]> (fs) \[service-call-error] <Tok|DUM1> <Num|1>
[sS]> (server-0) \[pTokenInvoke] token <DUM1> not found
 1: HALLO}

# cleanup ---------------------------
#Cleanup

##  
## -----------------------------------------------------------------------
## finish loop
##
   
    }; # SRV_LST
   }; # COM_LST
  }; # BIN_LST
 }; # Master/Child  
unset -nocomplain I B C S

##  
## -----------------------------------------------------------------------
## additional tests
##

# 1,2, ... tclmsgque (parent/child)
 foreach I [numGet 1] {

 # transport-type: string or binary
  foreach B [filterGet BIN_LST binary] {

  # server-type: server server.tcl
  foreach S [filterGet -or SRV_LST spawn fork] {

test trans-X1-($I|$B|$S) {send error + valid data} \
    -setup	    {
      set TMP	[makeFile "START" tmp.txt]
      set CON1	[FindFreeConnection $S]
      set CON2	[FindFreeConnection $S]
      set SRV	[list {*}[getServer $S] {*}$CON2]
      set FTR	[list {*}[getFilter Filter4.$S] {*}$CON1 @ {*}$CON2]
      set CTX	[tclmsgque MqS]
      $CTX	ConfigSetName	  "client"
      $CTX	ConfigSetDebug	  $env(TS_DEBUG)
    } \
    -body           {
      Bg {*}$SRV
      Bg {*}$FTR
      $CTX LinkCreate {*}$CON1

      Echo0 $CTX PRN2 SendC $TMP SendC T1
      Call  $CTX SendEND ERR4
      Echo0 $CTX PRN2 SendC $TMP SendC T2
      Echo0 $CTX PRN2 SendC $TMP SendC T3
      $CTX Delete

      WaitOnFileToken $TMP T3
    } \
    -cleanup	    {
      Cleanup
    } \
    -returnCodes    ok \
    -match	    glob \
    -result         {START
 1: T1
 1: T2
 1: T3}

test trans-X2-($I|$B|$S) {send multiple error + valid data} \
    -setup	    {
      set TMP	[makeFile "START" tmp.txt]
      set CON1	[FindFreeConnection $S]
      set CON2	[FindFreeConnection $S]
      set SRV	[list {*}[getServer $S] {*}$CON2 --timeout $env(TS_TIMEOUT)]
      set FTR	[list {*}[getFilter Filter4.$S] {*}$CON1 --timeout $env(TS_TIMEOUT) @ {*}$CON2]
      set CTX	[tclmsgque MqS]
      $CTX	ConfigSetName	  "client"
      $CTX	ConfigSetTimeout  $env(TS_TIMEOUT)
      $CTX	ConfigSetDebug	  $env(TS_DEBUG)
    } \
    -body           {
      Bg {*}$SRV
      Bg {*}$FTR
      $CTX LinkCreate {*}$CON1

      Echo0 $CTX PRN2 SendC $TMP SendC T1
      Call  $CTX SendEND ERR4
      Echo0 $CTX PRN2 SendC $TMP SendC T2
      Call  $CTX SendEND ERR4
      Echo0 $CTX PRN2 SendC $TMP SendC T3
      Call  $CTX SendEND ERR4
      $CTX Delete

      WaitOnFileToken $TMP T3
    } \
    -cleanup	    {
      Cleanup
    } \
    -returnCodes    ok \
    -match	    glob \
    -result         {START
 1: T1
 1: T2
 1: T3}

   }; # SRV_LST
  }; # BIN_LST
 }; # Master/Child  
unset -nocomplain I B C S

##
## -----------------------------------------------------------------------
## finish
##

freeTests

