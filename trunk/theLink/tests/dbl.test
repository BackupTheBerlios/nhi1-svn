#+
#§  \file       theLink/tests/dbl.test
#§  \brief      \$Id$
#§  
#§  (C) 2002 - NHI - #1 - Project - Group
#§  
#§  \version    \$Rev$
#§  \author     EMail: aotto1968 at users.berlios.de
#§  \attention  this software has GPL permissions to copy
#§              please contact AUTHORS for additional information
#§

set TS_SCRIPT [info script]
set TS_LIBRARY  [file join . library.tcl]
if {[file exists $TS_LIBRARY]} {
  source $TS_LIBRARY
} else {
  source [file join [file dirname $TS_SCRIPT] library.tcl]
}

##
## -----------------------------------------------------------------------
## init
##

set MAX_DBL    [tclmsgque const maxD]
set MIN_DBL    [tclmsgque const minD]
  
##
## -----------------------------------------------------------------------
## Master/Child + Binary yes/no
##
 
# 1,2, ... tclmsgque (parent/child)
 foreach I [numGet 2] {

 # transport-type: string or binary
  foreach B [envGet BIN_LST] {

  # socket-type: uds or tcp
   foreach C [envGet COM_LST] {

    # server-type: server server.tcl
     foreach S [filterGet SRV_LST $C] {
 
##
## -----------------------------------------------------------------------
## int 
##
 
# startup binary --------------------------

Setup $I $B $C $S

# tests ----------------------------

test dbl-1-($I|$B|$C|$S) {echo datatype (MQ_DBL)} {
    tclmsgque print objtype [Echo1 $FH_LAST ECOU ReadD SendD $MAX_DBL]
} "double"

test dbl-2-($I|$B|$C|$S) {(MQ_WID to MQ_DBL) fit max} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendD $MAX_DBL} \
    -returnCodes    ok \
    -result         $MAX_DBL
 
test dbl-3-($I|$B|$C|$S) {(MQ_WID to MQ_DBL) fit min} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendD $MIN_DBL} \
    -returnCodes    ok \
    -result         $MIN_DBL

test dbl-4-($I|$B|$C|$S) {(MQ_STR to MQ_DBL) fit max} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendD $MAX_DBL} \
    -returnCodes    ok \
    -result         $MAX_DBL

test dbl-5-($I|$B|$C|$S) {(MQ_STR to MQ_DBL) fit min} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendD $MIN_DBL} \
    -returnCodes    ok \
    -result         $MIN_DBL

test dbl-6-($I|$B|$C|$S) {(MQ_STR to MQ_DBL) error size} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendC 1234a} \
    -returnCodes    error \
    -match          glob \
    -result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] size ERROR, can not convert '1234a' into an 'DBL' object*}

test dbl-7-($I|$B|$C|$S) {range error underflow} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendC ${MIN_DBL}0} \
    -returnCodes    error \
    -match          glob \
    -result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] underflow ERROR, can not convert '*' into an 'DBL' object*}

test dbl-8-($I|$B|$C|$S) {range error overflow} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendC ${MAX_DBL}0} \
    -returnCodes    error \
    -match          glob \
    -result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] overflow ERROR, can not convert '*' into an 'DBL' object*}

test dbl-8b-($I|$B|$C|$S) {range error -overflow} \
    -body           {Echo1 $FH_LAST ECOD ReadD SendC -${MAX_DBL}0} \
    -returnCodes    error \
    -match          glob \
    -result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] overflow ERROR, can not convert '*' into an 'DBL' object*}
 
if {$B eq "binary"} {
    test dbl-9-($I|$B|$C|$S) {(MQ_INT to MQ_DBL) error INT type} \
	-body           {Echo1 $FH_LAST ECOD ReadD SendI 1234} \
	-returnCodes    error \
	-match          glob \
	-result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] type ERROR, it is not allowed to convert an 'INT' object into an 'DBL' object*}
} else {
    test dbl-9-($I|$B|$C|$S) {(MQ_INT to MQ_DBL) error INT type} \
	-body           {Echo1 $FH_LAST ECOD ReadD SendI 1234} \
	-returnCodes    ok \
	-match		glob \
	-result         1234.0
}

if {$B eq "binary"} { 
    test dbl-10-($I|$B|$C|$S) {(MQ_WID to MQ_DBL) error WID type} \
	-body           {Echo1 $FH_LAST ECOD ReadD SendW 1234} \
	-returnCodes    error \
	-match          glob \
	-result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] type ERROR, it is not allowed to convert an 'WID' object into an 'DBL' object*}
} else {
    test dbl-10-($I|$B|$C|$S) {(MQ_WID to MQ_DBL) error WID type} \
	-body           {Echo1 $FH_LAST ECOD ReadD SendW 1234} \
	-returnCodes    ok \
	-match		glob \
	-result         1234.0
}
 
test dbl-11-($I|$B|$C|$S) {(MQ_LST to MQ_DBL) error LST type} \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendL_START
      $FH_LAST SendD 1234.5
      $FH_LAST SendL_END
      $FH_LAST SendEND_AND_WAIT ECOD
      $FH_LAST ReadD
    } \
    -returnCodes    error \
    -match          glob \
    -result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|1>*
[sS]> (server-0) \[*pBufferGetA8\] type ERROR, it is not allowed to convert an 'LST' object into an 'DBL' object*}

test dbl-12-($I|$B|$C|$S) {no data} \
    -body           {
      $FH_LAST SendSTART
      $FH_LAST SendEND_AND_WAIT ECOD
      $FH_LAST ReadD
    } \
    -returnCodes    error \
    -match          glob \
    -result         {[cC]> (client-0) \[service-call-error\] <Tok|ECOD> <Num|213>*
[sS]> (server-0) \[*sReadA8\] request more arguments than available*}

test dbl-13-($I|$B|$C|$S) {set/get context data} \
    -setup	 {
	set DATA [list 5278.363489 0.0035346]
    } \
    -body        {
	for {set i 0} {$i < $I} {incr i} {
	  set ctx $FH(0-$i)
	  $ctx SendSTART
	  $ctx SendD [lindex $DATA $i]
	  $ctx SendEND SETU
	}
	for {set i 0} {$i < $I} {incr i} {
	  set dat [lindex $DATA $i]
	  set ctx $FH(0-$i)
	  $ctx SendSTART
	  $ctx SendEND_AND_WAIT GETU
	  set ret [$ctx ReadD]
	  if {$dat != $ret} {
	    error "expect value '$dat' but got '$ret'"
	  }
	}
	return OK
    } \
    -cleanup	{
	unset DATA
    } \
    -result	{OK}

# cleanup ---------------------------

Cleanup

##
## -----------------------------------------------------------------------
## finish loop
## 

    }; # SRV_LST
   }; # COM_LST
  }; # BIN_LST
 }; # Master/Child  
unset I B C S

##
## -----------------------------------------------------------------------
## finish
##

freeTests



